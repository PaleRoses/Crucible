{"ast":null,"code":"var _jsxFileName = \"/home/valeria/Documents/Crucible/frontend/src/components/core/Background.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport './background.css';\n\n// Zodiac constellation definitions - simplified vertex patterns\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CONSTELLATIONS = [{\n  name: 'Venus',\n  vertices: [{\n    x: 0.3,\n    y: 0.3\n  }, {\n    x: 0.3,\n    y: 0.22\n  },\n  // Top vertical line\n  {\n    x: 0.27,\n    y: 0.25\n  }, {\n    x: 0.33,\n    y: 0.25\n  },\n  // Cross horizontal\n  {\n    x: 0.3,\n    y: 0.35\n  },\n  // Bottom of circle\n  {\n    x: 0.25,\n    y: 0.32\n  }, {\n    x: 0.35,\n    y: 0.32\n  },\n  // Middle circle points\n  {\n    x: 0.25,\n    y: 0.28\n  }, {\n    x: 0.35,\n    y: 0.28\n  } // Upper circle points\n  ],\n  edges: [[0, 1], [0, 4], [4, 5], [5, 7], [7, 8], [8, 6], [6, 4], [2, 3]]\n}, {\n  name: 'Cassiopeia',\n  vertices: [{\n    x: 0.7,\n    y: 0.15\n  }, {\n    x: 0.75,\n    y: 0.2\n  }, {\n    x: 0.8,\n    y: 0.15\n  }, {\n    x: 0.85,\n    y: 0.2\n  }, {\n    x: 0.9,\n    y: 0.15\n  }],\n  edges: [[0, 1], [1, 2], [2, 3], [3, 4]]\n}, {\n  name: 'Lyra',\n  vertices: [{\n    x: 0.6,\n    y: 0.65\n  }, {\n    x: 0.65,\n    y: 0.6\n  }, {\n    x: 0.65,\n    y: 0.7\n  }, {\n    x: 0.7,\n    y: 0.65\n  }, {\n    x: 0.64,\n    y: 0.65\n  }],\n  edges: [[0, 1], [0, 2], [1, 3], [2, 3], [4, 0], [4, 1], [4, 2], [4, 3]]\n}];\nconst Background = ({\n  cursorPosition,\n  setCursorPosition\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const particlesRef = useRef([]);\n  const constellationsRef = useRef([]);\n  const requestRef = useRef(null);\n  const timeRef = useRef(0);\n  const lastCursorPosition = useRef({\n    x: 0,\n    y: 0\n  });\n  const parallaxLayersRef = useRef([]);\n\n  // Initialize particles, constellations, and parallax layers\n  useEffect(() => {\n    // Create three distinct parallax layers\n    parallaxLayersRef.current = [{\n      depth: 0.2,\n      // Distant layer (moves slowest)\n      particles: Array(30).fill().map(() => ({\n        x: Math.random() * window.innerWidth,\n        y: Math.random() * window.innerHeight,\n        initialX: Math.random() * window.innerWidth,\n        initialY: Math.random() * window.innerHeight,\n        size: Math.random() * 1 + 0.3,\n        baseSize: Math.random() * 1 + 0.3,\n        speedX: (Math.random() - 0.5) * 0.05,\n        speedY: (Math.random() - 0.5) * 0.05,\n        opacity: Math.random() * 0.2 + 0.05,\n        baseOpacity: Math.random() * 0.2 + 0.05,\n        twinkleSpeed: Math.random() * 0.01 + 0.002,\n        twinklePhase: Math.random() * Math.PI * 2,\n        twinkleProbability: Math.random() * 0.0003 + 0.0001\n      }))\n    }, {\n      depth: 0.5,\n      // Middle layer\n      particles: Array(40).fill().map(() => ({\n        x: Math.random() * window.innerWidth,\n        y: Math.random() * window.innerHeight,\n        initialX: Math.random() * window.innerWidth,\n        initialY: Math.random() * window.innerHeight,\n        size: Math.random() * 1.5 + 0.5,\n        baseSize: Math.random() * 1.5 + 0.5,\n        speedX: (Math.random() - 0.5) * 0.1,\n        speedY: (Math.random() - 0.5) * 0.1,\n        opacity: Math.random() * 0.25 + 0.1,\n        baseOpacity: Math.random() * 0.25 + 0.1,\n        twinkleSpeed: Math.random() * 0.015 + 0.004,\n        twinklePhase: Math.random() * Math.PI * 2,\n        twinkleProbability: Math.random() * 0.0004 + 0.0002\n      }))\n    }, {\n      depth: 0.8,\n      // Close layer (moves fastest)\n      particles: Array(20).fill().map(() => ({\n        x: Math.random() * window.innerWidth,\n        y: Math.random() * window.innerHeight,\n        initialX: Math.random() * window.innerWidth,\n        initialY: Math.random() * window.innerHeight,\n        size: Math.random() * 1.8 + 0.8,\n        baseSize: Math.random() * 1.8 + 0.8,\n        speedX: (Math.random() - 0.5) * 0.15,\n        speedY: (Math.random() - 0.5) * 0.15,\n        opacity: Math.random() * 0.35 + 0.15,\n        baseOpacity: Math.random() * 0.35 + 0.15,\n        twinkleSpeed: Math.random() * 0.02 + 0.006,\n        twinklePhase: Math.random() * Math.PI * 2,\n        twinkleProbability: Math.random() * 0.0005 + 0.0003\n      }))\n    }];\n\n    // Combine all particles for the regular background animation\n    particlesRef.current = parallaxLayersRef.current.flatMap(layer => layer.particles);\n\n    // Initialize constellations with actual screen positions and parallax properties\n    constellationsRef.current = CONSTELLATIONS.map(constellation => {\n      const vertices = constellation.vertices.map(vertex => ({\n        x: vertex.x * window.innerWidth,\n        y: vertex.y * window.innerHeight,\n        initialX: vertex.x * window.innerWidth,\n        initialY: vertex.y * window.innerHeight,\n        size: 1.8,\n        // Slightly larger than regular particles\n        baseSize: 1.8,\n        opacity: 0.25,\n        baseOpacity: 0.25,\n        isTwinkling: false,\n        twinkleProgress: 0,\n        twinkleSpeed: Math.random() * 0.03 + 0.01,\n        lastTwinkle: 0,\n        twinkleInterval: Math.random() * 5000 + 2000,\n        // Random interval between twinkles\n        // Parallax properties unique to constellation stars\n        parallaxDepth: 0.3 + Math.random() * 0.1 // Different depth per star for subtle variation\n      }));\n      return {\n        name: constellation.name,\n        vertices,\n        edges: constellation.edges,\n        // Unique properties for each constellation\n        rotation: 0,\n        rotationSpeed: (Math.random() - 0.5) * 0.00003,\n        // Very slow rotation\n        breathePhase: Math.random() * Math.PI * 2,\n        breatheSpeed: 0.0003 + Math.random() * 0.0002,\n        parallaxDepth: 0.35,\n        // Constellation as whole has its own parallax depth\n        centerX: vertices.reduce((sum, v) => sum + v.x, 0) / vertices.length,\n        centerY: vertices.reduce((sum, v) => sum + v.y, 0) / vertices.length\n      };\n    });\n    return () => {\n      if (requestRef.current) {\n        cancelAnimationFrame(requestRef.current);\n      }\n    };\n  }, []);\n\n  // Canvas animation for background particles and constellations\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n\n    // Calculate parallax offset based on cursor movement\n    const calculateParallaxOffset = depth => {\n      // Only calculate parallax if we have previous cursor position\n      if (!lastCursorPosition.current.x || !cursorPosition.x) return {\n        x: 0,\n        y: 0\n      };\n\n      // Get movement delta\n      const deltaX = cursorPosition.x - lastCursorPosition.current.x;\n      const deltaY = cursorPosition.y - lastCursorPosition.current.y;\n\n      // Apply movement at different rates based on depth (deeper = slower movement)\n      return {\n        x: deltaX * depth,\n        y: deltaY * depth\n      };\n    };\n    const animate = timestamp => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      timeRef.current = timestamp;\n\n      // Update cursor positions and calculate movement\n      if (cursorPosition.x && cursorPosition.y) {\n        // Store current position for next frame's comparison\n        lastCursorPosition.current = {\n          ...cursorPosition\n        };\n      }\n\n      // Process and draw each parallax layer\n      parallaxLayersRef.current.forEach(layer => {\n        const parallaxOffset = calculateParallaxOffset(layer.depth);\n        layer.particles.forEach(particle => {\n          // Update natural movement\n          particle.x += particle.speedX;\n          particle.y += particle.speedY;\n\n          // Apply parallax effect\n          if (parallaxOffset.x || parallaxOffset.y) {\n            particle.x += parallaxOffset.x;\n            particle.y += parallaxOffset.y;\n          }\n\n          // Wrap around screen\n          if (particle.x < 0) particle.x = canvas.width;\n          if (particle.x > canvas.width) particle.x = 0;\n          if (particle.y < 0) particle.y = canvas.height;\n          if (particle.y > canvas.height) particle.y = 0;\n\n          // Handle twinkling effect\n          if (Math.random() < particle.twinkleProbability) {\n            particle.isTwinkling = true;\n          }\n          if (particle.isTwinkling) {\n            // Use sine wave for smooth twinkling effect\n            const twinkleFactor = Math.sin(timeRef.current * particle.twinkleSpeed + particle.twinklePhase);\n            const normalizedTwinkle = (twinkleFactor + 1) / 2; // Convert from [-1,1] to [0,1]\n\n            particle.size = particle.baseSize + particle.baseSize * 0.7 * normalizedTwinkle;\n            particle.opacity = particle.baseOpacity + 0.4 * normalizedTwinkle;\n\n            // Complete one twinkle cycle\n            if (timeRef.current * particle.twinkleSpeed + particle.twinklePhase > particle.twinklePhase + Math.PI * 2) {\n              particle.isTwinkling = false;\n              particle.twinklePhase = Math.random() * Math.PI * 2; // Reset phase for next time\n              particle.size = particle.baseSize;\n              particle.opacity = particle.baseOpacity;\n            }\n          }\n\n          // Draw particle with color slightly based on layer (deeper = bluer, closer = warmer)\n          let r = 191;\n          let g = 173;\n          let b = 127 + (1 - layer.depth) * 30; // Adjust blue component based on depth\n\n          ctx.beginPath();\n          ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\n          ctx.fillStyle = `rgba(${r}, ${g}, ${b}, ${particle.opacity})`;\n          ctx.fill();\n        });\n      });\n\n      // Draw constellations with advanced effects\n      constellationsRef.current.forEach(constellation => {\n        // Update constellation-wide properties\n        constellation.rotation += constellation.rotationSpeed;\n        constellation.breathePhase += constellation.breatheSpeed;\n\n        // Calculate breathe effect - subtly expands and contracts the constellation\n        const breatheFactor = Math.sin(constellation.breathePhase) * 0.02 + 1; // 2% expansion/contraction\n\n        // Apply parallax effect to the entire constellation\n        const constellationParallaxOffset = calculateParallaxOffset(constellation.parallaxDepth);\n        let constellationOffsetX = constellationParallaxOffset.x * 1.2; // Slightly enhanced parallax\n        let constellationOffsetY = constellationParallaxOffset.y * 1.2;\n\n        // Draw edges (lines) with subtle glow effect\n        constellation.edges.forEach(edge => {\n          const startVertex = constellation.vertices[edge[0]];\n          const endVertex = constellation.vertices[edge[1]];\n\n          // Apply breathing effect from constellation center\n          const startOffsetX = (startVertex.initialX - constellation.centerX) * breatheFactor;\n          const startOffsetY = (startVertex.initialY - constellation.centerY) * breatheFactor;\n          const endOffsetX = (endVertex.initialX - constellation.centerX) * breatheFactor;\n          const endOffsetY = (endVertex.initialY - constellation.centerY) * breatheFactor;\n\n          // Apply constellation rotation (very subtle)\n          const startRotatedX = Math.cos(constellation.rotation) * startOffsetX - Math.sin(constellation.rotation) * startOffsetY;\n          const startRotatedY = Math.sin(constellation.rotation) * startOffsetX + Math.cos(constellation.rotation) * startOffsetY;\n          const endRotatedX = Math.cos(constellation.rotation) * endOffsetX - Math.sin(constellation.rotation) * endOffsetY;\n          const endRotatedY = Math.sin(constellation.rotation) * endOffsetX + Math.cos(constellation.rotation) * endOffsetY;\n\n          // Final positions with parallax applied\n          const startX = constellation.centerX + startRotatedX + constellationOffsetX;\n          const startY = constellation.centerY + startRotatedY + constellationOffsetY;\n          const endX = constellation.centerX + endRotatedX + constellationOffsetX;\n          const endY = constellation.centerY + endRotatedY + constellationOffsetY;\n\n          // Soft glow effect for lines that pulses with breathing\n          const glowWidth = 2;\n          const glowIntensity = Math.sin(constellation.breathePhase) * 0.05 + 0.1;\n\n          // Draw edge with glow\n          ctx.beginPath();\n          ctx.strokeStyle = 'rgba(191, 173, 127, 0.05)';\n          ctx.lineWidth = glowWidth;\n          ctx.moveTo(startX, startY);\n          ctx.lineTo(endX, endY);\n          ctx.stroke();\n\n          // Draw main line\n          ctx.beginPath();\n          ctx.strokeStyle = `rgba(191, 173, 127, ${glowIntensity})`;\n          ctx.lineWidth = 0.5;\n          ctx.moveTo(startX, startY);\n          ctx.lineTo(endX, endY);\n          ctx.stroke();\n\n          // Update vertex positions based on the calculated edge positions\n          if (edge[0] === 0) {\n            constellation.vertices[edge[0]].x = startX;\n            constellation.vertices[edge[0]].y = startY;\n          }\n          if (edge[1] === 0) {\n            constellation.vertices[edge[1]].x = endX;\n            constellation.vertices[edge[1]].y = endY;\n          }\n        });\n\n        // Draw and update vertices\n        constellation.vertices.forEach((vertex, index) => {\n          // If vertex hasn't been positioned by edge calculations\n          if (index > 0) {\n            // Apply breathing effect from constellation center\n            const vertexOffsetX = (vertex.initialX - constellation.centerX) * breatheFactor;\n            const vertexOffsetY = (vertex.initialY - constellation.centerY) * breatheFactor;\n\n            // Apply constellation rotation\n            const vertexRotatedX = Math.cos(constellation.rotation) * vertexOffsetX - Math.sin(constellation.rotation) * vertexOffsetY;\n            const vertexRotatedY = Math.sin(constellation.rotation) * vertexOffsetX + Math.cos(constellation.rotation) * vertexOffsetY;\n\n            // Apply constellation-wide parallax and vertex-specific parallax\n            const vertexParallaxOffset = calculateParallaxOffset(vertex.parallaxDepth);\n            vertex.x = constellation.centerX + vertexRotatedX + constellationOffsetX + vertexParallaxOffset.x * 0.3;\n            vertex.y = constellation.centerY + vertexRotatedY + constellationOffsetY + vertexParallaxOffset.y * 0.3;\n          }\n\n          // Occasional twinkling for constellation stars\n          if (timeRef.current - vertex.lastTwinkle > vertex.twinkleInterval) {\n            vertex.isTwinkling = true;\n            vertex.twinkleProgress = 0;\n            vertex.lastTwinkle = timeRef.current;\n          }\n          if (vertex.isTwinkling) {\n            vertex.twinkleProgress += vertex.twinkleSpeed;\n\n            // Create a pulse effect\n            const pulseFactor = Math.sin(vertex.twinkleProgress * Math.PI);\n            vertex.size = vertex.baseSize + vertex.baseSize * pulseFactor;\n            vertex.opacity = vertex.baseOpacity + 0.5 * pulseFactor;\n\n            // End twinkling after one cycle\n            if (vertex.twinkleProgress >= 1) {\n              vertex.isTwinkling = false;\n              vertex.size = vertex.baseSize;\n              vertex.opacity = vertex.baseOpacity;\n            }\n          }\n\n          // Draw subtle glow behind constellation vertex\n          const glowRadius = vertex.size * 2;\n          const gradient = ctx.createRadialGradient(vertex.x, vertex.y, 0, vertex.x, vertex.y, glowRadius);\n          gradient.addColorStop(0, `rgba(207, 185, 130, ${vertex.opacity * 0.5})`);\n          gradient.addColorStop(1, 'rgba(207, 185, 130, 0)');\n          ctx.beginPath();\n          ctx.arc(vertex.x, vertex.y, glowRadius, 0, Math.PI * 2);\n          ctx.fillStyle = gradient;\n          ctx.fill();\n\n          // Draw constellation vertex\n          ctx.beginPath();\n          ctx.arc(vertex.x, vertex.y, vertex.size, 0, Math.PI * 2);\n          ctx.fillStyle = `rgba(207, 185, 130, ${vertex.opacity})`;\n          ctx.fill();\n        });\n      });\n\n      // Draw cursor influence - very subtle glow\n      if (cursorPosition.x && cursorPosition.y) {\n        const gradient = ctx.createRadialGradient(cursorPosition.x, cursorPosition.y, 0, cursorPosition.x, cursorPosition.y, 80);\n        gradient.addColorStop(0, 'rgba(160, 142, 97, 0.03)');\n        gradient.addColorStop(1, 'rgba(160, 142, 97, 0)');\n        ctx.beginPath();\n        ctx.arc(cursorPosition.x, cursorPosition.y, 80, 0, Math.PI * 2);\n        ctx.fillStyle = gradient;\n        ctx.fill();\n      }\n      requestRef.current = requestAnimationFrame(animate);\n    };\n    animate(0);\n\n    // Mouse move handler for parallax effect\n    const handleMouseMove = e => {\n      if (setCursorPosition) {\n        setCursorPosition({\n          x: e.clientX,\n          y: e.clientY\n        });\n      }\n    };\n\n    // Resize handler\n    const handleResize = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n\n      // Reposition constellation vertices on resize\n      constellationsRef.current = constellationsRef.current.map(constellation => {\n        const vertices = constellation.vertices.map((vertex, index) => {\n          const originalVertex = CONSTELLATIONS.find(c => c.name === constellation.name).vertices[index];\n          return {\n            ...vertex,\n            x: originalVertex.x * window.innerWidth,\n            y: originalVertex.y * window.innerHeight\n          };\n        });\n        return {\n          ...constellation,\n          vertices\n        };\n      });\n\n      // Reset parallax layer particles positions\n      parallaxLayersRef.current.forEach(layer => {\n        layer.particles.forEach(particle => {\n          particle.initialX = Math.random() * window.innerWidth;\n          particle.initialY = Math.random() * window.innerHeight;\n          particle.x = particle.initialX;\n          particle.y = particle.initialY;\n        });\n      });\n    };\n    window.addEventListener('resize', handleResize);\n    window.addEventListener('mousemove', handleMouseMove);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      window.removeEventListener('mousemove', handleMouseMove);\n      cancelAnimationFrame(requestRef.current);\n    };\n  }, [cursorPosition]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    className: \"background-canvas\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 439,\n    columnNumber: 10\n  }, this);\n};\n_s(Background, \"YwMvoic70CrdFokclUGgdGUKYaQ=\");\n_c = Background;\nexport default Background;\nvar _c;\n$RefreshReg$(_c, \"Background\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","CONSTELLATIONS","name","vertices","x","y","edges","Background","cursorPosition","setCursorPosition","_s","canvasRef","particlesRef","constellationsRef","requestRef","timeRef","lastCursorPosition","parallaxLayersRef","current","depth","particles","Array","fill","map","Math","random","window","innerWidth","innerHeight","initialX","initialY","size","baseSize","speedX","speedY","opacity","baseOpacity","twinkleSpeed","twinklePhase","PI","twinkleProbability","flatMap","layer","constellation","vertex","isTwinkling","twinkleProgress","lastTwinkle","twinkleInterval","parallaxDepth","rotation","rotationSpeed","breathePhase","breatheSpeed","centerX","reduce","sum","v","length","centerY","cancelAnimationFrame","canvas","ctx","getContext","width","height","calculateParallaxOffset","deltaX","deltaY","animate","timestamp","clearRect","forEach","parallaxOffset","particle","twinkleFactor","sin","normalizedTwinkle","r","g","b","beginPath","arc","fillStyle","breatheFactor","constellationParallaxOffset","constellationOffsetX","constellationOffsetY","edge","startVertex","endVertex","startOffsetX","startOffsetY","endOffsetX","endOffsetY","startRotatedX","cos","startRotatedY","endRotatedX","endRotatedY","startX","startY","endX","endY","glowWidth","glowIntensity","strokeStyle","lineWidth","moveTo","lineTo","stroke","index","vertexOffsetX","vertexOffsetY","vertexRotatedX","vertexRotatedY","vertexParallaxOffset","pulseFactor","glowRadius","gradient","createRadialGradient","addColorStop","requestAnimationFrame","handleMouseMove","e","clientX","clientY","handleResize","originalVertex","find","c","addEventListener","removeEventListener","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/valeria/Documents/Crucible/frontend/src/components/core/Background.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport './background.css';\n\n// Zodiac constellation definitions - simplified vertex patterns\nconst CONSTELLATIONS = [\n  {\n    name: 'Venus',\n    vertices: [\n      { x: 0.3, y: 0.3 }, { x: 0.3, y: 0.22 },  // Top vertical line\n      { x: 0.27, y: 0.25 }, { x: 0.33, y: 0.25 }, // Cross horizontal\n      { x: 0.3, y: 0.35 }, // Bottom of circle\n      { x: 0.25, y: 0.32 }, { x: 0.35, y: 0.32 }, // Middle circle points\n      { x: 0.25, y: 0.28 }, { x: 0.35, y: 0.28 } // Upper circle points\n    ],\n    edges: [[0, 1], [0, 4], [4, 5], [5, 7], [7, 8], [8, 6], [6, 4], [2, 3]]\n  },\n  {\n    name: 'Cassiopeia',\n    vertices: [\n      { x: 0.7, y: 0.15 }, { x: 0.75, y: 0.2 }, { x: 0.8, y: 0.15 },\n      { x: 0.85, y: 0.2 }, { x: 0.9, y: 0.15 }\n    ],\n    edges: [[0, 1], [1, 2], [2, 3], [3, 4]]\n  },\n  {\n    name: 'Lyra',\n    vertices: [\n      { x: 0.6, y: 0.65 }, { x: 0.65, y: 0.6 }, { x: 0.65, y: 0.7 },\n      { x: 0.7, y: 0.65 }, { x: 0.64, y: 0.65 }\n    ],\n    edges: [[0, 1], [0, 2], [1, 3], [2, 3], [4, 0], [4, 1], [4, 2], [4, 3]]\n  }\n];\n\nconst Background = ({ cursorPosition, setCursorPosition }) => {\n  const canvasRef = useRef(null);\n  const particlesRef = useRef([]);\n  const constellationsRef = useRef([]);\n  const requestRef = useRef(null);\n  const timeRef = useRef(0);\n  const lastCursorPosition = useRef({ x: 0, y: 0 });\n  const parallaxLayersRef = useRef([]);\n  \n  // Initialize particles, constellations, and parallax layers\n  useEffect(() => {\n    // Create three distinct parallax layers\n    parallaxLayersRef.current = [\n      {\n        depth: 0.2, // Distant layer (moves slowest)\n        particles: Array(30).fill().map(() => ({\n          x: Math.random() * window.innerWidth,\n          y: Math.random() * window.innerHeight,\n          initialX: Math.random() * window.innerWidth,\n          initialY: Math.random() * window.innerHeight,\n          size: Math.random() * 1 + 0.3,\n          baseSize: Math.random() * 1 + 0.3,\n          speedX: (Math.random() - 0.5) * 0.05,\n          speedY: (Math.random() - 0.5) * 0.05,\n          opacity: Math.random() * 0.2 + 0.05,\n          baseOpacity: Math.random() * 0.2 + 0.05,\n          twinkleSpeed: Math.random() * 0.01 + 0.002,\n          twinklePhase: Math.random() * Math.PI * 2,\n          twinkleProbability: Math.random() * 0.0003 + 0.0001\n        }))\n      },\n      {\n        depth: 0.5, // Middle layer\n        particles: Array(40).fill().map(() => ({\n          x: Math.random() * window.innerWidth,\n          y: Math.random() * window.innerHeight,\n          initialX: Math.random() * window.innerWidth,\n          initialY: Math.random() * window.innerHeight,\n          size: Math.random() * 1.5 + 0.5,\n          baseSize: Math.random() * 1.5 + 0.5,\n          speedX: (Math.random() - 0.5) * 0.1,\n          speedY: (Math.random() - 0.5) * 0.1,\n          opacity: Math.random() * 0.25 + 0.1,\n          baseOpacity: Math.random() * 0.25 + 0.1,\n          twinkleSpeed: Math.random() * 0.015 + 0.004,\n          twinklePhase: Math.random() * Math.PI * 2,\n          twinkleProbability: Math.random() * 0.0004 + 0.0002\n        }))\n      },\n      {\n        depth: 0.8, // Close layer (moves fastest)\n        particles: Array(20).fill().map(() => ({\n          x: Math.random() * window.innerWidth,\n          y: Math.random() * window.innerHeight,\n          initialX: Math.random() * window.innerWidth,\n          initialY: Math.random() * window.innerHeight,\n          size: Math.random() * 1.8 + 0.8,\n          baseSize: Math.random() * 1.8 + 0.8,\n          speedX: (Math.random() - 0.5) * 0.15,\n          speedY: (Math.random() - 0.5) * 0.15,\n          opacity: Math.random() * 0.35 + 0.15,\n          baseOpacity: Math.random() * 0.35 + 0.15,\n          twinkleSpeed: Math.random() * 0.02 + 0.006,\n          twinklePhase: Math.random() * Math.PI * 2,\n          twinkleProbability: Math.random() * 0.0005 + 0.0003\n        }))\n      }\n    ];\n    \n    // Combine all particles for the regular background animation\n    particlesRef.current = parallaxLayersRef.current.flatMap(layer => layer.particles);\n    \n    // Initialize constellations with actual screen positions and parallax properties\n    constellationsRef.current = CONSTELLATIONS.map(constellation => {\n      const vertices = constellation.vertices.map(vertex => ({\n        x: vertex.x * window.innerWidth,\n        y: vertex.y * window.innerHeight,\n        initialX: vertex.x * window.innerWidth,\n        initialY: vertex.y * window.innerHeight,\n        size: 1.8, // Slightly larger than regular particles\n        baseSize: 1.8,\n        opacity: 0.25,\n        baseOpacity: 0.25,\n        isTwinkling: false,\n        twinkleProgress: 0,\n        twinkleSpeed: Math.random() * 0.03 + 0.01,\n        lastTwinkle: 0,\n        twinkleInterval: Math.random() * 5000 + 2000, // Random interval between twinkles\n        // Parallax properties unique to constellation stars\n        parallaxDepth: 0.3 + Math.random() * 0.1 // Different depth per star for subtle variation\n      }));\n      \n      return {\n        name: constellation.name,\n        vertices,\n        edges: constellation.edges,\n        // Unique properties for each constellation\n        rotation: 0,\n        rotationSpeed: (Math.random() - 0.5) * 0.00003, // Very slow rotation\n        breathePhase: Math.random() * Math.PI * 2,\n        breatheSpeed: 0.0003 + Math.random() * 0.0002,\n        parallaxDepth: 0.35, // Constellation as whole has its own parallax depth\n        centerX: vertices.reduce((sum, v) => sum + v.x, 0) / vertices.length,\n        centerY: vertices.reduce((sum, v) => sum + v.y, 0) / vertices.length\n      };\n    });\n    \n    return () => {\n      if (requestRef.current) {\n        cancelAnimationFrame(requestRef.current);\n      }\n    };\n  }, []);\n  \n  // Canvas animation for background particles and constellations\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    \n    const ctx = canvas.getContext('2d');\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    \n    // Calculate parallax offset based on cursor movement\n    const calculateParallaxOffset = (depth) => {\n      // Only calculate parallax if we have previous cursor position\n      if (!lastCursorPosition.current.x || !cursorPosition.x) return { x: 0, y: 0 };\n      \n      // Get movement delta\n      const deltaX = cursorPosition.x - lastCursorPosition.current.x;\n      const deltaY = cursorPosition.y - lastCursorPosition.current.y;\n      \n      // Apply movement at different rates based on depth (deeper = slower movement)\n      return {\n        x: deltaX * depth,\n        y: deltaY * depth\n      };\n    };\n    \n    const animate = (timestamp) => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      timeRef.current = timestamp;\n      \n      // Update cursor positions and calculate movement\n      if (cursorPosition.x && cursorPosition.y) {\n        // Store current position for next frame's comparison\n        lastCursorPosition.current = { ...cursorPosition };\n      }\n      \n      // Process and draw each parallax layer\n      parallaxLayersRef.current.forEach(layer => {\n        const parallaxOffset = calculateParallaxOffset(layer.depth);\n        \n        layer.particles.forEach(particle => {\n          // Update natural movement\n          particle.x += particle.speedX;\n          particle.y += particle.speedY;\n          \n          // Apply parallax effect\n          if (parallaxOffset.x || parallaxOffset.y) {\n            particle.x += parallaxOffset.x;\n            particle.y += parallaxOffset.y;\n          }\n          \n          // Wrap around screen\n          if (particle.x < 0) particle.x = canvas.width;\n          if (particle.x > canvas.width) particle.x = 0;\n          if (particle.y < 0) particle.y = canvas.height;\n          if (particle.y > canvas.height) particle.y = 0;\n          \n          // Handle twinkling effect\n          if (Math.random() < particle.twinkleProbability) {\n            particle.isTwinkling = true;\n          }\n          \n          if (particle.isTwinkling) {\n            // Use sine wave for smooth twinkling effect\n            const twinkleFactor = Math.sin(timeRef.current * particle.twinkleSpeed + particle.twinklePhase);\n            const normalizedTwinkle = (twinkleFactor + 1) / 2; // Convert from [-1,1] to [0,1]\n            \n            particle.size = particle.baseSize + (particle.baseSize * 0.7 * normalizedTwinkle);\n            particle.opacity = particle.baseOpacity + (0.4 * normalizedTwinkle);\n            \n            // Complete one twinkle cycle\n            if (timeRef.current * particle.twinkleSpeed + particle.twinklePhase > particle.twinklePhase + Math.PI * 2) {\n              particle.isTwinkling = false;\n              particle.twinklePhase = Math.random() * Math.PI * 2; // Reset phase for next time\n              particle.size = particle.baseSize;\n              particle.opacity = particle.baseOpacity;\n            }\n          }\n          \n          // Draw particle with color slightly based on layer (deeper = bluer, closer = warmer)\n          let r = 191;\n          let g = 173;\n          let b = 127 + (1 - layer.depth) * 30; // Adjust blue component based on depth\n          \n          ctx.beginPath();\n          ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\n          ctx.fillStyle = `rgba(${r}, ${g}, ${b}, ${particle.opacity})`;\n          ctx.fill();\n        });\n      });\n      \n      // Draw constellations with advanced effects\n      constellationsRef.current.forEach(constellation => {\n        // Update constellation-wide properties\n        constellation.rotation += constellation.rotationSpeed;\n        constellation.breathePhase += constellation.breatheSpeed;\n        \n        // Calculate breathe effect - subtly expands and contracts the constellation\n        const breatheFactor = Math.sin(constellation.breathePhase) * 0.02 + 1; // 2% expansion/contraction\n        \n        // Apply parallax effect to the entire constellation\n        const constellationParallaxOffset = calculateParallaxOffset(constellation.parallaxDepth);\n        let constellationOffsetX = constellationParallaxOffset.x * 1.2; // Slightly enhanced parallax\n        let constellationOffsetY = constellationParallaxOffset.y * 1.2;\n        \n        // Draw edges (lines) with subtle glow effect\n        constellation.edges.forEach(edge => {\n          const startVertex = constellation.vertices[edge[0]];\n          const endVertex = constellation.vertices[edge[1]];\n          \n          // Apply breathing effect from constellation center\n          const startOffsetX = (startVertex.initialX - constellation.centerX) * breatheFactor;\n          const startOffsetY = (startVertex.initialY - constellation.centerY) * breatheFactor;\n          const endOffsetX = (endVertex.initialX - constellation.centerX) * breatheFactor;\n          const endOffsetY = (endVertex.initialY - constellation.centerY) * breatheFactor;\n          \n          // Apply constellation rotation (very subtle)\n          const startRotatedX = Math.cos(constellation.rotation) * startOffsetX - Math.sin(constellation.rotation) * startOffsetY;\n          const startRotatedY = Math.sin(constellation.rotation) * startOffsetX + Math.cos(constellation.rotation) * startOffsetY;\n          const endRotatedX = Math.cos(constellation.rotation) * endOffsetX - Math.sin(constellation.rotation) * endOffsetY;\n          const endRotatedY = Math.sin(constellation.rotation) * endOffsetX + Math.cos(constellation.rotation) * endOffsetY;\n          \n          // Final positions with parallax applied\n          const startX = constellation.centerX + startRotatedX + constellationOffsetX;\n          const startY = constellation.centerY + startRotatedY + constellationOffsetY;\n          const endX = constellation.centerX + endRotatedX + constellationOffsetX;\n          const endY = constellation.centerY + endRotatedY + constellationOffsetY;\n          \n          // Soft glow effect for lines that pulses with breathing\n          const glowWidth = 2;\n          const glowIntensity = (Math.sin(constellation.breathePhase) * 0.05 + 0.1);\n          \n          // Draw edge with glow\n          ctx.beginPath();\n          ctx.strokeStyle = 'rgba(191, 173, 127, 0.05)';\n          ctx.lineWidth = glowWidth;\n          ctx.moveTo(startX, startY);\n          ctx.lineTo(endX, endY);\n          ctx.stroke();\n          \n          // Draw main line\n          ctx.beginPath();\n          ctx.strokeStyle = `rgba(191, 173, 127, ${glowIntensity})`;\n          ctx.lineWidth = 0.5;\n          ctx.moveTo(startX, startY);\n          ctx.lineTo(endX, endY);\n          ctx.stroke();\n          \n          // Update vertex positions based on the calculated edge positions\n          if (edge[0] === 0) {\n            constellation.vertices[edge[0]].x = startX;\n            constellation.vertices[edge[0]].y = startY;\n          }\n          if (edge[1] === 0) {\n            constellation.vertices[edge[1]].x = endX;\n            constellation.vertices[edge[1]].y = endY;\n          }\n        });\n        \n        // Draw and update vertices\n        constellation.vertices.forEach((vertex, index) => {\n          // If vertex hasn't been positioned by edge calculations\n          if (index > 0) {\n            // Apply breathing effect from constellation center\n            const vertexOffsetX = (vertex.initialX - constellation.centerX) * breatheFactor;\n            const vertexOffsetY = (vertex.initialY - constellation.centerY) * breatheFactor;\n            \n            // Apply constellation rotation\n            const vertexRotatedX = Math.cos(constellation.rotation) * vertexOffsetX - Math.sin(constellation.rotation) * vertexOffsetY;\n            const vertexRotatedY = Math.sin(constellation.rotation) * vertexOffsetX + Math.cos(constellation.rotation) * vertexOffsetY;\n            \n            // Apply constellation-wide parallax and vertex-specific parallax\n            const vertexParallaxOffset = calculateParallaxOffset(vertex.parallaxDepth);\n            vertex.x = constellation.centerX + vertexRotatedX + constellationOffsetX + vertexParallaxOffset.x * 0.3;\n            vertex.y = constellation.centerY + vertexRotatedY + constellationOffsetY + vertexParallaxOffset.y * 0.3;\n          }\n          \n          // Occasional twinkling for constellation stars\n          if (timeRef.current - vertex.lastTwinkle > vertex.twinkleInterval) {\n            vertex.isTwinkling = true;\n            vertex.twinkleProgress = 0;\n            vertex.lastTwinkle = timeRef.current;\n          }\n          \n          if (vertex.isTwinkling) {\n            vertex.twinkleProgress += vertex.twinkleSpeed;\n            \n            // Create a pulse effect\n            const pulseFactor = Math.sin(vertex.twinkleProgress * Math.PI);\n            vertex.size = vertex.baseSize + (vertex.baseSize * pulseFactor);\n            vertex.opacity = vertex.baseOpacity + (0.5 * pulseFactor);\n            \n            // End twinkling after one cycle\n            if (vertex.twinkleProgress >= 1) {\n              vertex.isTwinkling = false;\n              vertex.size = vertex.baseSize;\n              vertex.opacity = vertex.baseOpacity;\n            }\n          }\n          \n          // Draw subtle glow behind constellation vertex\n          const glowRadius = vertex.size * 2;\n          const gradient = ctx.createRadialGradient(\n            vertex.x, vertex.y, 0,\n            vertex.x, vertex.y, glowRadius\n          );\n          gradient.addColorStop(0, `rgba(207, 185, 130, ${vertex.opacity * 0.5})`);\n          gradient.addColorStop(1, 'rgba(207, 185, 130, 0)');\n          \n          ctx.beginPath();\n          ctx.arc(vertex.x, vertex.y, glowRadius, 0, Math.PI * 2);\n          ctx.fillStyle = gradient;\n          ctx.fill();\n          \n          // Draw constellation vertex\n          ctx.beginPath();\n          ctx.arc(vertex.x, vertex.y, vertex.size, 0, Math.PI * 2);\n          ctx.fillStyle = `rgba(207, 185, 130, ${vertex.opacity})`;\n          ctx.fill();\n        });\n      });\n      \n      // Draw cursor influence - very subtle glow\n      if (cursorPosition.x && cursorPosition.y) {\n        const gradient = ctx.createRadialGradient(\n          cursorPosition.x, cursorPosition.y, 0,\n          cursorPosition.x, cursorPosition.y, 80\n        );\n        gradient.addColorStop(0, 'rgba(160, 142, 97, 0.03)');\n        gradient.addColorStop(1, 'rgba(160, 142, 97, 0)');\n        ctx.beginPath();\n        ctx.arc(cursorPosition.x, cursorPosition.y, 80, 0, Math.PI * 2);\n        ctx.fillStyle = gradient;\n        ctx.fill();\n      }\n      \n      requestRef.current = requestAnimationFrame(animate);\n    };\n    \n    animate(0);\n    \n    // Mouse move handler for parallax effect\n    const handleMouseMove = (e) => {\n      if (setCursorPosition) {\n        setCursorPosition({ x: e.clientX, y: e.clientY });\n      }\n    };\n    \n    // Resize handler\n    const handleResize = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n      \n      // Reposition constellation vertices on resize\n      constellationsRef.current = constellationsRef.current.map(constellation => {\n        const vertices = constellation.vertices.map((vertex, index) => {\n          const originalVertex = CONSTELLATIONS.find(c => c.name === constellation.name).vertices[index];\n          return {\n            ...vertex,\n            x: originalVertex.x * window.innerWidth,\n            y: originalVertex.y * window.innerHeight\n          };\n        });\n        \n        return {\n          ...constellation,\n          vertices\n        };\n      });\n      \n      // Reset parallax layer particles positions\n      parallaxLayersRef.current.forEach(layer => {\n        layer.particles.forEach(particle => {\n          particle.initialX = Math.random() * window.innerWidth;\n          particle.initialY = Math.random() * window.innerHeight;\n          particle.x = particle.initialX;\n          particle.y = particle.initialY;\n        });\n      });\n    };\n    \n    window.addEventListener('resize', handleResize);\n    window.addEventListener('mousemove', handleMouseMove);\n    \n    return () => {\n      window.removeEventListener('resize', handleResize);\n      window.removeEventListener('mousemove', handleMouseMove);\n      cancelAnimationFrame(requestRef.current);\n    };\n  }, [cursorPosition]);\n  \n  return <canvas ref={canvasRef} className=\"background-canvas\" />;\n};\n\nexport default Background;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}