{"ast":null,"code":"var _jsxFileName = \"/home/valeria/Documents/Crucible/frontend/src/components/core/effects/ScrollingTextAnimation.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport gsap from 'gsap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = createUseStyles({\n  animatedContainer: {\n    position: 'relative',\n    width: '100%',\n    textAlign: props => props.textAlign || 'center',\n    margin: props => props.margin || '0 0 3rem 0',\n    zIndex: 2\n  },\n  content: {\n    width: '100%',\n    overflow: 'hidden'\n  },\n  divider: props => ({\n    width: props.dividerWidth || '150px',\n    height: props.dividerHeight || '1px',\n    background: props.dividerBackground || 'linear-gradient(to right, rgba(160, 142, 97, 0), rgba(160, 142, 97, 0.6), rgba(160, 142, 97, 0))',\n    margin: props.dividerMargin || '1rem auto',\n    display: props.showDivider ? 'block' : 'none'\n  })\n});\nconst ScrollingTextAnimation = ({\n  children,\n  scrollConfig = {},\n  textAlign = 'center',\n  margin = '0 0 3rem 0',\n  showDivider = true,\n  dividerWidth = '150px',\n  dividerHeight = '1px',\n  dividerBackground,\n  dividerMargin = '1rem auto',\n  style = {},\n  className = ''\n}) => {\n  _s();\n  const {\n    initialY = 100,\n    ease = \"power2.out\",\n    reverseDirection = false\n  } = scrollConfig;\n  const containerRef = useRef(null);\n  const contentRef = useRef(null);\n  const dividerRef = useRef(null);\n  const styleProps = {\n    textAlign,\n    margin,\n    showDivider,\n    dividerWidth,\n    dividerHeight,\n    dividerBackground,\n    dividerMargin\n  };\n  const classes = useStyles(styleProps);\n  useEffect(() => {\n    // Get DOM references\n    const container = containerRef.current;\n    const contentElement = contentRef.current;\n    if (!container || !contentElement) return;\n\n    // Set initial state\n    gsap.set(contentElement, {\n      y: reverseDirection ? -initialY : initialY,\n      opacity: 0\n    });\n\n    // Use IntersectionObserver instead of ScrollTrigger\n    const observer = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          // Animate content when it comes into view\n          gsap.to(contentElement, {\n            y: 0,\n            opacity: 1,\n            duration: 1,\n            ease: ease\n          });\n\n          // Animate divider if present\n          if (showDivider && dividerRef.current) {\n            gsap.set(dividerRef.current, {\n              scaleX: 0,\n              opacity: 0,\n              transformOrigin: \"center center\"\n            });\n            gsap.to(dividerRef.current, {\n              scaleX: 1,\n              opacity: 1,\n              duration: 0.5,\n              ease: \"power1.out\",\n              delay: 0.2\n            });\n          }\n\n          // Only need to animate once\n          observer.disconnect();\n        }\n      });\n    }, {\n      threshold: 0.1,\n      rootMargin: '0px 0px -100px 0px'\n    });\n    observer.observe(container);\n\n    // Cleanup function\n    return () => {\n      observer.disconnect();\n    };\n  }, [initialY, ease, reverseDirection, showDivider]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    className: `${classes.animatedContainer} ${className}`,\n    style: style,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: contentRef,\n      className: classes.content,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), showDivider && /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: dividerRef,\n      className: classes.divider\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n_s(ScrollingTextAnimation, \"aJXLPLb0Z2437xO2DXggM6oq3ZI=\", false, function () {\n  return [useStyles];\n});\n_c = ScrollingTextAnimation;\nexport default ScrollingTextAnimation;\nvar _c;\n$RefreshReg$(_c, \"ScrollingTextAnimation\");","map":{"version":3,"names":["React","useRef","useEffect","createUseStyles","gsap","jsxDEV","_jsxDEV","useStyles","animatedContainer","position","width","textAlign","props","margin","zIndex","content","overflow","divider","dividerWidth","height","dividerHeight","background","dividerBackground","dividerMargin","display","showDivider","ScrollingTextAnimation","children","scrollConfig","style","className","_s","initialY","ease","reverseDirection","containerRef","contentRef","dividerRef","styleProps","classes","container","current","contentElement","set","y","opacity","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","to","duration","scaleX","transformOrigin","delay","disconnect","threshold","rootMargin","observe","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/valeria/Documents/Crucible/frontend/src/components/core/effects/ScrollingTextAnimation.jsx"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport gsap from 'gsap';\n\nconst useStyles = createUseStyles({\n  animatedContainer: {\n    position: 'relative',\n    width: '100%',\n    textAlign: props => props.textAlign || 'center',\n    margin: props => props.margin || '0 0 3rem 0',\n    zIndex: 2,\n  },\n  content: {\n    width: '100%',\n    overflow: 'hidden',\n  },\n  divider: props => ({\n    width: props.dividerWidth || '150px',\n    height: props.dividerHeight || '1px',\n    background: props.dividerBackground || 'linear-gradient(to right, rgba(160, 142, 97, 0), rgba(160, 142, 97, 0.6), rgba(160, 142, 97, 0))',\n    margin: props.dividerMargin || '1rem auto',\n    display: props.showDivider ? 'block' : 'none'\n  })\n});\n\nconst ScrollingTextAnimation = ({\n  children,\n  scrollConfig = {},\n  textAlign = 'center',\n  margin = '0 0 3rem 0',\n  showDivider = true,\n  dividerWidth = '150px',\n  dividerHeight = '1px',\n  dividerBackground,\n  dividerMargin = '1rem auto',\n  style = {},\n  className = ''\n}) => {\n  const {\n    initialY = 100,\n    ease = \"power2.out\",\n    reverseDirection = false,\n  } = scrollConfig;\n\n  const containerRef = useRef(null);\n  const contentRef = useRef(null);\n  const dividerRef = useRef(null);\n\n  const styleProps = {\n    textAlign,\n    margin,\n    showDivider,\n    dividerWidth,\n    dividerHeight,\n    dividerBackground,\n    dividerMargin\n  };\n  \n  const classes = useStyles(styleProps);\n\n  useEffect(() => {\n    // Get DOM references\n    const container = containerRef.current;\n    const contentElement = contentRef.current;\n    if (!container || !contentElement) return;\n\n    // Set initial state\n    gsap.set(contentElement, { \n      y: reverseDirection ? -initialY : initialY,\n      opacity: 0,\n    });\n\n    // Use IntersectionObserver instead of ScrollTrigger\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          // Animate content when it comes into view\n          gsap.to(contentElement, {\n            y: 0,\n            opacity: 1,\n            duration: 1,\n            ease: ease,\n          });\n\n          // Animate divider if present\n          if (showDivider && dividerRef.current) {\n            gsap.set(dividerRef.current, {\n              scaleX: 0,\n              opacity: 0,\n              transformOrigin: \"center center\"\n            });\n            \n            gsap.to(dividerRef.current, {\n              scaleX: 1,\n              opacity: 1,\n              duration: 0.5,\n              ease: \"power1.out\",\n              delay: 0.2\n            });\n          }\n          \n          // Only need to animate once\n          observer.disconnect();\n        }\n      });\n    }, {\n      threshold: 0.1,\n      rootMargin: '0px 0px -100px 0px' \n    });\n\n    observer.observe(container);\n\n    // Cleanup function\n    return () => {\n      observer.disconnect();\n    };\n  }, [initialY, ease, reverseDirection, showDivider]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={`${classes.animatedContainer} ${className}`}\n      style={style}\n    >\n      <div ref={contentRef} className={classes.content}>\n        {children}\n      </div>\n      {showDivider && <div ref={dividerRef} className={classes.divider} />}\n    </div>\n  );\n};\n\nexport default ScrollingTextAnimation;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}