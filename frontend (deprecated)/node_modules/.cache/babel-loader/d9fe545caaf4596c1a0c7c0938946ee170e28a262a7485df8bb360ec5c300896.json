{"ast":null,"code":"var _jsxFileName = \"/home/valeria/Documents/Crucible/frontend/src/components/core/effects/ScrollingTextAnimation.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport { motion, useScroll, useTransform, useSpring, useReducedMotion, useInView } from 'framer-motion';\nimport { createUseStyles } from 'react-jss';\n\n// Optimized styles for scrolling text animation\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = createUseStyles({\n  container: {\n    position: 'relative',\n    width: '100%',\n    textAlign: props => props.textAlign || 'center',\n    margin: props => props.margin || '0 0 3rem 0',\n    zIndex: 2,\n    willChange: 'transform, opacity',\n    transform: 'translate3d(0,0,0)',\n    // Force GPU acceleration\n    backfaceVisibility: 'hidden',\n    pointerEvents: 'none',\n    // Prevent blocking interactions with elements beneath\n    '& > *': {\n      pointerEvents: 'auto' // Restore pointer events for children\n    }\n  },\n  content: {\n    width: '100%'\n  },\n  divider: props => ({\n    width: props.dividerWidth || '150px',\n    height: props.dividerHeight || '1px',\n    background: props.dividerBackground || 'linear-gradient(to right, rgba(160, 142, 97, 0), rgba(160, 142, 97, 0.6), rgba(160, 142, 97, 0))',\n    margin: props.dividerMargin || '1rem auto',\n    display: props.showDivider ? 'block' : 'none',\n    opacity: props.isInView ? 1 : 0,\n    transform: props.isInView ? 'scaleX(1)' : 'scaleX(0.3)',\n    transition: 'opacity 0.8s cubic-bezier(0.16, 1, 0.3, 1), transform 1s cubic-bezier(0.16, 1, 0.3, 1)',\n    transformOrigin: 'center'\n  })\n});\n\n/**\n * Enhanced ScrollingTextAnimation Component\n * \n * A high-performance, smooth scrolling animation component with improved\n * entrance behavior and optimized rendering.\n * \n * @param {Object} props\n * @param {React.ReactNode} props.children - Child content to animate\n * @param {Object} [props.scrollConfig] - Configuration for scroll animations\n * @param {string} [props.textAlign='center'] - Text alignment\n * @param {string} [props.margin='0 0 3rem 0'] - Component margin\n * @param {boolean} [props.showDivider=true] - Whether to show divider\n * @param {string} [props.dividerWidth='150px'] - Width of divider\n * @param {string} [props.dividerHeight='1px'] - Height of divider\n * @param {string} [props.dividerBackground] - Background style for divider\n * @param {string} [props.dividerMargin='1rem auto'] - Margin for divider\n * @param {Object} [props.style] - Additional styles\n * @param {string} [props.className] - Additional class names\n */\nconst ScrollingTextAnimation = ({\n  children,\n  scrollConfig = {},\n  textAlign = 'center',\n  margin = '0 0 3rem 0',\n  showDivider = true,\n  dividerWidth = '150px',\n  dividerHeight = '1px',\n  dividerBackground,\n  dividerMargin = '1rem auto',\n  style = {},\n  className = ''\n}) => {\n  _s();\n  // Default scroll config with improved animations\n  const {\n    // Scroll range for animation (viewport percentage)\n    startScrollPercentage = 10,\n    endScrollPercentage = 30,\n    // Animation values\n    initialY = 50,\n    finalY = 0,\n    initialOpacity = 0,\n    finalOpacity = 1,\n    // Controls\n    clampValues = true,\n    reverseDirection = false,\n    disableOnMobile = false,\n    useScrollPosition = true,\n    // Spring physics - gentler values for smoother motion\n    springConfig = {\n      stiffness: 45,\n      damping: 20,\n      mass: 0.8,\n      restDelta: 0.001,\n      restSpeed: 0.001\n    }\n  } = scrollConfig;\n\n  // Refs\n  const containerRef = useRef(null);\n  const inViewRef = useRef(null);\n  const combinedRef = useCallback(node => {\n    // Handle multiple refs\n    containerRef.current = node;\n    inViewRef.current = node;\n  }, []);\n\n  // Check if component is in view for initial animation\n  const isInView = useInView(inViewRef, {\n    once: true,\n    amount: 0.2,\n    margin: \"0px 0px -20% 0px\"\n  });\n\n  // Check for reduced motion preference\n  const prefersReducedMotion = useReducedMotion();\n\n  // Check if device is mobile\n  const [isMobile, setIsMobile] = useState(false);\n\n  // Scroll tracking\n  const {\n    scrollY,\n    scrollYProgress\n  } = useScroll({\n    offset: [\"start end\", \"end start\"],\n    smooth: 0.1 // Slightly smoothed scroll\n  });\n\n  // Calculate start and end positions for scroll-based animation\n  const [animationRange, setAnimationRange] = useState([0, 1]);\n  useEffect(() => {\n    if (!containerRef.current || !useScrollPosition) return;\n\n    // Calculate scroll range based on viewport position\n    const calculateScrollRange = () => {\n      const windowHeight = window.innerHeight;\n      const startViewportOffset = windowHeight * (startScrollPercentage / 100);\n      const endViewportOffset = windowHeight * (endScrollPercentage / 100);\n      const rect = containerRef.current.getBoundingClientRect();\n      const elementTop = rect.top + window.scrollY;\n\n      // Calculate scroll values where animation should start and end\n      const scrollStart = Math.max(0, elementTop - windowHeight + startViewportOffset);\n      const scrollEnd = Math.max(0, elementTop - endViewportOffset);\n      setAnimationRange([scrollStart, scrollEnd]);\n    };\n\n    // Calculate initially and on resize\n    calculateScrollRange();\n    const handleResize = () => {\n      // Check if mobile on resize\n      setIsMobile(window.innerWidth <= 768);\n      calculateScrollRange();\n    };\n\n    // Initial mobile check\n    setIsMobile(window.innerWidth <= 768);\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, [startScrollPercentage, endScrollPercentage, useScrollPosition]);\n\n  // Create transformed values from scroll position\n  const rawY = useTransform(useScrollPosition ? scrollY : scrollYProgress, useScrollPosition ? animationRange : [0, 1], reverseDirection ? [finalY, initialY] : [initialY, finalY], {\n    clamp: clampValues\n  });\n  const rawOpacity = useTransform(useScrollPosition ? scrollY : scrollYProgress, useScrollPosition ? animationRange : [0, 0.5], reverseDirection ? [finalOpacity, initialOpacity] : [initialOpacity, finalOpacity], {\n    clamp: clampValues\n  });\n\n  // Apply spring physics for smoother animations\n  const y = useSpring(rawY, springConfig);\n  const opacity = useSpring(rawOpacity, springConfig);\n\n  // Determine if we should use simplified animations\n  const useSimplifiedAnimation = useMemo(() => {\n    return prefersReducedMotion || disableOnMobile && isMobile;\n  }, [prefersReducedMotion, disableOnMobile, isMobile]);\n\n  // Style props for the component\n  const styleProps = useMemo(() => ({\n    textAlign,\n    margin,\n    showDivider,\n    dividerWidth,\n    dividerHeight,\n    dividerBackground,\n    dividerMargin,\n    isInView\n  }), [textAlign, margin, showDivider, dividerWidth, dividerHeight, dividerBackground, dividerMargin, isInView]);\n  const classes = useStyles(styleProps);\n\n  // Animation values based on conditions\n  const animationStyle = useMemo(() => {\n    // If not in view or prefers reduced motion, use simplified fade-in\n    if (!isInView || useSimplifiedAnimation) {\n      return {\n        opacity: isInView ? 1 : initialOpacity,\n        y: isInView ? 0 : initialY,\n        transition: {\n          opacity: {\n            duration: 0.8,\n            ease: [0.16, 1, 0.3, 1] // Smoother ease out\n          },\n          y: {\n            duration: 0.8,\n            ease: [0.16, 1, 0.3, 1]\n          }\n        }\n      };\n    }\n\n    // Otherwise use scroll-based animation\n    return {\n      y: y,\n      opacity: opacity\n    };\n  }, [isInView, useSimplifiedAnimation, initialOpacity, initialY, y, opacity]);\n\n  // Optimized transform template for better composability\n  const transformTemplate = useCallback((_, transform) => {\n    return `${transform} translateZ(0)`;\n  }, []);\n  return /*#__PURE__*/_jsxDEV(motion.div, {\n    ref: combinedRef,\n    className: `${classes.container} ${className}`,\n    style: {\n      ...style,\n      ...animationStyle\n    },\n    transformTemplate: transformTemplate,\n    initial: false,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.content,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this), showDivider && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.divider\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 243,\n    columnNumber: 5\n  }, this);\n};\n_s(ScrollingTextAnimation, \"IHWLCVhk1dMmDpoPHteW8WC+zKw=\", false, function () {\n  return [useInView, useReducedMotion, useScroll, useTransform, useTransform, useSpring, useSpring, useStyles];\n});\n_c = ScrollingTextAnimation;\nexport default ScrollingTextAnimation;\nvar _c;\n$RefreshReg$(_c, \"ScrollingTextAnimation\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","useMemo","motion","useScroll","useTransform","useSpring","useReducedMotion","useInView","createUseStyles","jsxDEV","_jsxDEV","useStyles","container","position","width","textAlign","props","margin","zIndex","willChange","transform","backfaceVisibility","pointerEvents","content","divider","dividerWidth","height","dividerHeight","background","dividerBackground","dividerMargin","display","showDivider","opacity","isInView","transition","transformOrigin","ScrollingTextAnimation","children","scrollConfig","style","className","_s","startScrollPercentage","endScrollPercentage","initialY","finalY","initialOpacity","finalOpacity","clampValues","reverseDirection","disableOnMobile","useScrollPosition","springConfig","stiffness","damping","mass","restDelta","restSpeed","containerRef","inViewRef","combinedRef","node","current","once","amount","prefersReducedMotion","isMobile","setIsMobile","scrollY","scrollYProgress","offset","smooth","animationRange","setAnimationRange","calculateScrollRange","windowHeight","window","innerHeight","startViewportOffset","endViewportOffset","rect","getBoundingClientRect","elementTop","top","scrollStart","Math","max","scrollEnd","handleResize","innerWidth","addEventListener","removeEventListener","rawY","clamp","rawOpacity","y","useSimplifiedAnimation","styleProps","classes","animationStyle","duration","ease","transformTemplate","_","div","ref","initial","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/valeria/Documents/Crucible/frontend/src/components/core/effects/ScrollingTextAnimation.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport { motion, useScroll, useTransform, useSpring, useReducedMotion, useInView } from 'framer-motion';\nimport { createUseStyles } from 'react-jss';\n\n// Optimized styles for scrolling text animation\nconst useStyles = createUseStyles({\n  container: {\n    position: 'relative',\n    width: '100%',\n    textAlign: props => props.textAlign || 'center',\n    margin: props => props.margin || '0 0 3rem 0',\n    zIndex: 2,\n    willChange: 'transform, opacity',\n    transform: 'translate3d(0,0,0)', // Force GPU acceleration\n    backfaceVisibility: 'hidden',\n    pointerEvents: 'none', // Prevent blocking interactions with elements beneath\n    '& > *': {\n      pointerEvents: 'auto' // Restore pointer events for children\n    }\n  },\n  content: {\n    width: '100%'\n  },\n  divider: props => ({\n    width: props.dividerWidth || '150px',\n    height: props.dividerHeight || '1px',\n    background: props.dividerBackground || 'linear-gradient(to right, rgba(160, 142, 97, 0), rgba(160, 142, 97, 0.6), rgba(160, 142, 97, 0))',\n    margin: props.dividerMargin || '1rem auto',\n    display: props.showDivider ? 'block' : 'none',\n    opacity: props.isInView ? 1 : 0,\n    transform: props.isInView ? 'scaleX(1)' : 'scaleX(0.3)',\n    transition: 'opacity 0.8s cubic-bezier(0.16, 1, 0.3, 1), transform 1s cubic-bezier(0.16, 1, 0.3, 1)',\n    transformOrigin: 'center'\n  })\n});\n\n/**\n * Enhanced ScrollingTextAnimation Component\n * \n * A high-performance, smooth scrolling animation component with improved\n * entrance behavior and optimized rendering.\n * \n * @param {Object} props\n * @param {React.ReactNode} props.children - Child content to animate\n * @param {Object} [props.scrollConfig] - Configuration for scroll animations\n * @param {string} [props.textAlign='center'] - Text alignment\n * @param {string} [props.margin='0 0 3rem 0'] - Component margin\n * @param {boolean} [props.showDivider=true] - Whether to show divider\n * @param {string} [props.dividerWidth='150px'] - Width of divider\n * @param {string} [props.dividerHeight='1px'] - Height of divider\n * @param {string} [props.dividerBackground] - Background style for divider\n * @param {string} [props.dividerMargin='1rem auto'] - Margin for divider\n * @param {Object} [props.style] - Additional styles\n * @param {string} [props.className] - Additional class names\n */\nconst ScrollingTextAnimation = ({\n  children,\n  scrollConfig = {},\n  textAlign = 'center',\n  margin = '0 0 3rem 0',\n  showDivider = true,\n  dividerWidth = '150px',\n  dividerHeight = '1px',\n  dividerBackground,\n  dividerMargin = '1rem auto',\n  style = {},\n  className = ''\n}) => {\n  // Default scroll config with improved animations\n  const {\n    // Scroll range for animation (viewport percentage)\n    startScrollPercentage = 10,\n    endScrollPercentage = 30,\n    \n    // Animation values\n    initialY = 50,\n    finalY = 0,\n    initialOpacity = 0,\n    finalOpacity = 1,\n    \n    // Controls\n    clampValues = true,\n    reverseDirection = false,\n    disableOnMobile = false,\n    useScrollPosition = true,\n    \n    // Spring physics - gentler values for smoother motion\n    springConfig = {\n      stiffness: 45,\n      damping: 20,\n      mass: 0.8,\n      restDelta: 0.001,\n      restSpeed: 0.001,\n    }\n  } = scrollConfig;\n  \n  // Refs\n  const containerRef = useRef(null);\n  const inViewRef = useRef(null);\n  const combinedRef = useCallback(node => {\n    // Handle multiple refs\n    containerRef.current = node;\n    inViewRef.current = node;\n  }, []);\n  \n  // Check if component is in view for initial animation\n  const isInView = useInView(inViewRef, {\n    once: true,\n    amount: 0.2,\n    margin: \"0px 0px -20% 0px\"\n  });\n  \n  // Check for reduced motion preference\n  const prefersReducedMotion = useReducedMotion();\n  \n  // Check if device is mobile\n  const [isMobile, setIsMobile] = useState(false);\n  \n  // Scroll tracking\n  const { scrollY, scrollYProgress } = useScroll({\n    offset: [\"start end\", \"end start\"],\n    smooth: 0.1 // Slightly smoothed scroll\n  });\n  \n  // Calculate start and end positions for scroll-based animation\n  const [animationRange, setAnimationRange] = useState([0, 1]);\n  \n  useEffect(() => {\n    if (!containerRef.current || !useScrollPosition) return;\n    \n    // Calculate scroll range based on viewport position\n    const calculateScrollRange = () => {\n      const windowHeight = window.innerHeight;\n      const startViewportOffset = windowHeight * (startScrollPercentage / 100);\n      const endViewportOffset = windowHeight * (endScrollPercentage / 100);\n      \n      const rect = containerRef.current.getBoundingClientRect();\n      const elementTop = rect.top + window.scrollY;\n      \n      // Calculate scroll values where animation should start and end\n      const scrollStart = Math.max(0, elementTop - windowHeight + startViewportOffset);\n      const scrollEnd = Math.max(0, elementTop - endViewportOffset);\n      \n      setAnimationRange([scrollStart, scrollEnd]);\n    };\n    \n    // Calculate initially and on resize\n    calculateScrollRange();\n    \n    const handleResize = () => {\n      // Check if mobile on resize\n      setIsMobile(window.innerWidth <= 768);\n      calculateScrollRange();\n    };\n    \n    // Initial mobile check\n    setIsMobile(window.innerWidth <= 768);\n    \n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, [startScrollPercentage, endScrollPercentage, useScrollPosition]);\n  \n  // Create transformed values from scroll position\n  const rawY = useTransform(\n    useScrollPosition ? scrollY : scrollYProgress,\n    useScrollPosition ? animationRange : [0, 1],\n    reverseDirection ? [finalY, initialY] : [initialY, finalY],\n    { clamp: clampValues }\n  );\n  \n  const rawOpacity = useTransform(\n    useScrollPosition ? scrollY : scrollYProgress,\n    useScrollPosition ? animationRange : [0, 0.5],\n    reverseDirection ? [finalOpacity, initialOpacity] : [initialOpacity, finalOpacity],\n    { clamp: clampValues }\n  );\n  \n  // Apply spring physics for smoother animations\n  const y = useSpring(rawY, springConfig);\n  const opacity = useSpring(rawOpacity, springConfig);\n  \n  // Determine if we should use simplified animations\n  const useSimplifiedAnimation = useMemo(() => {\n    return prefersReducedMotion || (disableOnMobile && isMobile);\n  }, [prefersReducedMotion, disableOnMobile, isMobile]);\n  \n  // Style props for the component\n  const styleProps = useMemo(() => ({\n    textAlign,\n    margin,\n    showDivider,\n    dividerWidth,\n    dividerHeight,\n    dividerBackground,\n    dividerMargin,\n    isInView\n  }), [\n    textAlign, \n    margin, \n    showDivider, \n    dividerWidth, \n    dividerHeight, \n    dividerBackground, \n    dividerMargin,\n    isInView\n  ]);\n  \n  const classes = useStyles(styleProps);\n  \n  // Animation values based on conditions\n  const animationStyle = useMemo(() => {\n    // If not in view or prefers reduced motion, use simplified fade-in\n    if (!isInView || useSimplifiedAnimation) {\n      return {\n        opacity: isInView ? 1 : initialOpacity,\n        y: isInView ? 0 : initialY,\n        transition: {\n          opacity: { \n            duration: 0.8, \n            ease: [0.16, 1, 0.3, 1] // Smoother ease out\n          },\n          y: { \n            duration: 0.8, \n            ease: [0.16, 1, 0.3, 1]\n          }\n        }\n      };\n    }\n    \n    // Otherwise use scroll-based animation\n    return {\n      y: y,\n      opacity: opacity\n    };\n  }, [isInView, useSimplifiedAnimation, initialOpacity, initialY, y, opacity]);\n  \n  // Optimized transform template for better composability\n  const transformTemplate = useCallback((_, transform) => {\n    return `${transform} translateZ(0)`;\n  }, []);\n  \n  return (\n    <motion.div \n      ref={combinedRef}\n      className={`${classes.container} ${className}`}\n      style={{\n        ...style,\n        ...animationStyle\n      }}\n      transformTemplate={transformTemplate}\n      initial={false}\n    >\n      <div className={classes.content}>\n        {children}\n      </div>\n      {showDivider && <div className={classes.divider} />}\n    </motion.div>\n  );\n};\n\nexport default ScrollingTextAnimation;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}