{"ast":null,"code":"var _jsxFileName = \"/home/valeria/Documents/Crucible/frontend/src/components/core/Background.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect, useCallback } from 'react';\n\n/**\n * Background Component\n * \n * Creates a beautiful, subtle animated stellar background with constellations\n * and star particles that provide depth without distracting from content.\n * \n * Features:\n * - Smooth stellar animation with subtle parallax on scroll\n * - Independent motion with occasional gentle pulsing\n * - Warm, golden color palette that matches the site theme\n * - Optimized for performance across devices\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Background = () => {\n  _s();\n  // Refs for DOM elements and animation state\n  const containerRef = useRef(null);\n  const canvasRef = useRef(null);\n  const starsRef = useRef([]);\n  const constellationsRef = useRef([]);\n  const animationFrameRef = useRef(null);\n  const lastTimeRef = useRef(0);\n  const scrollPositionRef = useRef(0);\n\n  // Component state\n  const [dimensions, setDimensions] = useState({\n    width: 0,\n    height: 0,\n    pixelRatio: 1\n  });\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [prefersReducedMotion, setPrefersReducedMotion] = useState(false);\n\n  // Configuration\n  const CONFIG = {\n    // Star parameters\n    starCount: 140,\n    starSizeMin: 1,\n    starSizeMax: 3,\n    starOpacityMin: 0.15,\n    starOpacityMax: 0.75,\n    // Motion and animation\n    baseMovementSpeed: 0.0004,\n    // Reduced for smoother motion\n    pulseFrequency: 0.00005,\n    // Slower pulsing\n    pulseIntensity: 0.3,\n    // More subtle pulse\n\n    // Parallax effect\n    parallaxIntensity: 0.2,\n    // Subtle parallax strength\n\n    // Constellation parameters\n    constellationCount: 5,\n    verticesMin: 4,\n    verticesMax: 8,\n    lineOpacity: 0.08,\n    // More subtle lines\n    lineWidth: 0.5,\n    // Performance parameters\n    maxFPS: 30,\n    useHighQualityRendering: true\n  };\n\n  // Warm, golden color palette\n  const COLORS = {\n    // Main star colors (more yellow/golden tones)\n    stars: ['rgba(255, 243, 200, alpha)',\n    // Warm yellow\n    'rgba(255, 231, 164, alpha)',\n    // Golden\n    'rgba(255, 236, 179, alpha)',\n    // Pale gold\n    'rgba(252, 249, 231, alpha)',\n    // Off-white gold\n    'rgba(255, 225, 205, alpha)' // Warm white (slight orange)\n    ],\n    // Constellation effect colors\n    constellations: {\n      lines: 'rgba(160, 142, 97, alpha)',\n      pulseColor: 'rgba(191, 173, 127, alpha)',\n      vertexColor: 'rgba(191, 173, 127, alpha)'\n    },\n    // Background gradient colors\n    background: {\n      topColor: 'rgb(8, 8, 12)',\n      bottomColor: 'rgb(15, 15, 20)'\n    }\n  };\n\n  // Get color with opacity\n  const getColor = useCallback((baseColor, opacity) => {\n    const safeOpacity = Math.max(0, Math.min(1, opacity || 0));\n    return baseColor.replace(/alpha\\)$/, `${safeOpacity})`);\n  }, []);\n\n  // Detect reduced motion preference\n  useEffect(() => {\n    const reducedMotionQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\n    setPrefersReducedMotion(reducedMotionQuery.matches);\n    const handleReducedMotionChange = e => {\n      setPrefersReducedMotion(e.matches);\n    };\n    reducedMotionQuery.addEventListener('change', handleReducedMotionChange);\n    return () => {\n      reducedMotionQuery.removeEventListener('change', handleReducedMotionChange);\n    };\n  }, []);\n\n  // Track scroll position for parallax\n  useEffect(() => {\n    const handleScroll = () => {\n      scrollPositionRef.current = window.scrollY;\n    };\n    window.addEventListener('scroll', handleScroll, {\n      passive: true\n    });\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n  // Initialize canvas with proper resolution\n  const setupCanvas = useCallback(() => {\n    if (!canvasRef.current || !containerRef.current) return false;\n    const canvas = canvasRef.current;\n    const container = containerRef.current;\n    const rect = container.getBoundingClientRect();\n    const pixelRatio = window.devicePixelRatio || 1;\n\n    // Set canvas size accounting for pixel ratio\n    canvas.width = rect.width * pixelRatio;\n    canvas.height = rect.height * pixelRatio;\n    canvas.style.width = `${rect.width}px`;\n    canvas.style.height = `${rect.height}px`;\n\n    // Update dimensions state\n    setDimensions({\n      width: rect.width,\n      height: rect.height,\n      pixelRatio\n    });\n    return true;\n  }, []);\n\n  // Setup canvas resize observer\n  useEffect(() => {\n    if (!containerRef.current) return;\n    const handleResize = () => {\n      if (setupCanvas()) {\n        // Reinitialize stars and constellations after resize\n        initializeStars();\n        initializeConstellations();\n        setIsInitialized(true);\n      }\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Initial setup\n    setupCanvas();\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [setupCanvas]);\n\n  // Initialize stars with proper properties\n  const initializeStars = useCallback(() => {\n    if (!dimensions.width || !dimensions.height) return;\n\n    // Clear existing stars\n    starsRef.current = [];\n\n    // Create stars\n    for (let i = 0; i < CONFIG.starCount; i++) {\n      const star = {};\n\n      // Position\n      star.x = Math.random() * dimensions.width;\n      star.y = Math.random() * dimensions.height;\n      star.z = Math.random() * 0.8 + 0.1; // Depth (0.1 to 0.9)\n\n      // Visual properties\n      star.size = (Math.random() * (CONFIG.starSizeMax - CONFIG.starSizeMin) + CONFIG.starSizeMin) * star.z;\n      star.baseOpacity = Math.random() * (CONFIG.starOpacityMax - CONFIG.starOpacityMin) + CONFIG.starOpacityMin;\n      star.opacity = star.baseOpacity;\n\n      // Animation properties\n      star.pulsePhase = Math.random() * Math.PI * 2;\n      star.pulseSpeed = Math.random() * 0.002 + 0.001;\n      star.movementSpeed = (Math.random() * 0.2 + 0.9) * CONFIG.baseMovementSpeed * (1.1 - star.z);\n\n      // Color variation\n      const colorIndex = Math.floor(Math.random() * COLORS.stars.length);\n      star.color = COLORS.stars[colorIndex];\n\n      // Store in ref\n      starsRef.current.push(star);\n    }\n  }, [dimensions, CONFIG, COLORS.stars]);\n\n  // Create constellations with vertices and connections\n  const initializeConstellations = useCallback(() => {\n    if (!dimensions.width || !dimensions.height) return;\n\n    // Clear existing constellations\n    constellationsRef.current = [];\n\n    // Create constellations\n    for (let i = 0; i < CONFIG.constellationCount; i++) {\n      const constellation = {\n        vertices: [],\n        connections: [],\n        // Movement and pulse properties\n        movementSpeed: {\n          x: (Math.random() * 2 - 1) * CONFIG.baseMovementSpeed * 0.2,\n          y: (Math.random() * 2 - 1) * CONFIG.baseMovementSpeed * 0.2\n        },\n        pulsePhase: Math.random() * Math.PI * 2,\n        isPulsing: false,\n        pulseProgress: 0,\n        nextPulseTime: Math.random() * 60000 + 15000 // 15-75 seconds\n      };\n\n      // Determine the number of vertices\n      const vertexCount = Math.floor(Math.random() * (CONFIG.verticesMax - CONFIG.verticesMin + 1)) + CONFIG.verticesMin;\n\n      // Position constellation in a subsection of the screen\n      const sectionWidth = dimensions.width * 0.8;\n      const sectionHeight = dimensions.height * 0.8;\n      const offsetX = dimensions.width * 0.1;\n      const offsetY = dimensions.height * 0.1;\n      const centerX = offsetX + Math.random() * sectionWidth;\n      const centerY = offsetY + Math.random() * sectionHeight;\n      const radius = Math.min(dimensions.width, dimensions.height) * (Math.random() * 0.1 + 0.05);\n\n      // Create vertices\n      for (let j = 0; j < vertexCount; j++) {\n        // Use polar coordinates for more natural constellation shapes\n        const angle = j / vertexCount * Math.PI * 2 + Math.random() * 0.5;\n        const distance = radius * (Math.random() * 0.5 + 0.5);\n        const vertex = {};\n        vertex.x = centerX + Math.cos(angle) * distance;\n        vertex.y = centerY + Math.sin(angle) * distance;\n        vertex.size = Math.random() * 0.8 + 1.2;\n        vertex.baseOpacity = Math.random() * 0.3 + 0.2;\n        vertex.opacity = vertex.baseOpacity;\n        vertex.pulsePhase = Math.random() * Math.PI * 2;\n        vertex.z = Math.random() * 0.5 + 0.3; // For parallax effect\n\n        constellation.vertices.push(vertex);\n      }\n\n      // Create simplified connections between vertices\n      for (let j = 0; j < constellation.vertices.length; j++) {\n        // Connect to next vertex (circular)\n        const nextIndex = (j + 1) % constellation.vertices.length;\n        const connection = {};\n        connection.from = constellation.vertices[j];\n        connection.to = constellation.vertices[nextIndex];\n        connection.opacity = CONFIG.lineOpacity;\n        connection.baseOpacity = CONFIG.lineOpacity;\n        connection.width = CONFIG.lineWidth;\n        constellation.connections.push(connection);\n      }\n      constellationsRef.current.push(constellation);\n    }\n  }, [dimensions, CONFIG]);\n\n  // Update animation state\n  const updateAnimation = useCallback((deltaTime, timestamp) => {\n    // Global time factor for animations\n    const timeFactor = timestamp * 0.001;\n\n    // Parallax effect from scroll\n    const parallaxOffset = scrollPositionRef.current * CONFIG.parallaxIntensity;\n\n    // Motion dampening for reduced motion preference\n    const motionFactor = prefersReducedMotion ? 0.2 : 1;\n\n    // Update stars\n    for (let i = 0; i < starsRef.current.length; i++) {\n      const star = starsRef.current[i];\n\n      // Subtle movement based on time\n      star.x += Math.sin(timeFactor * 0.3 + star.pulsePhase) * star.movementSpeed * deltaTime * motionFactor;\n      star.y += Math.cos(timeFactor * 0.4 + star.pulsePhase * 1.3) * star.movementSpeed * deltaTime * motionFactor;\n\n      // Apply parallax offset based on depth (z)\n      const starParallax = parallaxOffset * (1 - star.z) * 0.5;\n      star.parallaxY = starParallax;\n\n      // Wrap around screen edges with padding\n      const padding = 20;\n      if (star.x < -padding) star.x = dimensions.width + padding;\n      if (star.x > dimensions.width + padding) star.x = -padding;\n      if (star.y < -padding) star.y = dimensions.height + padding;\n      if (star.y > dimensions.height + padding) star.y = -padding;\n\n      // Subtle pulsing effect\n      const pulseFactor = Math.sin(timeFactor * star.pulseSpeed + star.pulsePhase) * 0.15 + 0.85;\n      star.opacity = star.baseOpacity * pulseFactor;\n    }\n\n    // Update constellations\n    for (let i = 0; i < constellationsRef.current.length; i++) {\n      const constellation = constellationsRef.current[i];\n\n      // Check if it's time for a pulse (very occasional)\n      if (!constellation.isPulsing && Math.random() < 0.0001 * deltaTime) {\n        constellation.isPulsing = true;\n        constellation.pulseProgress = 0;\n        constellation.lastPulseTime = timestamp;\n      }\n\n      // Update pulse progress\n      if (constellation.isPulsing) {\n        constellation.pulseProgress += deltaTime * 0.0005; // Slower progress\n\n        // Complete pulse after 3 seconds\n        if (constellation.pulseProgress >= 1) {\n          constellation.isPulsing = false;\n          constellation.pulseProgress = 0;\n          constellation.nextPulseTime = timestamp + Math.random() * 30000 + 15000;\n        }\n      }\n\n      // Calculate pulse effect - smooth bell curve\n      let pulseIntensity = 0;\n      if (constellation.isPulsing) {\n        // Bell curve: rises then falls\n        pulseIntensity = CONFIG.pulseIntensity * Math.sin(constellation.pulseProgress * Math.PI);\n      }\n\n      // Update vertices with very subtle movement\n      for (let j = 0; j < constellation.vertices.length; j++) {\n        const vertex = constellation.vertices[j];\n\n        // Apply subtle drift\n        vertex.x += constellation.movementSpeed.x * deltaTime * motionFactor;\n        vertex.y += constellation.movementSpeed.y * deltaTime * motionFactor;\n\n        // Apply parallax based on depth\n        const vertexParallax = parallaxOffset * (1 - vertex.z) * 0.5;\n        vertex.parallaxY = vertexParallax;\n\n        // Apply pulse effect to opacity\n        vertex.opacity = vertex.baseOpacity + pulseIntensity;\n      }\n\n      // Update line opacity based on pulse\n      for (let j = 0; j < constellation.connections.length; j++) {\n        const connection = constellation.connections[j];\n        connection.opacity = connection.baseOpacity + pulseIntensity * 0.4;\n      }\n\n      // Check if constellation is off-screen and needs to wrap around\n      let needsRepositioning = true;\n      const padding = 50;\n      for (let j = 0; j < constellation.vertices.length; j++) {\n        const vertex = constellation.vertices[j];\n        if (vertex.x > -padding && vertex.x < dimensions.width + padding && vertex.y > -padding && vertex.y < dimensions.height + padding) {\n          needsRepositioning = false;\n          break;\n        }\n      }\n\n      // Reposition constellation if needed\n      if (needsRepositioning) {\n        // Reset position to opposite side of screen\n        for (let j = 0; j < constellation.vertices.length; j++) {\n          const vertex = constellation.vertices[j];\n          if (vertex.x < -padding) {\n            vertex.x += dimensions.width + 2 * padding;\n          } else if (vertex.x > dimensions.width + padding) {\n            vertex.x -= dimensions.width + 2 * padding;\n          }\n          if (vertex.y < -padding) {\n            vertex.y += dimensions.height + 2 * padding;\n          } else if (vertex.y > dimensions.height + padding) {\n            vertex.y -= dimensions.height + 2 * padding;\n          }\n        }\n      }\n    }\n  }, [dimensions, CONFIG, prefersReducedMotion]);\n\n  // Render the scene\n  const renderScene = useCallback(() => {\n    if (!canvasRef.current) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Apply device pixel ratio scaling\n    ctx.setTransform(dimensions.pixelRatio, 0, 0, dimensions.pixelRatio, 0, 0);\n\n    // Clear canvas\n    ctx.clearRect(0, 0, dimensions.width, dimensions.height);\n\n    // Draw background gradient\n    const gradient = ctx.createLinearGradient(0, 0, 0, dimensions.height);\n    gradient.addColorStop(0, COLORS.background.topColor);\n    gradient.addColorStop(1, COLORS.background.bottomColor);\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, dimensions.width, dimensions.height);\n\n    // Draw constellation connections\n    for (const constellation of constellationsRef.current) {\n      for (const connection of constellation.connections) {\n        const from = connection.from;\n        const to = connection.to;\n\n        // Skip nearly invisible connections\n        if (connection.opacity < 0.02) continue;\n\n        // Apply parallax to line positions\n        const fromY = from.y + (from.parallaxY || 0);\n        const toY = to.y + (to.parallaxY || 0);\n        ctx.beginPath();\n        ctx.moveTo(from.x, fromY);\n        ctx.lineTo(to.x, toY);\n        ctx.strokeStyle = getColor(COLORS.constellations.lines, connection.opacity);\n        ctx.lineWidth = connection.width;\n        ctx.stroke();\n      }\n\n      // Draw constellation vertices\n      for (const vertex of constellation.vertices) {\n        // Skip nearly invisible vertices\n        if (vertex.opacity < 0.02) continue;\n\n        // Apply parallax to vertex position\n        const y = vertex.y + (vertex.parallaxY || 0);\n\n        // Draw glow\n        ctx.beginPath();\n        ctx.arc(vertex.x, y, vertex.size * 1.5, 0, Math.PI * 2);\n        ctx.fillStyle = getColor(COLORS.constellations.vertexColor, vertex.opacity * 0.3);\n        ctx.fill();\n\n        // Draw core\n        ctx.beginPath();\n        ctx.arc(vertex.x, y, vertex.size * 0.6, 0, Math.PI * 2);\n        ctx.fillStyle = getColor(COLORS.constellations.vertexColor, vertex.opacity);\n        ctx.fill();\n      }\n    }\n\n    // Draw stars\n    for (const star of starsRef.current) {\n      // Skip almost invisible stars\n      if (star.opacity < 0.02) continue;\n\n      // Apply parallax to star position\n      const y = star.y + (star.parallaxY || 0);\n\n      // Draw star glow\n      ctx.beginPath();\n      ctx.arc(star.x, y, star.size * 1.5, 0, Math.PI * 2);\n      ctx.fillStyle = getColor(star.color, star.opacity * 0.3);\n      ctx.fill();\n\n      // Draw star core\n      ctx.beginPath();\n      ctx.arc(star.x, y, star.size * 0.6, 0, Math.PI * 2);\n      ctx.fillStyle = getColor(star.color, star.opacity);\n      ctx.fill();\n    }\n  }, [dimensions, COLORS, getColor]);\n\n  // Main animation loop\n  const animate = useCallback(timestamp => {\n    if (!isInitialized) {\n      animationFrameRef.current = requestAnimationFrame(animate);\n      return;\n    }\n\n    // Calculate delta time with cap to prevent large jumps\n    const deltaTime = lastTimeRef.current ? Math.min(timestamp - lastTimeRef.current, 33) : 16;\n    lastTimeRef.current = timestamp;\n\n    // Update animation state\n    updateAnimation(deltaTime, timestamp);\n\n    // Render scene\n    renderScene();\n\n    // Schedule next frame\n    animationFrameRef.current = requestAnimationFrame(animate);\n  }, [isInitialized, updateAnimation, renderScene]);\n\n  // Initialize animation when component is ready\n  useEffect(() => {\n    if (!isInitialized && dimensions.width && dimensions.height) {\n      initializeStars();\n      initializeConstellations();\n      setIsInitialized(true);\n    }\n  }, [dimensions, isInitialized, initializeStars, initializeConstellations]);\n\n  // Start animation loop\n  useEffect(() => {\n    if (!isInitialized) return;\n\n    // Start animation\n    animationFrameRef.current = requestAnimationFrame(animate);\n\n    // Cleanup\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [isInitialized, animate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    style: {\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%',\n      overflow: 'hidden',\n      zIndex: -1,\n      pointerEvents: 'none'\n    },\n    \"aria-hidden\": \"true\",\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 543,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 529,\n    columnNumber: 5\n  }, this);\n};\n_s(Background, \"07fiSViOrpaTmHnWqTkrOcQuLaA=\");\n_c = Background;\nexport default Background;\nvar _c;\n$RefreshReg$(_c, \"Background\");","map":{"version":3,"names":["React","useRef","useState","useEffect","useCallback","jsxDEV","_jsxDEV","Background","_s","containerRef","canvasRef","starsRef","constellationsRef","animationFrameRef","lastTimeRef","scrollPositionRef","dimensions","setDimensions","width","height","pixelRatio","isInitialized","setIsInitialized","prefersReducedMotion","setPrefersReducedMotion","CONFIG","starCount","starSizeMin","starSizeMax","starOpacityMin","starOpacityMax","baseMovementSpeed","pulseFrequency","pulseIntensity","parallaxIntensity","constellationCount","verticesMin","verticesMax","lineOpacity","lineWidth","maxFPS","useHighQualityRendering","COLORS","stars","constellations","lines","pulseColor","vertexColor","background","topColor","bottomColor","getColor","baseColor","opacity","safeOpacity","Math","max","min","replace","reducedMotionQuery","window","matchMedia","matches","handleReducedMotionChange","e","addEventListener","removeEventListener","handleScroll","current","scrollY","passive","setupCanvas","canvas","container","rect","getBoundingClientRect","devicePixelRatio","style","handleResize","initializeStars","initializeConstellations","i","star","x","random","y","z","size","baseOpacity","pulsePhase","PI","pulseSpeed","movementSpeed","colorIndex","floor","length","color","push","constellation","vertices","connections","isPulsing","pulseProgress","nextPulseTime","vertexCount","sectionWidth","sectionHeight","offsetX","offsetY","centerX","centerY","radius","j","angle","distance","vertex","cos","sin","nextIndex","connection","from","to","updateAnimation","deltaTime","timestamp","timeFactor","parallaxOffset","motionFactor","starParallax","parallaxY","padding","pulseFactor","lastPulseTime","vertexParallax","needsRepositioning","renderScene","ctx","getContext","setTransform","clearRect","gradient","createLinearGradient","addColorStop","fillStyle","fillRect","fromY","toY","beginPath","moveTo","lineTo","strokeStyle","stroke","arc","fill","animate","requestAnimationFrame","cancelAnimationFrame","ref","position","top","left","overflow","zIndex","pointerEvents","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/valeria/Documents/Crucible/frontend/src/components/core/Background.jsx"],"sourcesContent":["import React, { useRef, useState, useEffect, useCallback } from 'react';\n\n/**\n * Background Component\n * \n * Creates a beautiful, subtle animated stellar background with constellations\n * and star particles that provide depth without distracting from content.\n * \n * Features:\n * - Smooth stellar animation with subtle parallax on scroll\n * - Independent motion with occasional gentle pulsing\n * - Warm, golden color palette that matches the site theme\n * - Optimized for performance across devices\n */\nconst Background = () => {\n  // Refs for DOM elements and animation state\n  const containerRef = useRef(null);\n  const canvasRef = useRef(null);\n  const starsRef = useRef([]);\n  const constellationsRef = useRef([]);\n  const animationFrameRef = useRef(null);\n  const lastTimeRef = useRef(0);\n  const scrollPositionRef = useRef(0);\n  \n  // Component state\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0, pixelRatio: 1 });\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [prefersReducedMotion, setPrefersReducedMotion] = useState(false);\n  \n  // Configuration\n  const CONFIG = {\n    // Star parameters\n    starCount: 140,\n    starSizeMin: 1,\n    starSizeMax: 3,\n    starOpacityMin: 0.15,\n    starOpacityMax: 0.75,\n    \n    // Motion and animation\n    baseMovementSpeed: 0.0004, // Reduced for smoother motion\n    pulseFrequency: 0.00005,   // Slower pulsing\n    pulseIntensity: 0.3,       // More subtle pulse\n    \n    // Parallax effect\n    parallaxIntensity: 0.2,    // Subtle parallax strength\n    \n    // Constellation parameters\n    constellationCount: 5,\n    verticesMin: 4,\n    verticesMax: 8,\n    lineOpacity: 0.08,         // More subtle lines\n    lineWidth: 0.5,\n    \n    // Performance parameters\n    maxFPS: 30,\n    useHighQualityRendering: true\n  };\n  \n  // Warm, golden color palette\n  const COLORS = {\n    // Main star colors (more yellow/golden tones)\n    stars: [\n      'rgba(255, 243, 200, alpha)', // Warm yellow\n      'rgba(255, 231, 164, alpha)', // Golden\n      'rgba(255, 236, 179, alpha)', // Pale gold\n      'rgba(252, 249, 231, alpha)', // Off-white gold\n      'rgba(255, 225, 205, alpha)', // Warm white (slight orange)\n    ],\n    \n    // Constellation effect colors\n    constellations: {\n      lines: 'rgba(160, 142, 97, alpha)',\n      pulseColor: 'rgba(191, 173, 127, alpha)',\n      vertexColor: 'rgba(191, 173, 127, alpha)'\n    },\n    \n    // Background gradient colors\n    background: {\n      topColor: 'rgb(8, 8, 12)',\n      bottomColor: 'rgb(15, 15, 20)'\n    }\n  };\n  \n  // Get color with opacity\n  const getColor = useCallback((baseColor, opacity) => {\n    const safeOpacity = Math.max(0, Math.min(1, opacity || 0));\n    return baseColor.replace(/alpha\\)$/, `${safeOpacity})`);\n  }, []);\n  \n  // Detect reduced motion preference\n  useEffect(() => {\n    const reducedMotionQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\n    setPrefersReducedMotion(reducedMotionQuery.matches);\n    \n    const handleReducedMotionChange = (e) => {\n      setPrefersReducedMotion(e.matches);\n    };\n    \n    reducedMotionQuery.addEventListener('change', handleReducedMotionChange);\n    \n    return () => {\n      reducedMotionQuery.removeEventListener('change', handleReducedMotionChange);\n    };\n  }, []);\n  \n  // Track scroll position for parallax\n  useEffect(() => {\n    const handleScroll = () => {\n      scrollPositionRef.current = window.scrollY;\n    };\n    \n    window.addEventListener('scroll', handleScroll, { passive: true });\n    \n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n  \n  // Initialize canvas with proper resolution\n  const setupCanvas = useCallback(() => {\n    if (!canvasRef.current || !containerRef.current) return false;\n    \n    const canvas = canvasRef.current;\n    const container = containerRef.current;\n    const rect = container.getBoundingClientRect();\n    const pixelRatio = window.devicePixelRatio || 1;\n    \n    // Set canvas size accounting for pixel ratio\n    canvas.width = rect.width * pixelRatio;\n    canvas.height = rect.height * pixelRatio;\n    canvas.style.width = `${rect.width}px`;\n    canvas.style.height = `${rect.height}px`;\n    \n    // Update dimensions state\n    setDimensions({\n      width: rect.width,\n      height: rect.height,\n      pixelRatio\n    });\n    \n    return true;\n  }, []);\n  \n  // Setup canvas resize observer\n  useEffect(() => {\n    if (!containerRef.current) return;\n    \n    const handleResize = () => {\n      if (setupCanvas()) {\n        // Reinitialize stars and constellations after resize\n        initializeStars();\n        initializeConstellations();\n        setIsInitialized(true);\n      }\n    };\n    \n    window.addEventListener('resize', handleResize);\n    \n    // Initial setup\n    setupCanvas();\n    \n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [setupCanvas]);\n  \n  // Initialize stars with proper properties\n  const initializeStars = useCallback(() => {\n    if (!dimensions.width || !dimensions.height) return;\n    \n    // Clear existing stars\n    starsRef.current = [];\n    \n    // Create stars\n    for (let i = 0; i < CONFIG.starCount; i++) {\n      const star = {};\n      \n      // Position\n      star.x = Math.random() * dimensions.width;\n      star.y = Math.random() * dimensions.height;\n      star.z = Math.random() * 0.8 + 0.1; // Depth (0.1 to 0.9)\n      \n      // Visual properties\n      star.size = (Math.random() * (CONFIG.starSizeMax - CONFIG.starSizeMin) + CONFIG.starSizeMin) * star.z;\n      star.baseOpacity = Math.random() * (CONFIG.starOpacityMax - CONFIG.starOpacityMin) + CONFIG.starOpacityMin;\n      star.opacity = star.baseOpacity;\n      \n      // Animation properties\n      star.pulsePhase = Math.random() * Math.PI * 2;\n      star.pulseSpeed = Math.random() * 0.002 + 0.001;\n      star.movementSpeed = (Math.random() * 0.2 + 0.9) * CONFIG.baseMovementSpeed * (1.1 - star.z);\n      \n      // Color variation\n      const colorIndex = Math.floor(Math.random() * COLORS.stars.length);\n      star.color = COLORS.stars[colorIndex];\n      \n      // Store in ref\n      starsRef.current.push(star);\n    }\n  }, [dimensions, CONFIG, COLORS.stars]);\n  \n  // Create constellations with vertices and connections\n  const initializeConstellations = useCallback(() => {\n    if (!dimensions.width || !dimensions.height) return;\n    \n    // Clear existing constellations\n    constellationsRef.current = [];\n    \n    // Create constellations\n    for (let i = 0; i < CONFIG.constellationCount; i++) {\n      const constellation = {\n        vertices: [],\n        connections: [],\n        // Movement and pulse properties\n        movementSpeed: {\n          x: (Math.random() * 2 - 1) * CONFIG.baseMovementSpeed * 0.2,\n          y: (Math.random() * 2 - 1) * CONFIG.baseMovementSpeed * 0.2\n        },\n        pulsePhase: Math.random() * Math.PI * 2,\n        isPulsing: false,\n        pulseProgress: 0,\n        nextPulseTime: Math.random() * 60000 + 15000 // 15-75 seconds\n      };\n      \n      // Determine the number of vertices\n      const vertexCount = Math.floor(Math.random() * (CONFIG.verticesMax - CONFIG.verticesMin + 1)) + CONFIG.verticesMin;\n      \n      // Position constellation in a subsection of the screen\n      const sectionWidth = dimensions.width * 0.8;\n      const sectionHeight = dimensions.height * 0.8;\n      const offsetX = dimensions.width * 0.1;\n      const offsetY = dimensions.height * 0.1;\n      \n      const centerX = offsetX + Math.random() * sectionWidth;\n      const centerY = offsetY + Math.random() * sectionHeight;\n      const radius = Math.min(dimensions.width, dimensions.height) * (Math.random() * 0.1 + 0.05);\n      \n      // Create vertices\n      for (let j = 0; j < vertexCount; j++) {\n        // Use polar coordinates for more natural constellation shapes\n        const angle = (j / vertexCount) * Math.PI * 2 + Math.random() * 0.5;\n        const distance = radius * (Math.random() * 0.5 + 0.5);\n        \n        const vertex = {};\n        vertex.x = centerX + Math.cos(angle) * distance;\n        vertex.y = centerY + Math.sin(angle) * distance;\n        vertex.size = Math.random() * 0.8 + 1.2;\n        vertex.baseOpacity = Math.random() * 0.3 + 0.2;\n        vertex.opacity = vertex.baseOpacity;\n        vertex.pulsePhase = Math.random() * Math.PI * 2;\n        vertex.z = Math.random() * 0.5 + 0.3; // For parallax effect\n        \n        constellation.vertices.push(vertex);\n      }\n      \n      // Create simplified connections between vertices\n      for (let j = 0; j < constellation.vertices.length; j++) {\n        // Connect to next vertex (circular)\n        const nextIndex = (j + 1) % constellation.vertices.length;\n        \n        const connection = {};\n        connection.from = constellation.vertices[j];\n        connection.to = constellation.vertices[nextIndex];\n        connection.opacity = CONFIG.lineOpacity;\n        connection.baseOpacity = CONFIG.lineOpacity;\n        connection.width = CONFIG.lineWidth;\n        \n        constellation.connections.push(connection);\n      }\n      \n      constellationsRef.current.push(constellation);\n    }\n  }, [dimensions, CONFIG]);\n  \n  // Update animation state\n  const updateAnimation = useCallback((deltaTime, timestamp) => {\n    // Global time factor for animations\n    const timeFactor = timestamp * 0.001;\n    \n    // Parallax effect from scroll\n    const parallaxOffset = scrollPositionRef.current * CONFIG.parallaxIntensity;\n    \n    // Motion dampening for reduced motion preference\n    const motionFactor = prefersReducedMotion ? 0.2 : 1;\n    \n    // Update stars\n    for (let i = 0; i < starsRef.current.length; i++) {\n      const star = starsRef.current[i];\n      \n      // Subtle movement based on time\n      star.x += Math.sin(timeFactor * 0.3 + star.pulsePhase) * star.movementSpeed * deltaTime * motionFactor;\n      star.y += Math.cos(timeFactor * 0.4 + star.pulsePhase * 1.3) * star.movementSpeed * deltaTime * motionFactor;\n      \n      // Apply parallax offset based on depth (z)\n      const starParallax = parallaxOffset * (1 - star.z) * 0.5;\n      star.parallaxY = starParallax;\n      \n      // Wrap around screen edges with padding\n      const padding = 20;\n      if (star.x < -padding) star.x = dimensions.width + padding;\n      if (star.x > dimensions.width + padding) star.x = -padding;\n      if (star.y < -padding) star.y = dimensions.height + padding;\n      if (star.y > dimensions.height + padding) star.y = -padding;\n      \n      // Subtle pulsing effect\n      const pulseFactor = Math.sin(timeFactor * star.pulseSpeed + star.pulsePhase) * 0.15 + 0.85;\n      star.opacity = star.baseOpacity * pulseFactor;\n    }\n    \n    // Update constellations\n    for (let i = 0; i < constellationsRef.current.length; i++) {\n      const constellation = constellationsRef.current[i];\n      \n      // Check if it's time for a pulse (very occasional)\n      if (!constellation.isPulsing && Math.random() < 0.0001 * deltaTime) {\n        constellation.isPulsing = true;\n        constellation.pulseProgress = 0;\n        constellation.lastPulseTime = timestamp;\n      }\n      \n      // Update pulse progress\n      if (constellation.isPulsing) {\n        constellation.pulseProgress += deltaTime * 0.0005; // Slower progress\n        \n        // Complete pulse after 3 seconds\n        if (constellation.pulseProgress >= 1) {\n          constellation.isPulsing = false;\n          constellation.pulseProgress = 0;\n          constellation.nextPulseTime = timestamp + Math.random() * 30000 + 15000;\n        }\n      }\n      \n      // Calculate pulse effect - smooth bell curve\n      let pulseIntensity = 0;\n      if (constellation.isPulsing) {\n        // Bell curve: rises then falls\n        pulseIntensity = CONFIG.pulseIntensity * Math.sin(constellation.pulseProgress * Math.PI);\n      }\n      \n      // Update vertices with very subtle movement\n      for (let j = 0; j < constellation.vertices.length; j++) {\n        const vertex = constellation.vertices[j];\n        \n        // Apply subtle drift\n        vertex.x += constellation.movementSpeed.x * deltaTime * motionFactor;\n        vertex.y += constellation.movementSpeed.y * deltaTime * motionFactor;\n        \n        // Apply parallax based on depth\n        const vertexParallax = parallaxOffset * (1 - vertex.z) * 0.5;\n        vertex.parallaxY = vertexParallax;\n        \n        // Apply pulse effect to opacity\n        vertex.opacity = vertex.baseOpacity + pulseIntensity;\n      }\n      \n      // Update line opacity based on pulse\n      for (let j = 0; j < constellation.connections.length; j++) {\n        const connection = constellation.connections[j];\n        connection.opacity = connection.baseOpacity + pulseIntensity * 0.4;\n      }\n      \n      // Check if constellation is off-screen and needs to wrap around\n      let needsRepositioning = true;\n      const padding = 50;\n      \n      for (let j = 0; j < constellation.vertices.length; j++) {\n        const vertex = constellation.vertices[j];\n        if (vertex.x > -padding && vertex.x < dimensions.width + padding &&\n            vertex.y > -padding && vertex.y < dimensions.height + padding) {\n          needsRepositioning = false;\n          break;\n        }\n      }\n      \n      // Reposition constellation if needed\n      if (needsRepositioning) {\n        // Reset position to opposite side of screen\n        for (let j = 0; j < constellation.vertices.length; j++) {\n          const vertex = constellation.vertices[j];\n          if (vertex.x < -padding) {\n            vertex.x += dimensions.width + 2 * padding;\n          } else if (vertex.x > dimensions.width + padding) {\n            vertex.x -= dimensions.width + 2 * padding;\n          }\n          \n          if (vertex.y < -padding) {\n            vertex.y += dimensions.height + 2 * padding;\n          } else if (vertex.y > dimensions.height + padding) {\n            vertex.y -= dimensions.height + 2 * padding;\n          }\n        }\n      }\n    }\n  }, [dimensions, CONFIG, prefersReducedMotion]);\n  \n  // Render the scene\n  const renderScene = useCallback(() => {\n    if (!canvasRef.current) return;\n    \n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    \n    if (!ctx) return;\n    \n    // Apply device pixel ratio scaling\n    ctx.setTransform(dimensions.pixelRatio, 0, 0, dimensions.pixelRatio, 0, 0);\n    \n    // Clear canvas\n    ctx.clearRect(0, 0, dimensions.width, dimensions.height);\n    \n    // Draw background gradient\n    const gradient = ctx.createLinearGradient(0, 0, 0, dimensions.height);\n    gradient.addColorStop(0, COLORS.background.topColor);\n    gradient.addColorStop(1, COLORS.background.bottomColor);\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, dimensions.width, dimensions.height);\n    \n    // Draw constellation connections\n    for (const constellation of constellationsRef.current) {\n      for (const connection of constellation.connections) {\n        const from = connection.from;\n        const to = connection.to;\n        \n        // Skip nearly invisible connections\n        if (connection.opacity < 0.02) continue;\n        \n        // Apply parallax to line positions\n        const fromY = from.y + (from.parallaxY || 0);\n        const toY = to.y + (to.parallaxY || 0);\n        \n        ctx.beginPath();\n        ctx.moveTo(from.x, fromY);\n        ctx.lineTo(to.x, toY);\n        ctx.strokeStyle = getColor(COLORS.constellations.lines, connection.opacity);\n        ctx.lineWidth = connection.width;\n        ctx.stroke();\n      }\n      \n      // Draw constellation vertices\n      for (const vertex of constellation.vertices) {\n        // Skip nearly invisible vertices\n        if (vertex.opacity < 0.02) continue;\n        \n        // Apply parallax to vertex position\n        const y = vertex.y + (vertex.parallaxY || 0);\n        \n        // Draw glow\n        ctx.beginPath();\n        ctx.arc(vertex.x, y, vertex.size * 1.5, 0, Math.PI * 2);\n        ctx.fillStyle = getColor(COLORS.constellations.vertexColor, vertex.opacity * 0.3);\n        ctx.fill();\n        \n        // Draw core\n        ctx.beginPath();\n        ctx.arc(vertex.x, y, vertex.size * 0.6, 0, Math.PI * 2);\n        ctx.fillStyle = getColor(COLORS.constellations.vertexColor, vertex.opacity);\n        ctx.fill();\n      }\n    }\n    \n    // Draw stars\n    for (const star of starsRef.current) {\n      // Skip almost invisible stars\n      if (star.opacity < 0.02) continue;\n      \n      // Apply parallax to star position\n      const y = star.y + (star.parallaxY || 0);\n      \n      // Draw star glow\n      ctx.beginPath();\n      ctx.arc(star.x, y, star.size * 1.5, 0, Math.PI * 2);\n      ctx.fillStyle = getColor(star.color, star.opacity * 0.3);\n      ctx.fill();\n      \n      // Draw star core\n      ctx.beginPath();\n      ctx.arc(star.x, y, star.size * 0.6, 0, Math.PI * 2);\n      ctx.fillStyle = getColor(star.color, star.opacity);\n      ctx.fill();\n    }\n  }, [dimensions, COLORS, getColor]);\n  \n  // Main animation loop\n  const animate = useCallback((timestamp) => {\n    if (!isInitialized) {\n      animationFrameRef.current = requestAnimationFrame(animate);\n      return;\n    }\n    \n    // Calculate delta time with cap to prevent large jumps\n    const deltaTime = lastTimeRef.current ? Math.min(timestamp - lastTimeRef.current, 33) : 16;\n    lastTimeRef.current = timestamp;\n    \n    // Update animation state\n    updateAnimation(deltaTime, timestamp);\n    \n    // Render scene\n    renderScene();\n    \n    // Schedule next frame\n    animationFrameRef.current = requestAnimationFrame(animate);\n  }, [isInitialized, updateAnimation, renderScene]);\n  \n  // Initialize animation when component is ready\n  useEffect(() => {\n    if (!isInitialized && dimensions.width && dimensions.height) {\n      initializeStars();\n      initializeConstellations();\n      setIsInitialized(true);\n    }\n  }, [dimensions, isInitialized, initializeStars, initializeConstellations]);\n  \n  // Start animation loop\n  useEffect(() => {\n    if (!isInitialized) return;\n    \n    // Start animation\n    animationFrameRef.current = requestAnimationFrame(animate);\n    \n    // Cleanup\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [isInitialized, animate]);\n  \n  return (\n    <div\n      ref={containerRef}\n      style={{\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        overflow: 'hidden',\n        zIndex: -1,\n        pointerEvents: 'none'\n      }}\n      aria-hidden=\"true\"\n    >\n      <canvas\n        ref={canvasRef}\n        style={{\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%',\n          height: '100%'\n        }}\n      />\n    </div>\n  );\n};\n\nexport default Background;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}