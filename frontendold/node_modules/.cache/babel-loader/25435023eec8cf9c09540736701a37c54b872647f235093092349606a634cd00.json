{"ast":null,"code":"var _jsxFileName = \"/home/valeria/Documents/Crucible/frontend/src/components/core/effects/ScrollingTextAnimation.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport gsap from 'gsap';\nimport ScrollTrigger from 'gsap/ScrollTrigger';\nimport SplitType from 'splittype';\n\n// Register the plugin\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ngsap.registerPlugin(ScrollTrigger);\nconst useStyles = createUseStyles({\n  animatedContainer: {\n    position: 'relative',\n    width: '100%',\n    textAlign: props => props.textAlign || 'center',\n    margin: props => props.margin || '0 0 3rem 0',\n    zIndex: 2\n  },\n  content: {\n    width: '100%',\n    overflow: 'hidden' // Prevent character animations from causing scrollbar flicker\n  },\n  divider: props => ({\n    width: props.dividerWidth || '150px',\n    height: props.dividerHeight || '1px',\n    background: props.dividerBackground || 'linear-gradient(to right, rgba(160, 142, 97, 0), rgba(160, 142, 97, 0.6), rgba(160, 142, 97, 0))',\n    margin: props.dividerMargin || '1rem auto',\n    display: props.showDivider ? 'block' : 'none'\n  })\n});\nconst ScrollingTextAnimation = ({\n  children,\n  scrollConfig = {},\n  textAlign = 'center',\n  margin = '0 0 3rem 0',\n  showDivider = true,\n  dividerWidth = '150px',\n  dividerHeight = '1px',\n  dividerBackground,\n  dividerMargin = '1rem auto',\n  style = {},\n  className = '',\n  splitText = true,\n  // New option to enable/disable text splitting\n  staggerAmount = 0.03 // How much to stagger animations between elements\n}) => {\n  _s();\n  const {\n    startPosition = 0,\n    endPosition = 300,\n    initialY = 100,\n    scrub = true,\n    ease = \"power2.out\",\n    reverseDirection = false,\n    enableReducedMotion = true\n  } = scrollConfig;\n  const containerRef = useRef(null);\n  const contentRef = useRef(null);\n  const dividerRef = useRef(null);\n  const splitTextRef = useRef(null);\n  const styleProps = {\n    textAlign,\n    margin,\n    showDivider,\n    dividerWidth,\n    dividerHeight,\n    dividerBackground,\n    dividerMargin\n  };\n  const classes = useStyles(styleProps);\n  useEffect(() => {\n    // Check for reduced motion preference\n    const prefersReducedMotion = enableReducedMotion && typeof window !== 'undefined' && window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n\n    // Get DOM references\n    const container = containerRef.current;\n    const contentElement = contentRef.current;\n    if (!container || !contentElement) return;\n\n    // Initialize animations\n    let textElements;\n\n    // Split text if enabled\n    if (splitText && !prefersReducedMotion) {\n      // Split the text into words and characters\n      splitTextRef.current = new SplitType(contentElement, {\n        types: 'words,chars',\n        tagName: 'span'\n      });\n\n      // Use characters for animation\n      textElements = splitTextRef.current.chars;\n    } else {\n      // Use the content container if not splitting\n      textElements = [contentElement];\n    }\n\n    // Create the animation timeline\n    const tl = gsap.timeline({\n      scrollTrigger: {\n        trigger: container,\n        start: \"top bottom-=100px\",\n        end: \"bottom top+=200px\",\n        scrub: scrub ? 0.3 : false,\n        // Add a small amount of smoothing\n        markers: false // Set to true for debugging\n      }\n    });\n\n    // Initial state - elements start invisible and offset\n    gsap.set(textElements, {\n      y: reverseDirection ? -initialY : initialY,\n      opacity: 0,\n      // Force GPU rendering for smoother animations\n      force3D: true\n    });\n\n    // Animate each text element\n    tl.to(textElements, {\n      y: 0,\n      opacity: 1,\n      duration: 1,\n      ease: ease,\n      stagger: splitText ? staggerAmount : 0 // Only stagger if we're splitting text\n    });\n\n    // If we have a divider, animate it separately\n    if (showDivider && dividerRef.current) {\n      gsap.set(dividerRef.current, {\n        scaleX: 0,\n        opacity: 0,\n        transformOrigin: \"center center\"\n      });\n      tl.to(dividerRef.current, {\n        scaleX: 1,\n        opacity: 1,\n        duration: 0.5,\n        ease: \"power1.out\"\n      }, \"<0.2\"); // Start slightly after the text begins animating\n    }\n\n    // Cleanup function\n    return () => {\n      if (splitTextRef.current) {\n        splitTextRef.current.revert(); // Clean up the split text\n      }\n      if (tl.scrollTrigger) {\n        tl.scrollTrigger.kill(); // Kill the ScrollTrigger instance\n      }\n      tl.kill(); // Kill the timeline\n    };\n  }, [initialY, ease, scrub, reverseDirection, splitText, staggerAmount, showDivider, enableReducedMotion]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    className: `${classes.animatedContainer} ${className}`,\n    style: style,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: contentRef,\n      className: classes.content,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), showDivider && /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: dividerRef,\n      className: classes.divider\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this);\n};\n_s(ScrollingTextAnimation, \"40mU4sJs1LPMzwZlI3UGS3ev0Tc=\", false, function () {\n  return [useStyles];\n});\n_c = ScrollingTextAnimation;\nexport default ScrollingTextAnimation;\nvar _c;\n$RefreshReg$(_c, \"ScrollingTextAnimation\");","map":{"version":3,"names":["React","useRef","useEffect","createUseStyles","gsap","ScrollTrigger","SplitType","jsxDEV","_jsxDEV","registerPlugin","useStyles","animatedContainer","position","width","textAlign","props","margin","zIndex","content","overflow","divider","dividerWidth","height","dividerHeight","background","dividerBackground","dividerMargin","display","showDivider","ScrollingTextAnimation","children","scrollConfig","style","className","splitText","staggerAmount","_s","startPosition","endPosition","initialY","scrub","ease","reverseDirection","enableReducedMotion","containerRef","contentRef","dividerRef","splitTextRef","styleProps","classes","prefersReducedMotion","window","matchMedia","matches","container","current","contentElement","textElements","types","tagName","chars","tl","timeline","scrollTrigger","trigger","start","end","markers","set","y","opacity","force3D","to","duration","stagger","scaleX","transformOrigin","revert","kill","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/valeria/Documents/Crucible/frontend/src/components/core/effects/ScrollingTextAnimation.jsx"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport gsap from 'gsap';\nimport ScrollTrigger from 'gsap/ScrollTrigger';\nimport SplitType from 'splittype';\n\n// Register the plugin\ngsap.registerPlugin(ScrollTrigger);\n\nconst useStyles = createUseStyles({\n  animatedContainer: {\n    position: 'relative',\n    width: '100%',\n    textAlign: props => props.textAlign || 'center',\n    margin: props => props.margin || '0 0 3rem 0',\n    zIndex: 2,\n  },\n  content: {\n    width: '100%',\n    overflow: 'hidden', // Prevent character animations from causing scrollbar flicker\n  },\n  divider: props => ({\n    width: props.dividerWidth || '150px',\n    height: props.dividerHeight || '1px',\n    background: props.dividerBackground || 'linear-gradient(to right, rgba(160, 142, 97, 0), rgba(160, 142, 97, 0.6), rgba(160, 142, 97, 0))',\n    margin: props.dividerMargin || '1rem auto',\n    display: props.showDivider ? 'block' : 'none'\n  })\n});\n\nconst ScrollingTextAnimation = ({\n  children,\n  scrollConfig = {},\n  textAlign = 'center',\n  margin = '0 0 3rem 0',\n  showDivider = true,\n  dividerWidth = '150px',\n  dividerHeight = '1px',\n  dividerBackground,\n  dividerMargin = '1rem auto',\n  style = {},\n  className = '',\n  splitText = true,  // New option to enable/disable text splitting\n  staggerAmount = 0.03 // How much to stagger animations between elements\n}) => {\n  const {\n    startPosition = 0,\n    endPosition = 300,\n    initialY = 100,\n    scrub = true,\n    ease = \"power2.out\",\n    reverseDirection = false,\n    enableReducedMotion = true,\n  } = scrollConfig;\n\n  const containerRef = useRef(null);\n  const contentRef = useRef(null);\n  const dividerRef = useRef(null);\n  const splitTextRef = useRef(null);\n\n  const styleProps = {\n    textAlign,\n    margin,\n    showDivider,\n    dividerWidth,\n    dividerHeight,\n    dividerBackground,\n    dividerMargin\n  };\n  \n  const classes = useStyles(styleProps);\n\n  useEffect(() => {\n    // Check for reduced motion preference\n    const prefersReducedMotion = \n      enableReducedMotion &&\n      typeof window !== 'undefined' &&\n      window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n\n    // Get DOM references\n    const container = containerRef.current;\n    const contentElement = contentRef.current;\n    if (!container || !contentElement) return;\n\n    // Initialize animations\n    let textElements;\n    \n    // Split text if enabled\n    if (splitText && !prefersReducedMotion) {\n      // Split the text into words and characters\n      splitTextRef.current = new SplitType(contentElement, {\n        types: 'words,chars',\n        tagName: 'span'\n      });\n      \n      // Use characters for animation\n      textElements = splitTextRef.current.chars;\n    } else {\n      // Use the content container if not splitting\n      textElements = [contentElement];\n    }\n\n    // Create the animation timeline\n    const tl = gsap.timeline({\n      scrollTrigger: {\n        trigger: container,\n        start: \"top bottom-=100px\",\n        end: \"bottom top+=200px\",\n        scrub: scrub ? 0.3 : false, // Add a small amount of smoothing\n        markers: false, // Set to true for debugging\n      }\n    });\n\n    // Initial state - elements start invisible and offset\n    gsap.set(textElements, { \n      y: reverseDirection ? -initialY : initialY,\n      opacity: 0,\n      // Force GPU rendering for smoother animations\n      force3D: true\n    });\n\n    // Animate each text element\n    tl.to(textElements, {\n      y: 0,\n      opacity: 1,\n      duration: 1,\n      ease: ease,\n      stagger: splitText ? staggerAmount : 0, // Only stagger if we're splitting text\n    });\n\n    // If we have a divider, animate it separately\n    if (showDivider && dividerRef.current) {\n      gsap.set(dividerRef.current, {\n        scaleX: 0,\n        opacity: 0,\n        transformOrigin: \"center center\"\n      });\n      \n      tl.to(dividerRef.current, {\n        scaleX: 1,\n        opacity: 1,\n        duration: 0.5,\n        ease: \"power1.out\"\n      }, \"<0.2\"); // Start slightly after the text begins animating\n    }\n\n    // Cleanup function\n    return () => {\n      if (splitTextRef.current) {\n        splitTextRef.current.revert(); // Clean up the split text\n      }\n      if (tl.scrollTrigger) {\n        tl.scrollTrigger.kill(); // Kill the ScrollTrigger instance\n      }\n      tl.kill(); // Kill the timeline\n    };\n  }, [\n    initialY, \n    ease, \n    scrub, \n    reverseDirection, \n    splitText, \n    staggerAmount, \n    showDivider, \n    enableReducedMotion\n  ]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={`${classes.animatedContainer} ${className}`}\n      style={style}\n    >\n      <div ref={contentRef} className={classes.content}>\n        {children}\n      </div>\n      {showDivider && <div ref={dividerRef} className={classes.divider} />}\n    </div>\n  );\n};\n\nexport default ScrollingTextAnimation;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}