{"ast":null,"code":"var _jsxFileName = \"/home/valeria/Documents/Crucible/frontend/src/components/sections/codex/creators/creatorshowcase/EvolutionSimulatorConceptShowcase.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport Background from '../../../../core/Background';\nimport MeteorShower from '../../../../core/effects/cosmiceffects/MeteorShower';\nimport ScrollingTextAnimation from '../../../../core/effects/ScrollingTextAnimation';\nimport RevealText from '../../../../core/effects/RevealText';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EvolutionSimulatorConceptShowcase = () => {\n  _s();\n  // State for cursor position (for background effect)\n  const [cursorPosition, setCursorPosition] = useState({\n    x: 0,\n    y: 0\n  });\n\n  // State for selected body shape and traits\n  const [selectedBodyShape, setSelectedBodyShape] = useState('quadrupedal');\n  const [selectedTrait, setSelectedTrait] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  // State for environment\n  const [environment, setEnvironment] = useState({\n    temperature: 0.4,\n    light_conditions: 0.3,\n    terrain_harshness: 0.5,\n    resource_scarcity: 0.2,\n    ether_density: 0.6,\n    pressure_gravity: 0.4\n  });\n\n  // Canvas and container refs for network visualization\n  const canvasRef = useRef(null);\n  const containerRef = useRef(null);\n  const nodeRefs = useRef({});\n  const animationFrameRef = useRef(null);\n\n  // Data for body shapes\n  const bodyShapes = [{\n    id: 'bipedal',\n    name: 'Bipedal',\n    description: 'Upright forms with manipulative upper limbs'\n  }, {\n    id: 'quadrupedal',\n    name: 'Quadrupedal',\n    description: 'Four-limbed forms optimized for stability and movement'\n  }, {\n    id: 'serpentine',\n    name: 'Serpentine',\n    description: 'Elongated, limbless forms specialized for flexibility'\n  }, {\n    id: 'amorphous',\n    name: 'Amorphous',\n    description: 'Malleable forms without fixed structure'\n  }, {\n    id: 'insectoid',\n    name: 'Insectoid',\n    description: 'Multi-limbed, segmented forms'\n  }, {\n    id: 'avian',\n    name: 'Avian',\n    description: 'Forms optimized for flight and aerial movement'\n  }, {\n    id: 'aquatic',\n    name: 'Aquatic',\n    description: 'Forms specialized for water environments'\n  }];\n\n  // Data for fundamental trait categories\n  const traitCategories = [{\n    id: 'locomotion',\n    name: 'Locomotion',\n    color: '#A67C52'\n  }, {\n    id: 'metabolism',\n    name: 'Metabolism',\n    color: '#5C9D8B'\n  }, {\n    id: 'sensory',\n    name: 'Sensory Acuity',\n    color: '#7D6B9E'\n  }, {\n    id: 'etheric',\n    name: 'Etheric Adaptation',\n    color: '#C99846'\n  }, {\n    id: 'thermal',\n    name: 'Thermal Regulation',\n    color: '#B54B4B'\n  }];\n\n  // Mock data for traits based on the selected body shape\n  const getTraitsByBodyShape = bodyShapeId => {\n    // Base traits that all body shapes share\n    const baseTraits = {\n      locomotion: [{\n        id: 'running',\n        name: 'Swift Limbs',\n        tier: 1,\n        affinities: {\n          terrain_harshness: 0.7,\n          pressure_gravity: 0.4,\n          temperature: 0.2,\n          resource_scarcity: -0.3,\n          light_conditions: 0.1,\n          ether_density: 0\n        },\n        description: 'Limbs designed for quick locomotion across varied terrain.',\n        connections: ['enhanced_muscle', 'reflective_scales']\n      }, {\n        id: 'climbing',\n        name: 'Grasping Appendages',\n        tier: 1,\n        affinities: {\n          terrain_harshness: 0.8,\n          pressure_gravity: 0.3,\n          resource_scarcity: -0.2,\n          temperature: 0,\n          light_conditions: 0.1,\n          ether_density: 0\n        },\n        description: 'Specialized limb structures with superior grip for vertical movement.',\n        connections: ['enhanced_muscle', 'sonar_mapping']\n      }, {\n        id: 'webbed',\n        name: 'Webbed Appendages',\n        tier: 1,\n        affinities: {\n          terrain_harshness: -0.4,\n          pressure_gravity: 0.1,\n          resource_scarcity: -0.1,\n          temperature: -0.2,\n          light_conditions: 0,\n          ether_density: 0\n        },\n        description: 'Limbs with membrane structures optimized for aquatic movement.',\n        connections: ['ether_sensing', 'thick_blubber']\n      }],\n      metabolism: [{\n        id: 'carnivore',\n        name: 'Carnivore Digestion',\n        tier: 1,\n        affinities: {\n          resource_scarcity: 0.5,\n          temperature: 0.3,\n          terrain_harshness: 0.1,\n          light_conditions: 0,\n          pressure_gravity: 0,\n          ether_density: 0\n        },\n        description: 'Specialized digestive system optimized for meat processing.',\n        connections: ['enhanced_muscle', 'acute_vision']\n      }, {\n        id: 'omnivore',\n        name: 'Omnivore Adaptation',\n        tier: 1,\n        affinities: {\n          resource_scarcity: 0.6,\n          terrain_harshness: 0.2,\n          temperature: 0.1,\n          light_conditions: 0,\n          pressure_gravity: 0,\n          ether_density: 0\n        },\n        description: 'Versatile digestive system capable of processing diverse food sources.',\n        connections: ['bioluminescence', 'reflective_scales']\n      }, {\n        id: 'photosynthetic',\n        name: 'Photosynthetic Cells',\n        tier: 1,\n        affinities: {\n          light_conditions: 0.9,\n          resource_scarcity: 0.7,\n          temperature: 0.4,\n          terrain_harshness: -0.2,\n          pressure_gravity: 0,\n          ether_density: 0.1\n        },\n        description: 'Cellular structures that can convert light into energy.',\n        connections: ['ether_sensing', 'reflective_scales']\n      }],\n      sensory: [{\n        id: 'acute_vision',\n        name: 'Acute Vision',\n        tier: 1,\n        affinities: {\n          light_conditions: 0.8,\n          terrain_harshness: 0.3,\n          resource_scarcity: 0.2,\n          temperature: 0,\n          pressure_gravity: 0,\n          ether_density: 0\n        },\n        description: 'Highly developed visual organs with exceptional acuity.',\n        connections: ['enhanced_muscle', 'eagle_eyes']\n      }, {\n        id: 'sonar_mapping',\n        name: 'Echolocation',\n        tier: 1,\n        affinities: {\n          light_conditions: -0.8,\n          terrain_harshness: 0.5,\n          pressure_gravity: 0.1,\n          temperature: 0,\n          resource_scarcity: 0,\n          ether_density: 0.2\n        },\n        description: 'Ability to emit and detect sound waves for environmental mapping.',\n        connections: ['vibration_detection', 'bioluminescence']\n      }, {\n        id: 'vibration_detection',\n        name: 'Vibration Detection',\n        tier: 1,\n        affinities: {\n          terrain_harshness: 0.6,\n          pressure_gravity: 0.4,\n          light_conditions: -0.3,\n          temperature: 0,\n          resource_scarcity: 0,\n          ether_density: 0.1\n        },\n        description: 'Specialized organs that can detect minute vibrations through various media.',\n        connections: ['sonar_mapping', 'thick_blubber']\n      }],\n      etheric: [{\n        id: 'ether_sensing',\n        name: 'Ether Sensing',\n        tier: 1,\n        affinities: {\n          ether_density: 0.8,\n          light_conditions: 0.2,\n          terrain_harshness: 0,\n          temperature: 0,\n          resource_scarcity: 0,\n          pressure_gravity: 0.1\n        },\n        description: 'Specialized organs that can detect and interpret etheric energy patterns.',\n        connections: ['photosynthetic', 'ether_channeling']\n      }, {\n        id: 'ether_channeling',\n        name: 'Ether Channeling',\n        tier: 1,\n        affinities: {\n          ether_density: 0.9,\n          temperature: 0.3,\n          light_conditions: 0.3,\n          terrain_harshness: 0,\n          resource_scarcity: -0.2,\n          pressure_gravity: 0.1\n        },\n        description: 'Biological structures capable of directing and manipulating etheric energies.',\n        connections: ['ether_sensing', 'bioluminescence']\n      }, {\n        id: 'bioluminescence',\n        name: 'Bioluminescence',\n        tier: 1,\n        affinities: {\n          light_conditions: -0.6,\n          ether_density: 0.5,\n          resource_scarcity: -0.3,\n          temperature: 0,\n          terrain_harshness: 0,\n          pressure_gravity: 0\n        },\n        description: 'Ability to produce light through biochemical processes.',\n        connections: ['ether_channeling', 'omnivore']\n      }],\n      thermal: [{\n        id: 'thick_blubber',\n        name: 'Thick Blubber',\n        tier: 1,\n        affinities: {\n          temperature: -0.8,\n          pressure_gravity: 0.3,\n          resource_scarcity: -0.4,\n          terrain_harshness: 0.1,\n          light_conditions: 0,\n          ether_density: 0\n        },\n        description: 'Dense fatty tissue layer providing insulation in cold environments.',\n        connections: ['vibration_detection', 'enhanced_muscle']\n      }, {\n        id: 'reflective_scales',\n        name: 'Reflective Scales',\n        tier: 1,\n        affinities: {\n          temperature: 0.7,\n          light_conditions: 0.6,\n          terrain_harshness: 0.3,\n          resource_scarcity: -0.2,\n          pressure_gravity: 0,\n          ether_density: 0.1\n        },\n        description: 'Light-reflecting scales that help regulate heat absorption.',\n        connections: ['running', 'photosynthetic']\n      }, {\n        id: 'heat_vents',\n        name: 'Heat Vents',\n        tier: 1,\n        affinities: {\n          temperature: 0.8,\n          ether_density: 0.3,\n          resource_scarcity: -0.3,\n          terrain_harshness: 0,\n          light_conditions: 0,\n          pressure_gravity: 0\n        },\n        description: 'Specialized structures that can rapidly dissipate excess heat.',\n        connections: ['running', 'ether_channeling']\n      }]\n    };\n\n    // Advanced traits (tier 2)\n    const advancedTraits = {\n      sensory: [{\n        id: 'eagle_eyes',\n        name: 'Eagle-like Vision',\n        tier: 2,\n        affinities: {\n          light_conditions: 0.9,\n          terrain_harshness: 0.5,\n          resource_scarcity: 0.4,\n          temperature: 0,\n          pressure_gravity: 0,\n          ether_density: 0.1\n        },\n        description: 'Exceptionally developed vision with incredible range and detail perception.',\n        connections: ['acute_vision']\n      }],\n      locomotion: [{\n        id: 'enhanced_muscle',\n        name: 'Enhanced Musculature',\n        tier: 2,\n        affinities: {\n          terrain_harshness: 0.8,\n          pressure_gravity: 0.7,\n          resource_scarcity: -0.4,\n          temperature: 0.1,\n          light_conditions: 0,\n          ether_density: 0\n        },\n        description: 'Highly developed muscle structures with exceptional strength and endurance.',\n        connections: ['running', 'climbing', 'carnivore', 'acute_vision', 'thick_blubber']\n      }]\n    };\n\n    // Specialized traits for each body shape (could add more to make these unique)\n    const specializedTraits = {\n      bipedal: {\n        locomotion: [{\n          id: 'bipedal_agility',\n          name: 'Bipedal Agility',\n          tier: 2,\n          affinities: {\n            terrain_harshness: 0.8,\n            pressure_gravity: 0.5,\n            resource_scarcity: -0.2,\n            temperature: 0.2,\n            light_conditions: 0.3,\n            ether_density: 0\n          },\n          description: 'Specialized balance and coordination optimized for upright movement.',\n          connections: ['running', 'climbing']\n        }]\n      },\n      quadrupedal: {\n        locomotion: [{\n          id: 'quadrupedal_stability',\n          name: 'Quadrupedal Stability',\n          tier: 2,\n          affinities: {\n            terrain_harshness: 0.9,\n            pressure_gravity: 0.7,\n            resource_scarcity: -0.1,\n            temperature: 0.1,\n            light_conditions: 0.1,\n            ether_density: 0\n          },\n          description: 'Enhanced stability and load-bearing capacity from four-limb structure.',\n          connections: ['running', 'enhanced_muscle']\n        }]\n      },\n      serpentine: {\n        locomotion: [{\n          id: 'serpentine_flexibility',\n          name: 'Serpentine Flexibility',\n          tier: 2,\n          affinities: {\n            terrain_harshness: 0.7,\n            pressure_gravity: 0.4,\n            resource_scarcity: -0.1,\n            temperature: 0.1,\n            light_conditions: 0,\n            ether_density: 0.1\n          },\n          description: 'Extreme body flexibility allowing navigation of confined spaces.',\n          connections: ['vibration_detection', 'reflective_scales']\n        }]\n      },\n      // Similar specialized traits could be added for other body shapes\n      amorphous: {},\n      insectoid: {},\n      avian: {},\n      aquatic: {}\n    };\n\n    // Combine base traits with specialized traits for the selected body shape\n    const allTraits = {\n      ...baseTraits\n    };\n\n    // Add advanced traits\n    Object.keys(advancedTraits).forEach(category => {\n      if (!allTraits[category]) allTraits[category] = [];\n      allTraits[category] = [...allTraits[category], ...advancedTraits[category]];\n    });\n\n    // Add body-shape specific traits\n    if (specializedTraits[bodyShapeId]) {\n      Object.keys(specializedTraits[bodyShapeId]).forEach(category => {\n        if (!allTraits[category]) allTraits[category] = [];\n        allTraits[category] = [...allTraits[category], ...specializedTraits[bodyShapeId][category]];\n      });\n    }\n    return allTraits;\n  };\n\n  // Get all traits as flattened array\n  const getAllTraits = () => {\n    const traitsByCategory = getTraitsByBodyShape(selectedBodyShape);\n    const allTraits = [];\n    Object.keys(traitsByCategory).forEach(category => {\n      traitsByCategory[category].forEach(trait => {\n        allTraits.push({\n          ...trait,\n          category\n        });\n      });\n    });\n    return allTraits;\n  };\n\n  // Find trait by ID (useful for looking up connections)\n  const findTraitById = id => {\n    const allTraits = getAllTraits();\n    return allTraits.find(trait => trait.id === id);\n  };\n\n  // This function is available for custom positioning if needed later\n  // Currently using direct calculation in the canvas setup\n  /* const calculatePosition = (index, total, tier, radius = 180) => {\n    const angle = (index / total) * 2 * Math.PI;\n    const tierMultiplier = tier === 1 ? 1 : 1.8; // Tier 2 is further out\n    const x = Math.cos(angle) * radius * tierMultiplier;\n    const y = Math.sin(angle) * radius * tierMultiplier;\n    return { x, y };\n  }; */\n\n  // Calculate trait affinity compatibility\n  const calculateCompatibility = (trait1, trait2) => {\n    const stressors = ['terrain_harshness', 'resource_scarcity', 'light_conditions', 'ether_density', 'temperature', 'pressure_gravity'];\n    let totalSimilarity = 0;\n    let totalWeight = 0;\n    stressors.forEach(stressor => {\n      const val1 = trait1.affinities[stressor] || 0;\n      const val2 = trait2.affinities[stressor] || 0;\n\n      // Calculate similarity (1 for identical, 0 for completely opposite)\n      const similarity = 1 - Math.min(1, Math.abs(val1 - val2) / 2);\n\n      // Weight based on how important this stressor is to either trait\n      const weight = (Math.abs(val1) + Math.abs(val2)) / 2;\n      totalSimilarity += similarity * (1 + weight * 0.5);\n      totalWeight += 1;\n    });\n\n    // Calculate compatibility score (0.3 to 1.0)\n    return 0.3 + 0.5 * (totalSimilarity / (totalWeight * 1.5));\n  };\n\n  // Calculate environmental relevance\n  const calculateEnvironmentalRelevance = trait => {\n    let relevanceScore = 0;\n    Object.keys(environment).forEach(stressor => {\n      const stressorValue = environment[stressor];\n      const traitAffinity = trait.affinities[stressor] || 0;\n\n      // Calculate how well this trait addresses this stressor\n      // For positive stressors, positive affinity increases relevance\n      // For negative stressors, negative affinity increases relevance\n      relevanceScore += Math.abs(stressorValue) * stressorValue * traitAffinity;\n    });\n\n    // Normalize using hyperbolic tangent\n    return Math.tanh(relevanceScore);\n  };\n\n  // Track mouse position for background parallax effect\n  const handleMouseMove = e => {\n    setCursorPosition({\n      x: e.clientX,\n      y: e.clientY\n    });\n  };\n\n  // Initialize animation on first render\n  useEffect(() => {\n    // Set loaded state after a short delay for animation purposes\n    const timer = setTimeout(() => {\n      setIsLoaded(true);\n    }, 800);\n    return () => clearTimeout(timer);\n  }, []);\n\n  // Set up the canvas and animation when component mounts or selected body shape changes\n  useEffect(() => {\n    if (!canvasRef.current || !containerRef.current) return;\n\n    // Memoize the functions to prevent dependency issues\n    const getTraits = getAllTraits;\n    const findTrait = findTraitById;\n    const calculateRelevance = calculateEnvironmentalRelevance;\n    const categoryData = [...traitCategories];\n    const canvas = canvasRef.current;\n    const container = containerRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Set canvas dimensions\n    const updateCanvasDimensions = () => {\n      const rect = container.getBoundingClientRect();\n      canvas.width = rect.width;\n      canvas.height = rect.height;\n    };\n    updateCanvasDimensions();\n    window.addEventListener('resize', updateCanvasDimensions);\n\n    // Create a map of node positions by trait ID\n    const traitPositions = {};\n\n    // Prepare traits data\n    const traitsData = getTraits();\n    const traitCategoryMap = {};\n\n    // Group traits by category to calculate positions\n    traitsData.forEach(trait => {\n      if (!traitCategoryMap[trait.category]) {\n        traitCategoryMap[trait.category] = [];\n      }\n      traitCategoryMap[trait.category].push(trait);\n    });\n\n    // Calculate positions for all traits\n    Object.keys(traitCategoryMap).forEach((category, categoryIndex) => {\n      const traits = traitCategoryMap[category];\n      const categoryTraitCount = traits.length;\n      traits.forEach((trait, index) => {\n        // Calculate position based on category and tier\n        const categoryOffset = categoryIndex / Object.keys(traitCategoryMap).length * 2 * Math.PI;\n        const traitOffset = index / categoryTraitCount * (2 * Math.PI / Object.keys(traitCategoryMap).length);\n        const angle = categoryOffset + traitOffset;\n        const tierMultiplier = trait.tier === 1 ? 1 : 1.8; // Tier 2 is further out\n        const radius = Math.min(canvas.width, canvas.height) * 0.25; // 25% of min canvas dimension\n\n        const x = canvas.width / 2 + Math.cos(angle) * radius * tierMultiplier;\n        const y = canvas.height / 2 + Math.sin(angle) * radius * tierMultiplier;\n        traitPositions[trait.id] = {\n          x,\n          y,\n          trait\n        };\n      });\n    });\n\n    // Animation function for drawing the network\n    const animate = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Draw connections first (so they appear behind nodes)\n      traitsData.forEach(trait => {\n        if (trait.connections && trait.connections.length > 0) {\n          const startPos = traitPositions[trait.id];\n          trait.connections.forEach(connectionId => {\n            const endPos = traitPositions[connectionId];\n            if (startPos && endPos) {\n              // Find the connected trait object\n              const connectedTrait = findTrait(connectionId);\n              if (connectedTrait) {\n                // Calculate compatibility for line color\n                const compatibility = calculateCompatibility(trait, connectedTrait);\n\n                // Set line style based on compatibility\n                ctx.beginPath();\n                ctx.moveTo(startPos.x, startPos.y);\n                ctx.lineTo(endPos.x, endPos.y);\n                ctx.lineWidth = 2;\n\n                // Color gradient based on compatibility (yellow to white for higher compatibility)\n                const colorIntensity = Math.floor(compatibility * 255);\n                ctx.strokeStyle = `rgba(${colorIntensity}, ${colorIntensity}, ${Math.min(120, colorIntensity)}, ${0.3 + compatibility * 0.6})`;\n\n                // Add glow for selected trait\n                if (selectedTrait && (trait.id === selectedTrait.id || connectionId === selectedTrait.id)) {\n                  ctx.shadowColor = 'rgba(255, 253, 227, 0.6)';\n                  ctx.shadowBlur = 10;\n                  ctx.lineWidth = 3;\n                } else {\n                  ctx.shadowBlur = 0;\n                }\n                ctx.stroke();\n              }\n            }\n          });\n        }\n      });\n\n      // Draw center shape\n      ctx.beginPath();\n      ctx.arc(canvas.width / 2, canvas.height / 2, 40, 0, 2 * Math.PI);\n      ctx.fillStyle = 'rgba(160, 142, 97, 0.8)';\n      ctx.shadowColor = 'rgba(160, 142, 97, 0.6)';\n      ctx.shadowBlur = 20;\n      ctx.fill();\n\n      // Draw body shape text\n      ctx.font = 'bold 14px Arial';\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillText('Body', canvas.width / 2, canvas.height / 2 - 8);\n      ctx.fillText('Shape', canvas.width / 2, canvas.height / 2 + 8);\n\n      // Draw nodes for each trait\n      Object.keys(traitPositions).forEach(traitId => {\n        const {\n          x,\n          y,\n          trait\n        } = traitPositions[traitId];\n        const category = trait.category;\n        const categoryObj = categoryData.find(c => c.id === category);\n        const categoryColor = categoryObj ? categoryObj.color : '#BFAD7F';\n\n        // Calculate node size based on tier and selection\n        const isSelected = selectedTrait && selectedTrait.id === traitId;\n        const baseSize = trait.tier === 1 ? 15 : 20;\n        const nodeSize = isSelected ? baseSize * 1.3 : baseSize;\n\n        // Calculate environmental relevance for glow intensity\n        const relevance = calculateRelevance(trait);\n        const normalizedRelevance = (relevance + 1) / 2; // Convert from -1..1 to 0..1\n\n        // Draw node\n        ctx.beginPath();\n        ctx.arc(x, y, nodeSize, 0, 2 * Math.PI);\n\n        // Fill with category color\n        ctx.fillStyle = categoryColor;\n\n        // Add glow effect based on environmental relevance\n        ctx.shadowColor = 'rgba(255, 253, 227, 0.8)';\n        ctx.shadowBlur = 10 + normalizedRelevance * 15;\n        ctx.fill();\n\n        // Draw border for selected trait\n        if (isSelected) {\n          ctx.beginPath();\n          ctx.arc(x, y, nodeSize + 3, 0, 2 * Math.PI);\n          ctx.strokeStyle = 'rgba(255, 255, 255, 0.8)';\n          ctx.lineWidth = 2;\n          ctx.stroke();\n        }\n\n        // Reset shadow for text\n        ctx.shadowBlur = 0;\n\n        // Store position in nodeRefs for hover detection\n        nodeRefs.current[traitId] = {\n          x,\n          y,\n          radius: nodeSize,\n          trait\n        };\n      });\n\n      // Request next animation frame\n      animationFrameRef.current = requestAnimationFrame(animate);\n    };\n\n    // Start animation\n    animate();\n\n    // Cleanup on unmount\n    return () => {\n      window.removeEventListener('resize', updateCanvasDimensions);\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [selectedBodyShape, selectedTrait, environment, getAllTraits, findTraitById, calculateEnvironmentalRelevance, traitCategories, calculateCompatibility]);\n\n  // Handle canvas clicks to select traits\n  const handleCanvasClick = e => {\n    if (!canvasRef.current || !containerRef.current) return;\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n\n    // Check center body shape first (40 pixel radius)\n    const centerX = canvas.width / 2;\n    const centerY = canvas.height / 2;\n    if (Math.sqrt((x - centerX) ** 2 + (y - centerY) ** 2) <= 40) {\n      // Clicked on body shape - show body shape selection\n      setSelectedTrait(null);\n      return;\n    }\n\n    // Check if clicked on any trait node\n    let clicked = false;\n    Object.keys(nodeRefs.current).forEach(traitId => {\n      const node = nodeRefs.current[traitId];\n      const distance = Math.sqrt((x - node.x) ** 2 + (y - node.y) ** 2);\n      if (distance <= node.radius) {\n        setSelectedTrait(node.trait);\n        clicked = true;\n      }\n    });\n\n    // If clicked outside any node, deselect\n    if (!clicked) {\n      setSelectedTrait(null);\n    }\n  };\n\n  // Handle environment parameter changes\n  const handleEnvironmentChange = (stressor, value) => {\n    setEnvironment(prev => ({\n      ...prev,\n      [stressor]: parseFloat(value)\n    }));\n  };\n\n  // Handle body shape change\n  const handleBodyShapeChange = shapeId => {\n    setSelectedBodyShape(shapeId);\n    setSelectedTrait(null);\n  };\n\n  // Tooltip content for when a trait is selected\n  const renderTraitTooltip = () => {\n    if (!selectedTrait) return null;\n    const trait = selectedTrait;\n    const categoryObj = traitCategories.find(c => c.id === trait.category);\n    return /*#__PURE__*/_jsxDEV(motion.div, {\n      className: \"trait-tooltip\",\n      initial: {\n        opacity: 0,\n        y: 10\n      },\n      animate: {\n        opacity: 1,\n        y: 0\n      },\n      exit: {\n        opacity: 0,\n        y: 10\n      },\n      transition: {\n        duration: 0.3\n      },\n      style: {\n        position: 'absolute',\n        bottom: '20px',\n        left: '50%',\n        transform: 'translateX(-50%)',\n        backgroundColor: 'rgba(15, 15, 15, 0.85)',\n        border: `1px solid ${(categoryObj === null || categoryObj === void 0 ? void 0 : categoryObj.color) || '#BFAD7F'}`,\n        borderRadius: '4px',\n        padding: '16px',\n        width: '320px',\n        zIndex: 10,\n        boxShadow: '0 4px 20px rgba(0, 0, 0, 0.5)',\n        color: '#e0e0e0'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          color: (categoryObj === null || categoryObj === void 0 ? void 0 : categoryObj.color) || '#BFAD7F',\n          marginTop: 0,\n          borderBottom: `1px solid rgba(${(categoryObj === null || categoryObj === void 0 ? void 0 : categoryObj.color) || '#BFAD7F'}, 0.3)`,\n          paddingBottom: '8px'\n        },\n        children: trait.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 774,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: '14px',\n          opacity: 0.8,\n          marginBottom: '12px'\n        },\n        children: trait.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 783,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'grid',\n          gridTemplateColumns: 'repeat(2, 1fr)',\n          gap: '8px',\n          fontSize: '12px'\n        },\n        children: Object.entries(trait.affinities).map(([stressor, value]) => {\n          // Only show non-zero affinities\n          if (value === 0) return null;\n\n          // Format stressor name\n          const stressorName = stressor.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n\n          // Determine color based on value\n          const valueColor = value > 0 ? 'rgb(100, 200, 100)' : 'rgb(200, 100, 100)';\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              justifyContent: 'space-between'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: [stressorName, \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 807,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: valueColor\n              },\n              children: [value > 0 ? '+' : '', value.toFixed(1)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 808,\n              columnNumber: 17\n            }, this)]\n          }, stressor, true, {\n            fileName: _jsxFileName,\n            lineNumber: 806,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 787,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '12px',\n          paddingTop: '12px',\n          borderTop: '1px solid rgba(160, 142, 97, 0.3)',\n          fontSize: '12px',\n          color: '#BFAD7F'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Tier \", trait.tier, \" \", categoryObj === null || categoryObj === void 0 ? void 0 : categoryObj.name, \" Trait\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 823,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Environmental Relevance: \", calculateEnvironmentalRelevance(trait).toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 824,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 816,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 753,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render environment controls\n  const renderEnvironmentControls = () => {\n    const stressors = [{\n      id: 'temperature',\n      name: 'Temperature',\n      min: -1,\n      max: 1\n    }, {\n      id: 'light_conditions',\n      name: 'Light Conditions',\n      min: -1,\n      max: 1\n    }, {\n      id: 'terrain_harshness',\n      name: 'Terrain Harshness',\n      min: -1,\n      max: 1\n    }, {\n      id: 'resource_scarcity',\n      name: 'Resource Scarcity',\n      min: -1,\n      max: 1\n    }, {\n      id: 'ether_density',\n      name: 'Ether Density',\n      min: -1,\n      max: 1\n    }, {\n      id: 'pressure_gravity',\n      name: 'Pressure/Gravity',\n      min: -1,\n      max: 1\n    }];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"environment-controls\",\n      style: {\n        position: 'absolute',\n        right: '20px',\n        top: '20px',\n        backgroundColor: 'rgba(15, 15, 15, 0.7)',\n        border: '1px solid rgba(160, 142, 97, 0.2)',\n        borderRadius: '4px',\n        padding: '16px',\n        width: '280px',\n        zIndex: 5\n      },\n      children: [/*#__PURE__*/_jsxDEV(RevealText, {\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          style: {\n            color: '#BFAD7F',\n            marginTop: 0,\n            marginBottom: '12px'\n          },\n          children: \"Environment Parameters\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 854,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 853,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: 'column',\n          gap: '12px'\n        },\n        children: stressors.map(stressor => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            gap: '4px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              justifyContent: 'space-between'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              style: {\n                fontSize: '14px',\n                color: '#e0e0e0'\n              },\n              children: stressor.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 863,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                fontSize: '14px',\n                color: environment[stressor.id] > 0 ? 'rgb(100, 200, 100)' : environment[stressor.id] < 0 ? 'rgb(200, 100, 100)' : '#e0e0e0'\n              },\n              children: environment[stressor.id].toFixed(1)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 866,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 862,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: stressor.min,\n            max: stressor.max,\n            step: \"0.1\",\n            value: environment[stressor.id],\n            onChange: e => handleEnvironmentChange(stressor.id, e.target.value),\n            style: {\n              width: '100%',\n              accentColor: '#BFAD7F'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 873,\n            columnNumber: 15\n          }, this)]\n        }, stressor.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 861,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 859,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 842,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render body shape selector\n  const renderBodyShapeSelector = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body-shape-selector\",\n      style: {\n        position: 'absolute',\n        left: '20px',\n        top: '20px',\n        backgroundColor: 'rgba(15, 15, 15, 0.7)',\n        border: '1px solid rgba(160, 142, 97, 0.2)',\n        borderRadius: '4px',\n        padding: '16px',\n        width: '280px',\n        zIndex: 5\n      },\n      children: [/*#__PURE__*/_jsxDEV(RevealText, {\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          style: {\n            color: '#BFAD7F',\n            marginTop: 0,\n            marginBottom: '12px'\n          },\n          children: \"Body Shape\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 907,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 906,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: 'column',\n          gap: '8px'\n        },\n        children: bodyShapes.map(shape => /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => handleBodyShapeChange(shape.id),\n          style: {\n            padding: '10px',\n            backgroundColor: selectedBodyShape === shape.id ? 'rgba(160, 142, 97, 0.3)' : 'rgba(30, 30, 30, 0.6)',\n            borderRadius: '4px',\n            cursor: 'pointer',\n            border: selectedBodyShape === shape.id ? '1px solid rgba(160, 142, 97, 0.6)' : '1px solid transparent',\n            transition: 'all 0.2s ease'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontWeight: 'bold',\n              color: '#BFAD7F'\n            },\n            children: shape.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 926,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '12px',\n              color: '#e0e0e0',\n              marginTop: '4px'\n            },\n            children: shape.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 927,\n            columnNumber: 15\n          }, this)]\n        }, shape.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 914,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 912,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 895,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Title component with ScrollingTextAnimation\n  const renderTitle = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: '20px',\n        left: '50%',\n        transform: 'translateX(-50%)',\n        zIndex: 5,\n        width: '100%',\n        textAlign: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(ScrollingTextAnimation, {\n        scrollConfig: {\n          startPosition: 0,\n          endPosition: 300,\n          initialY: -20,\n          finalY: 0,\n          clampValues: true\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          style: {\n            color: '#BFAD7F',\n            margin: 0,\n            fontSize: '32px',\n            textShadow: '0 2px 10px rgba(0, 0, 0, 0.7)'\n          },\n          children: \"Crescent Evolution System\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 948,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: '#e0e0e0',\n            margin: '8px 0 0',\n            fontSize: '16px',\n            maxWidth: '600px',\n            marginLeft: 'auto',\n            marginRight: 'auto',\n            textShadow: '0 1px 4px rgba(0, 0, 0, 0.8)'\n          },\n          children: \"Explore the interconnected trait network and see how traits evolve in response to environmental pressures.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 956,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 939,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 938,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"evolution-simulator-concept-showcase\",\n    style: {\n      position: 'relative',\n      width: '100%',\n      height: '100vh',\n      overflow: 'hidden',\n      backgroundColor: '#000'\n    },\n    onMouseMove: handleMouseMove,\n    children: [/*#__PURE__*/_jsxDEV(Background, {\n      cursorPosition: cursorPosition,\n      setCursorPosition: setCursorPosition\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 986,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MeteorShower, {\n      height: \"100vh\",\n      zIndex: 2,\n      trailColor: \"rgba(191, 173, 127, 0.8)\",\n      glowColor: \"rgba(207, 185, 130, 0.6)\",\n      coreColor: \"rgba(255, 248, 220, 1)\",\n      meteorDensity: 15,\n      meteorMinSize: 1,\n      meteorMaxSize: 2,\n      meteorSpeed: 0.08,\n      trailLength: 300,\n      trailSegments: 80,\n      enableParallax: true,\n      parallaxIntensity: 0.15,\n      mode: \"arc\",\n      staggered: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 989,\n      columnNumber: 7\n    }, this), renderTitle(), renderBodyShapeSelector(), renderEnvironmentControls(), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: containerRef,\n      style: {\n        position: 'absolute',\n        top: '0',\n        left: '0',\n        width: '100%',\n        height: '100%',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        opacity: isLoaded ? 1 : 0,\n        transition: 'opacity 1s ease'\n      },\n      onClick: handleCanvasClick,\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        style: {\n          position: 'absolute',\n          top: '0',\n          left: '0',\n          width: '100%',\n          height: '100%',\n          zIndex: 3\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1033,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1017,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AnimatePresence, {\n      children: selectedTrait && renderTraitTooltip()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1047,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        bottom: '15px',\n        left: '50%',\n        transform: 'translateX(-50%)',\n        color: 'rgba(191, 173, 127, 0.6)',\n        fontSize: '14px',\n        zIndex: 5,\n        textAlign: 'center',\n        width: '100%'\n      },\n      children: \"Click on a trait node to view details or adjust environment parameters to see how traits respond\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1052,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"#content\",\n      style: {\n        position: 'absolute',\n        top: '-40px',\n        left: 0,\n        backgroundColor: '#BFAD7F',\n        color: '#000',\n        padding: '8px',\n        zIndex: 100,\n        transition: 'top 0.3s ease',\n        ':focus': {\n          top: 0\n        }\n      },\n      children: \"Skip to main content\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1067,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 974,\n    columnNumber: 5\n  }, this);\n};\n_s(EvolutionSimulatorConceptShowcase, \"xmrgkPGNxZH81QG19GBkmjgWqUI=\");\n_c = EvolutionSimulatorConceptShowcase;\nexport default EvolutionSimulatorConceptShowcase;\nvar _c;\n$RefreshReg$(_c, \"EvolutionSimulatorConceptShowcase\");","map":{"version":3,"names":["React","useState","useEffect","useRef","motion","AnimatePresence","Background","MeteorShower","ScrollingTextAnimation","RevealText","jsxDEV","_jsxDEV","EvolutionSimulatorConceptShowcase","_s","cursorPosition","setCursorPosition","x","y","selectedBodyShape","setSelectedBodyShape","selectedTrait","setSelectedTrait","isLoaded","setIsLoaded","environment","setEnvironment","temperature","light_conditions","terrain_harshness","resource_scarcity","ether_density","pressure_gravity","canvasRef","containerRef","nodeRefs","animationFrameRef","bodyShapes","id","name","description","traitCategories","color","getTraitsByBodyShape","bodyShapeId","baseTraits","locomotion","tier","affinities","connections","metabolism","sensory","etheric","thermal","advancedTraits","specializedTraits","bipedal","quadrupedal","serpentine","amorphous","insectoid","avian","aquatic","allTraits","Object","keys","forEach","category","getAllTraits","traitsByCategory","trait","push","findTraitById","find","calculateCompatibility","trait1","trait2","stressors","totalSimilarity","totalWeight","stressor","val1","val2","similarity","Math","min","abs","weight","calculateEnvironmentalRelevance","relevanceScore","stressorValue","traitAffinity","tanh","handleMouseMove","e","clientX","clientY","timer","setTimeout","clearTimeout","current","getTraits","findTrait","calculateRelevance","categoryData","canvas","container","ctx","getContext","updateCanvasDimensions","rect","getBoundingClientRect","width","height","window","addEventListener","traitPositions","traitsData","traitCategoryMap","categoryIndex","traits","categoryTraitCount","length","index","categoryOffset","PI","traitOffset","angle","tierMultiplier","radius","cos","sin","animate","clearRect","startPos","connectionId","endPos","connectedTrait","compatibility","beginPath","moveTo","lineTo","lineWidth","colorIntensity","floor","strokeStyle","shadowColor","shadowBlur","stroke","arc","fillStyle","fill","font","textAlign","textBaseline","fillText","traitId","categoryObj","c","categoryColor","isSelected","baseSize","nodeSize","relevance","normalizedRelevance","requestAnimationFrame","removeEventListener","cancelAnimationFrame","handleCanvasClick","left","top","centerX","centerY","sqrt","clicked","node","distance","handleEnvironmentChange","value","prev","parseFloat","handleBodyShapeChange","shapeId","renderTraitTooltip","div","className","initial","opacity","exit","transition","duration","style","position","bottom","transform","backgroundColor","border","borderRadius","padding","zIndex","boxShadow","children","marginTop","borderBottom","paddingBottom","fileName","_jsxFileName","lineNumber","columnNumber","fontSize","marginBottom","display","gridTemplateColumns","gap","entries","map","stressorName","split","word","charAt","toUpperCase","slice","join","valueColor","justifyContent","toFixed","paddingTop","borderTop","renderEnvironmentControls","max","right","flexDirection","type","step","onChange","target","accentColor","renderBodyShapeSelector","shape","onClick","cursor","fontWeight","renderTitle","scrollConfig","startPosition","endPosition","initialY","finalY","clampValues","margin","textShadow","maxWidth","marginLeft","marginRight","overflow","onMouseMove","trailColor","glowColor","coreColor","meteorDensity","meteorMinSize","meteorMaxSize","meteorSpeed","trailLength","trailSegments","enableParallax","parallaxIntensity","mode","staggered","ref","alignItems","href","_c","$RefreshReg$"],"sources":["/home/valeria/Documents/Crucible/frontend/src/components/sections/codex/creators/creatorshowcase/EvolutionSimulatorConceptShowcase.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport Background from '../../../../core/Background';\nimport MeteorShower from '../../../../core/effects/cosmiceffects/MeteorShower';\nimport ScrollingTextAnimation from '../../../../core/effects/ScrollingTextAnimation';\nimport RevealText from '../../../../core/effects/RevealText';\n\nconst EvolutionSimulatorConceptShowcase = () => {\n  // State for cursor position (for background effect)\n  const [cursorPosition, setCursorPosition] = useState({ x: 0, y: 0 });\n  \n  // State for selected body shape and traits\n  const [selectedBodyShape, setSelectedBodyShape] = useState('quadrupedal');\n  const [selectedTrait, setSelectedTrait] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  \n  // State for environment\n  const [environment, setEnvironment] = useState({\n    temperature: 0.4,\n    light_conditions: 0.3,\n    terrain_harshness: 0.5,\n    resource_scarcity: 0.2,\n    ether_density: 0.6,\n    pressure_gravity: 0.4\n  });\n  \n  // Canvas and container refs for network visualization\n  const canvasRef = useRef(null);\n  const containerRef = useRef(null);\n  const nodeRefs = useRef({});\n  const animationFrameRef = useRef(null);\n  \n  // Data for body shapes\n  const bodyShapes = [\n    { id: 'bipedal', name: 'Bipedal', description: 'Upright forms with manipulative upper limbs' },\n    { id: 'quadrupedal', name: 'Quadrupedal', description: 'Four-limbed forms optimized for stability and movement' },\n    { id: 'serpentine', name: 'Serpentine', description: 'Elongated, limbless forms specialized for flexibility' },\n    { id: 'amorphous', name: 'Amorphous', description: 'Malleable forms without fixed structure' },\n    { id: 'insectoid', name: 'Insectoid', description: 'Multi-limbed, segmented forms' },\n    { id: 'avian', name: 'Avian', description: 'Forms optimized for flight and aerial movement' },\n    { id: 'aquatic', name: 'Aquatic', description: 'Forms specialized for water environments' }\n  ];\n  \n  // Data for fundamental trait categories\n  const traitCategories = [\n    { id: 'locomotion', name: 'Locomotion', color: '#A67C52' },\n    { id: 'metabolism', name: 'Metabolism', color: '#5C9D8B' },\n    { id: 'sensory', name: 'Sensory Acuity', color: '#7D6B9E' },\n    { id: 'etheric', name: 'Etheric Adaptation', color: '#C99846' },\n    { id: 'thermal', name: 'Thermal Regulation', color: '#B54B4B' }\n  ];\n  \n  // Mock data for traits based on the selected body shape\n  const getTraitsByBodyShape = (bodyShapeId) => {\n    // Base traits that all body shapes share\n    const baseTraits = {\n      locomotion: [\n        {\n          id: 'running',\n          name: 'Swift Limbs',\n          tier: 1,\n          affinities: {\n            terrain_harshness: 0.7,\n            pressure_gravity: 0.4,\n            temperature: 0.2,\n            resource_scarcity: -0.3,\n            light_conditions: 0.1,\n            ether_density: 0\n          },\n          description: 'Limbs designed for quick locomotion across varied terrain.',\n          connections: ['enhanced_muscle', 'reflective_scales']\n        },\n        {\n          id: 'climbing',\n          name: 'Grasping Appendages',\n          tier: 1,\n          affinities: {\n            terrain_harshness: 0.8,\n            pressure_gravity: 0.3,\n            resource_scarcity: -0.2,\n            temperature: 0,\n            light_conditions: 0.1,\n            ether_density: 0\n          },\n          description: 'Specialized limb structures with superior grip for vertical movement.',\n          connections: ['enhanced_muscle', 'sonar_mapping']\n        },\n        {\n          id: 'webbed',\n          name: 'Webbed Appendages',\n          tier: 1,\n          affinities: {\n            terrain_harshness: -0.4,\n            pressure_gravity: 0.1,\n            resource_scarcity: -0.1,\n            temperature: -0.2,\n            light_conditions: 0,\n            ether_density: 0\n          },\n          description: 'Limbs with membrane structures optimized for aquatic movement.',\n          connections: ['ether_sensing', 'thick_blubber']\n        }\n      ],\n      metabolism: [\n        {\n          id: 'carnivore',\n          name: 'Carnivore Digestion',\n          tier: 1,\n          affinities: {\n            resource_scarcity: 0.5,\n            temperature: 0.3,\n            terrain_harshness: 0.1,\n            light_conditions: 0,\n            pressure_gravity: 0,\n            ether_density: 0\n          },\n          description: 'Specialized digestive system optimized for meat processing.',\n          connections: ['enhanced_muscle', 'acute_vision']\n        },\n        {\n          id: 'omnivore',\n          name: 'Omnivore Adaptation',\n          tier: 1,\n          affinities: {\n            resource_scarcity: 0.6,\n            terrain_harshness: 0.2,\n            temperature: 0.1,\n            light_conditions: 0,\n            pressure_gravity: 0,\n            ether_density: 0\n          },\n          description: 'Versatile digestive system capable of processing diverse food sources.',\n          connections: ['bioluminescence', 'reflective_scales']\n        },\n        {\n          id: 'photosynthetic',\n          name: 'Photosynthetic Cells',\n          tier: 1,\n          affinities: {\n            light_conditions: 0.9,\n            resource_scarcity: 0.7,\n            temperature: 0.4,\n            terrain_harshness: -0.2,\n            pressure_gravity: 0,\n            ether_density: 0.1\n          },\n          description: 'Cellular structures that can convert light into energy.',\n          connections: ['ether_sensing', 'reflective_scales']\n        }\n      ],\n      sensory: [\n        {\n          id: 'acute_vision',\n          name: 'Acute Vision',\n          tier: 1,\n          affinities: {\n            light_conditions: 0.8,\n            terrain_harshness: 0.3,\n            resource_scarcity: 0.2,\n            temperature: 0,\n            pressure_gravity: 0,\n            ether_density: 0\n          },\n          description: 'Highly developed visual organs with exceptional acuity.',\n          connections: ['enhanced_muscle', 'eagle_eyes']\n        },\n        {\n          id: 'sonar_mapping',\n          name: 'Echolocation',\n          tier: 1,\n          affinities: {\n            light_conditions: -0.8,\n            terrain_harshness: 0.5,\n            pressure_gravity: 0.1,\n            temperature: 0,\n            resource_scarcity: 0,\n            ether_density: 0.2\n          },\n          description: 'Ability to emit and detect sound waves for environmental mapping.',\n          connections: ['vibration_detection', 'bioluminescence']\n        },\n        {\n          id: 'vibration_detection',\n          name: 'Vibration Detection',\n          tier: 1,\n          affinities: {\n            terrain_harshness: 0.6,\n            pressure_gravity: 0.4,\n            light_conditions: -0.3,\n            temperature: 0,\n            resource_scarcity: 0,\n            ether_density: 0.1\n          },\n          description: 'Specialized organs that can detect minute vibrations through various media.',\n          connections: ['sonar_mapping', 'thick_blubber']\n        }\n      ],\n      etheric: [\n        {\n          id: 'ether_sensing',\n          name: 'Ether Sensing',\n          tier: 1,\n          affinities: {\n            ether_density: 0.8,\n            light_conditions: 0.2,\n            terrain_harshness: 0,\n            temperature: 0,\n            resource_scarcity: 0,\n            pressure_gravity: 0.1\n          },\n          description: 'Specialized organs that can detect and interpret etheric energy patterns.',\n          connections: ['photosynthetic', 'ether_channeling']\n        },\n        {\n          id: 'ether_channeling',\n          name: 'Ether Channeling',\n          tier: 1,\n          affinities: {\n            ether_density: 0.9,\n            temperature: 0.3,\n            light_conditions: 0.3,\n            terrain_harshness: 0,\n            resource_scarcity: -0.2,\n            pressure_gravity: 0.1\n          },\n          description: 'Biological structures capable of directing and manipulating etheric energies.',\n          connections: ['ether_sensing', 'bioluminescence']\n        },\n        {\n          id: 'bioluminescence',\n          name: 'Bioluminescence',\n          tier: 1,\n          affinities: {\n            light_conditions: -0.6,\n            ether_density: 0.5,\n            resource_scarcity: -0.3,\n            temperature: 0,\n            terrain_harshness: 0,\n            pressure_gravity: 0\n          },\n          description: 'Ability to produce light through biochemical processes.',\n          connections: ['ether_channeling', 'omnivore']\n        }\n      ],\n      thermal: [\n        {\n          id: 'thick_blubber',\n          name: 'Thick Blubber',\n          tier: 1,\n          affinities: {\n            temperature: -0.8,\n            pressure_gravity: 0.3,\n            resource_scarcity: -0.4,\n            terrain_harshness: 0.1,\n            light_conditions: 0,\n            ether_density: 0\n          },\n          description: 'Dense fatty tissue layer providing insulation in cold environments.',\n          connections: ['vibration_detection', 'enhanced_muscle']\n        },\n        {\n          id: 'reflective_scales',\n          name: 'Reflective Scales',\n          tier: 1,\n          affinities: {\n            temperature: 0.7,\n            light_conditions: 0.6,\n            terrain_harshness: 0.3,\n            resource_scarcity: -0.2,\n            pressure_gravity: 0,\n            ether_density: 0.1\n          },\n          description: 'Light-reflecting scales that help regulate heat absorption.',\n          connections: ['running', 'photosynthetic']\n        },\n        {\n          id: 'heat_vents',\n          name: 'Heat Vents',\n          tier: 1,\n          affinities: {\n            temperature: 0.8,\n            ether_density: 0.3,\n            resource_scarcity: -0.3,\n            terrain_harshness: 0,\n            light_conditions: 0,\n            pressure_gravity: 0\n          },\n          description: 'Specialized structures that can rapidly dissipate excess heat.',\n          connections: ['running', 'ether_channeling']\n        }\n      ]\n    };\n    \n    // Advanced traits (tier 2)\n    const advancedTraits = {\n      sensory: [\n        {\n          id: 'eagle_eyes',\n          name: 'Eagle-like Vision',\n          tier: 2,\n          affinities: {\n            light_conditions: 0.9,\n            terrain_harshness: 0.5,\n            resource_scarcity: 0.4,\n            temperature: 0,\n            pressure_gravity: 0,\n            ether_density: 0.1\n          },\n          description: 'Exceptionally developed vision with incredible range and detail perception.',\n          connections: ['acute_vision']\n        }\n      ],\n      locomotion: [\n        {\n          id: 'enhanced_muscle',\n          name: 'Enhanced Musculature',\n          tier: 2,\n          affinities: {\n            terrain_harshness: 0.8,\n            pressure_gravity: 0.7,\n            resource_scarcity: -0.4,\n            temperature: 0.1,\n            light_conditions: 0,\n            ether_density: 0\n          },\n          description: 'Highly developed muscle structures with exceptional strength and endurance.',\n          connections: ['running', 'climbing', 'carnivore', 'acute_vision', 'thick_blubber']\n        }\n      ]\n    };\n    \n    // Specialized traits for each body shape (could add more to make these unique)\n    const specializedTraits = {\n      bipedal: {\n        locomotion: [\n          {\n            id: 'bipedal_agility',\n            name: 'Bipedal Agility',\n            tier: 2,\n            affinities: {\n              terrain_harshness: 0.8,\n              pressure_gravity: 0.5,\n              resource_scarcity: -0.2,\n              temperature: 0.2,\n              light_conditions: 0.3,\n              ether_density: 0\n            },\n            description: 'Specialized balance and coordination optimized for upright movement.',\n            connections: ['running', 'climbing']\n          }\n        ]\n      },\n      quadrupedal: {\n        locomotion: [\n          {\n            id: 'quadrupedal_stability',\n            name: 'Quadrupedal Stability',\n            tier: 2,\n            affinities: {\n              terrain_harshness: 0.9,\n              pressure_gravity: 0.7,\n              resource_scarcity: -0.1,\n              temperature: 0.1,\n              light_conditions: 0.1,\n              ether_density: 0\n            },\n            description: 'Enhanced stability and load-bearing capacity from four-limb structure.',\n            connections: ['running', 'enhanced_muscle']\n          }\n        ]\n      },\n      serpentine: {\n        locomotion: [\n          {\n            id: 'serpentine_flexibility',\n            name: 'Serpentine Flexibility',\n            tier: 2,\n            affinities: {\n              terrain_harshness: 0.7,\n              pressure_gravity: 0.4,\n              resource_scarcity: -0.1,\n              temperature: 0.1,\n              light_conditions: 0,\n              ether_density: 0.1\n            },\n            description: 'Extreme body flexibility allowing navigation of confined spaces.',\n            connections: ['vibration_detection', 'reflective_scales']\n          }\n        ]\n      },\n      // Similar specialized traits could be added for other body shapes\n      amorphous: {},\n      insectoid: {},\n      avian: {},\n      aquatic: {}\n    };\n    \n    // Combine base traits with specialized traits for the selected body shape\n    const allTraits = { ...baseTraits };\n    \n    // Add advanced traits\n    Object.keys(advancedTraits).forEach(category => {\n      if (!allTraits[category]) allTraits[category] = [];\n      allTraits[category] = [...allTraits[category], ...advancedTraits[category]];\n    });\n    \n    // Add body-shape specific traits\n    if (specializedTraits[bodyShapeId]) {\n      Object.keys(specializedTraits[bodyShapeId]).forEach(category => {\n        if (!allTraits[category]) allTraits[category] = [];\n        allTraits[category] = [...allTraits[category], ...specializedTraits[bodyShapeId][category]];\n      });\n    }\n    \n    return allTraits;\n  };\n  \n  // Get all traits as flattened array\n  const getAllTraits = () => {\n    const traitsByCategory = getTraitsByBodyShape(selectedBodyShape);\n    const allTraits = [];\n    \n    Object.keys(traitsByCategory).forEach(category => {\n      traitsByCategory[category].forEach(trait => {\n        allTraits.push({\n          ...trait,\n          category\n        });\n      });\n    });\n    \n    return allTraits;\n  };\n  \n  // Find trait by ID (useful for looking up connections)\n  const findTraitById = (id) => {\n    const allTraits = getAllTraits();\n    return allTraits.find(trait => trait.id === id);\n  };\n  \n  // This function is available for custom positioning if needed later\n  // Currently using direct calculation in the canvas setup\n  /* const calculatePosition = (index, total, tier, radius = 180) => {\n    const angle = (index / total) * 2 * Math.PI;\n    const tierMultiplier = tier === 1 ? 1 : 1.8; // Tier 2 is further out\n    const x = Math.cos(angle) * radius * tierMultiplier;\n    const y = Math.sin(angle) * radius * tierMultiplier;\n    return { x, y };\n  }; */\n  \n  // Calculate trait affinity compatibility\n  const calculateCompatibility = (trait1, trait2) => {\n    const stressors = ['terrain_harshness', 'resource_scarcity', 'light_conditions', \n                       'ether_density', 'temperature', 'pressure_gravity'];\n    \n    let totalSimilarity = 0;\n    let totalWeight = 0;\n    \n    stressors.forEach(stressor => {\n      const val1 = trait1.affinities[stressor] || 0;\n      const val2 = trait2.affinities[stressor] || 0;\n      \n      // Calculate similarity (1 for identical, 0 for completely opposite)\n      const similarity = 1 - Math.min(1, Math.abs(val1 - val2) / 2);\n      \n      // Weight based on how important this stressor is to either trait\n      const weight = (Math.abs(val1) + Math.abs(val2)) / 2;\n      \n      totalSimilarity += similarity * (1 + weight * 0.5);\n      totalWeight += 1;\n    });\n    \n    // Calculate compatibility score (0.3 to 1.0)\n    return 0.3 + 0.5 * (totalSimilarity / (totalWeight * 1.5));\n  };\n  \n  // Calculate environmental relevance\n  const calculateEnvironmentalRelevance = (trait) => {\n    let relevanceScore = 0;\n    \n    Object.keys(environment).forEach(stressor => {\n      const stressorValue = environment[stressor];\n      const traitAffinity = trait.affinities[stressor] || 0;\n      \n      // Calculate how well this trait addresses this stressor\n      // For positive stressors, positive affinity increases relevance\n      // For negative stressors, negative affinity increases relevance\n      relevanceScore += Math.abs(stressorValue) * stressorValue * traitAffinity;\n    });\n    \n    // Normalize using hyperbolic tangent\n    return Math.tanh(relevanceScore);\n  };\n  \n  // Track mouse position for background parallax effect\n  const handleMouseMove = (e) => {\n    setCursorPosition({ x: e.clientX, y: e.clientY });\n  };\n  \n  // Initialize animation on first render\n  useEffect(() => {\n    // Set loaded state after a short delay for animation purposes\n    const timer = setTimeout(() => {\n      setIsLoaded(true);\n    }, 800);\n    \n    return () => clearTimeout(timer);\n  }, []);\n  \n  // Set up the canvas and animation when component mounts or selected body shape changes\n  useEffect(() => {\n    if (!canvasRef.current || !containerRef.current) return;\n    \n    // Memoize the functions to prevent dependency issues\n    const getTraits = getAllTraits;\n    const findTrait = findTraitById;\n    const calculateRelevance = calculateEnvironmentalRelevance;\n    const categoryData = [...traitCategories];\n    \n    const canvas = canvasRef.current;\n    const container = containerRef.current;\n    const ctx = canvas.getContext('2d');\n    \n    // Set canvas dimensions\n    const updateCanvasDimensions = () => {\n      const rect = container.getBoundingClientRect();\n      canvas.width = rect.width;\n      canvas.height = rect.height;\n    };\n    \n    updateCanvasDimensions();\n    window.addEventListener('resize', updateCanvasDimensions);\n    \n    // Create a map of node positions by trait ID\n    const traitPositions = {};\n    \n    // Prepare traits data\n    const traitsData = getTraits();\n    const traitCategoryMap = {};\n    \n    // Group traits by category to calculate positions\n    traitsData.forEach(trait => {\n      if (!traitCategoryMap[trait.category]) {\n        traitCategoryMap[trait.category] = [];\n      }\n      traitCategoryMap[trait.category].push(trait);\n    });\n    \n    // Calculate positions for all traits\n    Object.keys(traitCategoryMap).forEach((category, categoryIndex) => {\n      const traits = traitCategoryMap[category];\n      const categoryTraitCount = traits.length;\n      \n      traits.forEach((trait, index) => {\n        // Calculate position based on category and tier\n        const categoryOffset = (categoryIndex / Object.keys(traitCategoryMap).length) * 2 * Math.PI;\n        const traitOffset = (index / categoryTraitCount) * (2 * Math.PI / Object.keys(traitCategoryMap).length);\n        const angle = categoryOffset + traitOffset;\n        \n        const tierMultiplier = trait.tier === 1 ? 1 : 1.8; // Tier 2 is further out\n        const radius = Math.min(canvas.width, canvas.height) * 0.25; // 25% of min canvas dimension\n        \n        const x = canvas.width / 2 + Math.cos(angle) * radius * tierMultiplier;\n        const y = canvas.height / 2 + Math.sin(angle) * radius * tierMultiplier;\n        \n        traitPositions[trait.id] = { x, y, trait };\n      });\n    });\n    \n    // Animation function for drawing the network\n    const animate = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      \n      // Draw connections first (so they appear behind nodes)\n      traitsData.forEach(trait => {\n        if (trait.connections && trait.connections.length > 0) {\n          const startPos = traitPositions[trait.id];\n          \n          trait.connections.forEach(connectionId => {\n            const endPos = traitPositions[connectionId];\n            \n            if (startPos && endPos) {\n              // Find the connected trait object\n              const connectedTrait = findTrait(connectionId);\n              \n              if (connectedTrait) {\n                // Calculate compatibility for line color\n                const compatibility = calculateCompatibility(trait, connectedTrait);\n                \n                // Set line style based on compatibility\n                ctx.beginPath();\n                ctx.moveTo(startPos.x, startPos.y);\n                ctx.lineTo(endPos.x, endPos.y);\n                ctx.lineWidth = 2;\n                \n                // Color gradient based on compatibility (yellow to white for higher compatibility)\n                const colorIntensity = Math.floor(compatibility * 255);\n                ctx.strokeStyle = `rgba(${colorIntensity}, ${colorIntensity}, ${Math.min(120, colorIntensity)}, ${0.3 + compatibility * 0.6})`;\n                \n                // Add glow for selected trait\n                if (selectedTrait && (trait.id === selectedTrait.id || connectionId === selectedTrait.id)) {\n                  ctx.shadowColor = 'rgba(255, 253, 227, 0.6)';\n                  ctx.shadowBlur = 10;\n                  ctx.lineWidth = 3;\n                } else {\n                  ctx.shadowBlur = 0;\n                }\n                \n                ctx.stroke();\n              }\n            }\n          });\n        }\n      });\n      \n      // Draw center shape\n      ctx.beginPath();\n      ctx.arc(canvas.width / 2, canvas.height / 2, 40, 0, 2 * Math.PI);\n      ctx.fillStyle = 'rgba(160, 142, 97, 0.8)';\n      ctx.shadowColor = 'rgba(160, 142, 97, 0.6)';\n      ctx.shadowBlur = 20;\n      ctx.fill();\n      \n      // Draw body shape text\n      ctx.font = 'bold 14px Arial';\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillText('Body', canvas.width / 2, canvas.height / 2 - 8);\n      ctx.fillText('Shape', canvas.width / 2, canvas.height / 2 + 8);\n      \n      // Draw nodes for each trait\n      Object.keys(traitPositions).forEach(traitId => {\n        const { x, y, trait } = traitPositions[traitId];\n        const category = trait.category;\n        const categoryObj = categoryData.find(c => c.id === category);\n        const categoryColor = categoryObj ? categoryObj.color : '#BFAD7F';\n        \n        // Calculate node size based on tier and selection\n        const isSelected = selectedTrait && selectedTrait.id === traitId;\n        const baseSize = trait.tier === 1 ? 15 : 20;\n        const nodeSize = isSelected ? baseSize * 1.3 : baseSize;\n        \n        // Calculate environmental relevance for glow intensity\n        const relevance = calculateRelevance(trait);\n        const normalizedRelevance = (relevance + 1) / 2; // Convert from -1..1 to 0..1\n        \n        // Draw node\n        ctx.beginPath();\n        ctx.arc(x, y, nodeSize, 0, 2 * Math.PI);\n        \n        // Fill with category color\n        ctx.fillStyle = categoryColor;\n        \n        // Add glow effect based on environmental relevance\n        ctx.shadowColor = 'rgba(255, 253, 227, 0.8)';\n        ctx.shadowBlur = 10 + normalizedRelevance * 15;\n        \n        ctx.fill();\n        \n        // Draw border for selected trait\n        if (isSelected) {\n          ctx.beginPath();\n          ctx.arc(x, y, nodeSize + 3, 0, 2 * Math.PI);\n          ctx.strokeStyle = 'rgba(255, 255, 255, 0.8)';\n          ctx.lineWidth = 2;\n          ctx.stroke();\n        }\n        \n        // Reset shadow for text\n        ctx.shadowBlur = 0;\n        \n        // Store position in nodeRefs for hover detection\n        nodeRefs.current[traitId] = { x, y, radius: nodeSize, trait };\n      });\n      \n      // Request next animation frame\n      animationFrameRef.current = requestAnimationFrame(animate);\n    };\n    \n    // Start animation\n    animate();\n    \n    // Cleanup on unmount\n    return () => {\n      window.removeEventListener('resize', updateCanvasDimensions);\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [selectedBodyShape, selectedTrait, environment, getAllTraits, findTraitById, calculateEnvironmentalRelevance, traitCategories, calculateCompatibility]);\n  \n  // Handle canvas clicks to select traits\n  const handleCanvasClick = (e) => {\n    if (!canvasRef.current || !containerRef.current) return;\n    \n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    \n    // Check center body shape first (40 pixel radius)\n    const centerX = canvas.width / 2;\n    const centerY = canvas.height / 2;\n    \n    if (Math.sqrt((x - centerX) ** 2 + (y - centerY) ** 2) <= 40) {\n      // Clicked on body shape - show body shape selection\n      setSelectedTrait(null);\n      return;\n    }\n    \n    // Check if clicked on any trait node\n    let clicked = false;\n    \n    Object.keys(nodeRefs.current).forEach(traitId => {\n      const node = nodeRefs.current[traitId];\n      const distance = Math.sqrt((x - node.x) ** 2 + (y - node.y) ** 2);\n      \n      if (distance <= node.radius) {\n        setSelectedTrait(node.trait);\n        clicked = true;\n      }\n    });\n    \n    // If clicked outside any node, deselect\n    if (!clicked) {\n      setSelectedTrait(null);\n    }\n  };\n  \n  // Handle environment parameter changes\n  const handleEnvironmentChange = (stressor, value) => {\n    setEnvironment(prev => ({\n      ...prev,\n      [stressor]: parseFloat(value)\n    }));\n  };\n  \n  // Handle body shape change\n  const handleBodyShapeChange = (shapeId) => {\n    setSelectedBodyShape(shapeId);\n    setSelectedTrait(null);\n  };\n  \n  // Tooltip content for when a trait is selected\n  const renderTraitTooltip = () => {\n    if (!selectedTrait) return null;\n    \n    const trait = selectedTrait;\n    const categoryObj = traitCategories.find(c => c.id === trait.category);\n    \n    return (\n      <motion.div \n        className=\"trait-tooltip\"\n        initial={{ opacity: 0, y: 10 }}\n        animate={{ opacity: 1, y: 0 }}\n        exit={{ opacity: 0, y: 10 }}\n        transition={{ duration: 0.3 }}\n        style={{\n          position: 'absolute',\n          bottom: '20px',\n          left: '50%',\n          transform: 'translateX(-50%)',\n          backgroundColor: 'rgba(15, 15, 15, 0.85)',\n          border: `1px solid ${categoryObj?.color || '#BFAD7F'}`,\n          borderRadius: '4px',\n          padding: '16px',\n          width: '320px',\n          zIndex: 10,\n          boxShadow: '0 4px 20px rgba(0, 0, 0, 0.5)',\n          color: '#e0e0e0'\n        }}\n      >\n        <h3 style={{ \n          color: categoryObj?.color || '#BFAD7F', \n          marginTop: 0, \n          borderBottom: `1px solid rgba(${categoryObj?.color || '#BFAD7F'}, 0.3)`,\n          paddingBottom: '8px'\n        }}>\n          {trait.name}\n        </h3>\n        \n        <div style={{ fontSize: '14px', opacity: 0.8, marginBottom: '12px' }}>\n          {trait.description}\n        </div>\n        \n        <div style={{ \n          display: 'grid', \n          gridTemplateColumns: 'repeat(2, 1fr)', \n          gap: '8px',\n          fontSize: '12px'\n        }}>\n          {Object.entries(trait.affinities).map(([stressor, value]) => {\n            // Only show non-zero affinities\n            if (value === 0) return null;\n            \n            // Format stressor name\n            const stressorName = stressor.split('_').map(word => \n              word.charAt(0).toUpperCase() + word.slice(1)\n            ).join(' ');\n            \n            // Determine color based on value\n            const valueColor = value > 0 ? 'rgb(100, 200, 100)' : 'rgb(200, 100, 100)';\n            \n            return (\n              <div key={stressor} style={{ display: 'flex', justifyContent: 'space-between' }}>\n                <span>{stressorName}:</span>\n                <span style={{ color: valueColor }}>\n                  {value > 0 ? '+' : ''}{value.toFixed(1)}\n                </span>\n              </div>\n            );\n          })}\n        </div>\n        \n        <div style={{ \n          marginTop: '12px', \n          paddingTop: '12px',\n          borderTop: '1px solid rgba(160, 142, 97, 0.3)',\n          fontSize: '12px',\n          color: '#BFAD7F'\n        }}>\n          <div>Tier {trait.tier} {categoryObj?.name} Trait</div>\n          <div>Environmental Relevance: {calculateEnvironmentalRelevance(trait).toFixed(2)}</div>\n        </div>\n      </motion.div>\n    );\n  };\n  \n  // Render environment controls\n  const renderEnvironmentControls = () => {\n    const stressors = [\n      { id: 'temperature', name: 'Temperature', min: -1, max: 1 },\n      { id: 'light_conditions', name: 'Light Conditions', min: -1, max: 1 },\n      { id: 'terrain_harshness', name: 'Terrain Harshness', min: -1, max: 1 },\n      { id: 'resource_scarcity', name: 'Resource Scarcity', min: -1, max: 1 },\n      { id: 'ether_density', name: 'Ether Density', min: -1, max: 1 },\n      { id: 'pressure_gravity', name: 'Pressure/Gravity', min: -1, max: 1 }\n    ];\n    \n    return (\n      <div className=\"environment-controls\" style={{\n        position: 'absolute',\n        right: '20px',\n        top: '20px',\n        backgroundColor: 'rgba(15, 15, 15, 0.7)',\n        border: '1px solid rgba(160, 142, 97, 0.2)',\n        borderRadius: '4px',\n        padding: '16px',\n        width: '280px',\n        zIndex: 5\n      }}>\n        <RevealText>\n          <h3 style={{ color: '#BFAD7F', marginTop: 0, marginBottom: '12px' }}>\n            Environment Parameters\n          </h3>\n        </RevealText>\n        \n        <div style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>\n          {stressors.map(stressor => (\n            <div key={stressor.id} style={{ display: 'flex', flexDirection: 'column', gap: '4px' }}>\n              <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n                <label style={{ fontSize: '14px', color: '#e0e0e0' }}>\n                  {stressor.name}\n                </label>\n                <span style={{ \n                  fontSize: '14px', \n                  color: environment[stressor.id] > 0 ? 'rgb(100, 200, 100)' : environment[stressor.id] < 0 ? 'rgb(200, 100, 100)' : '#e0e0e0' \n                }}>\n                  {environment[stressor.id].toFixed(1)}\n                </span>\n              </div>\n              <input\n                type=\"range\"\n                min={stressor.min}\n                max={stressor.max}\n                step=\"0.1\"\n                value={environment[stressor.id]}\n                onChange={(e) => handleEnvironmentChange(stressor.id, e.target.value)}\n                style={{\n                  width: '100%',\n                  accentColor: '#BFAD7F'\n                }}\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n  \n  // Render body shape selector\n  const renderBodyShapeSelector = () => {\n    return (\n      <div className=\"body-shape-selector\" style={{\n        position: 'absolute',\n        left: '20px',\n        top: '20px',\n        backgroundColor: 'rgba(15, 15, 15, 0.7)',\n        border: '1px solid rgba(160, 142, 97, 0.2)',\n        borderRadius: '4px',\n        padding: '16px',\n        width: '280px',\n        zIndex: 5\n      }}>\n        <RevealText>\n          <h3 style={{ color: '#BFAD7F', marginTop: 0, marginBottom: '12px' }}>\n            Body Shape\n          </h3>\n        </RevealText>\n        \n        <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n          {bodyShapes.map(shape => (\n            <div \n              key={shape.id}\n              onClick={() => handleBodyShapeChange(shape.id)}\n              style={{\n                padding: '10px',\n                backgroundColor: selectedBodyShape === shape.id ? 'rgba(160, 142, 97, 0.3)' : 'rgba(30, 30, 30, 0.6)',\n                borderRadius: '4px',\n                cursor: 'pointer',\n                border: selectedBodyShape === shape.id ? '1px solid rgba(160, 142, 97, 0.6)' : '1px solid transparent',\n                transition: 'all 0.2s ease'\n              }}\n            >\n              <div style={{ fontWeight: 'bold', color: '#BFAD7F' }}>{shape.name}</div>\n              <div style={{ fontSize: '12px', color: '#e0e0e0', marginTop: '4px' }}>{shape.description}</div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n  \n  // Title component with ScrollingTextAnimation\n  const renderTitle = () => {\n    return (\n      <div style={{ position: 'absolute', top: '20px', left: '50%', transform: 'translateX(-50%)', zIndex: 5, width: '100%', textAlign: 'center' }}>\n        <ScrollingTextAnimation\n          scrollConfig={{\n            startPosition: 0,\n            endPosition: 300,\n            initialY: -20,\n            finalY: 0,\n            clampValues: true\n          }}\n        >\n          <h1 style={{ \n            color: '#BFAD7F', \n            margin: 0, \n            fontSize: '32px',\n            textShadow: '0 2px 10px rgba(0, 0, 0, 0.7)'\n          }}>\n            Crescent Evolution System\n          </h1>\n          <p style={{ \n            color: '#e0e0e0', \n            margin: '8px 0 0', \n            fontSize: '16px',\n            maxWidth: '600px',\n            marginLeft: 'auto',\n            marginRight: 'auto',\n            textShadow: '0 1px 4px rgba(0, 0, 0, 0.8)'\n          }}>\n            Explore the interconnected trait network and see how traits evolve\n            in response to environmental pressures.\n          </p>\n        </ScrollingTextAnimation>\n      </div>\n    );\n  };\n  \n  return (\n    <div \n      className=\"evolution-simulator-concept-showcase\"\n      style={{ \n        position: 'relative', \n        width: '100%', \n        height: '100vh',\n        overflow: 'hidden',\n        backgroundColor: '#000'\n      }}\n      onMouseMove={handleMouseMove}\n    >\n      {/* Background with stars */}\n      <Background cursorPosition={cursorPosition} setCursorPosition={setCursorPosition} />\n      \n      {/* Meteor shower effect */}\n      <MeteorShower \n        height=\"100vh\"\n        zIndex={2}\n        trailColor=\"rgba(191, 173, 127, 0.8)\"\n        glowColor=\"rgba(207, 185, 130, 0.6)\"   \n        coreColor=\"rgba(255, 248, 220, 1)\"\n        meteorDensity={15}\n        meteorMinSize={1}\n        meteorMaxSize={2}\n        meteorSpeed={0.08}\n        trailLength={300}\n        trailSegments={80}\n        enableParallax={true}\n        parallaxIntensity={0.15}\n        mode=\"arc\"\n        staggered={true}\n      />\n      \n      {/* Title area */}\n      {renderTitle()}\n      \n      {/* Body shape selector */}\n      {renderBodyShapeSelector()}\n      \n      {/* Environment controls */}\n      {renderEnvironmentControls()}\n      \n      {/* Main network visualization */}\n      <div \n        ref={containerRef}\n        style={{ \n          position: 'absolute',\n          top: '0',\n          left: '0',\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          opacity: isLoaded ? 1 : 0,\n          transition: 'opacity 1s ease'\n        }}\n        onClick={handleCanvasClick}\n      >\n        <canvas \n          ref={canvasRef} \n          style={{ \n            position: 'absolute',\n            top: '0',\n            left: '0',\n            width: '100%',\n            height: '100%',\n            zIndex: 3\n          }}\n        />\n      </div>\n      \n      {/* Trait information tooltip */}\n      <AnimatePresence>\n        {selectedTrait && renderTraitTooltip()}\n      </AnimatePresence>\n      \n      {/* Instruction text */}\n      <div style={{ \n        position: 'absolute', \n        bottom: '15px', \n        left: '50%', \n        transform: 'translateX(-50%)',\n        color: 'rgba(191, 173, 127, 0.6)',\n        fontSize: '14px',\n        zIndex: 5,\n        textAlign: 'center',\n        width: '100%'\n      }}>\n        Click on a trait node to view details or adjust environment parameters to see how traits respond\n      </div>\n      \n      {/* Accessibility skip link */}\n      <a href=\"#content\" style={{ \n        position: 'absolute', \n        top: '-40px', \n        left: 0, \n        backgroundColor: '#BFAD7F', \n        color: '#000', \n        padding: '8px', \n        zIndex: 100,\n        transition: 'top 0.3s ease',\n        ':focus': { top: 0 }\n      }}>\n        Skip to main content\n      </a>\n    </div>\n  );\n};\n\nexport default EvolutionSimulatorConceptShowcase;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}