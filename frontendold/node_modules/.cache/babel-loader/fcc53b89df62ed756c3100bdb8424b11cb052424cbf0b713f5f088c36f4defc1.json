{"ast":null,"code":"var _jsxFileName = \"/home/valeria/Documents/Crucible/frontend/src/components/core/Background.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect, useCallback } from 'react';\n\n/**\n * Background Component\n * \n * Creates an immersive stellar background with realistic star particles\n * that provide depth without distracting from content.\n * \n * Features:\n * - Full viewport coverage with proper positioning\n * - Realistic star rendering with proper glow effects\n * - Extremely subtle parallax effect on scroll\n * - Optimized for performance across devices\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Background = () => {\n  _s();\n  // Refs for DOM elements and animation state\n  const containerRef = useRef(null);\n  const canvasRef = useRef(null);\n  const starsRef = useRef([]);\n  const animationFrameRef = useRef(null);\n  const lastTimeRef = useRef(0);\n  const scrollPositionRef = useRef(0);\n\n  // Component state\n  const [dimensions, setDimensions] = useState({\n    width: 0,\n    height: 0,\n    pixelRatio: 1\n  });\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [prefersReducedMotion, setPrefersReducedMotion] = useState(false);\n\n  // Configuration\n  const CONFIG = {\n    // Star parameters\n    starCount: 180,\n    // Increased star count for better coverage\n    starSizeMin: 0.8,\n    starSizeMax: 2.5,\n    starOpacityMin: 0.15,\n    starOpacityMax: 0.85,\n    // Motion and animation\n    baseMovementSpeed: 0.00015,\n    // Very subtle movement\n    pulseFrequency: 0.00004,\n    // Slower pulsing\n    pulseIntensity: 0.25,\n    // Subtle pulse\n\n    // Parallax effect\n    parallaxIntensity: 0.05,\n    // Extremely subtle parallax\n\n    // Performance parameters\n    maxFPS: 30,\n    useGlow: true\n  };\n\n  // Warm, golden color palette\n  const COLORS = {\n    // Main star colors (warm golden tones)\n    stars: ['rgba(255, 243, 200, alpha)',\n    // Warm yellow\n    'rgba(255, 231, 164, alpha)',\n    // Golden\n    'rgba(255, 236, 179, alpha)',\n    // Pale gold\n    'rgba(252, 249, 231, alpha)',\n    // Off-white gold\n    'rgba(255, 225, 205, alpha)' // Warm white (slight orange)\n    ],\n    // Background gradient colors\n    background: {\n      topColor: 'rgb(8, 8, 12)',\n      bottomColor: 'rgb(15, 15, 20)'\n    }\n  };\n\n  // Get color with opacity\n  const getColor = useCallback((baseColor, opacity) => {\n    const safeOpacity = Math.max(0, Math.min(1, opacity || 0));\n    return baseColor.replace(/alpha\\)$/, `${safeOpacity})`);\n  }, []);\n\n  // Detect reduced motion preference\n  useEffect(() => {\n    const reducedMotionQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\n    setPrefersReducedMotion(reducedMotionQuery.matches);\n    const handleReducedMotionChange = e => {\n      setPrefersReducedMotion(e.matches);\n    };\n    reducedMotionQuery.addEventListener('change', handleReducedMotionChange);\n    return () => {\n      reducedMotionQuery.removeEventListener('change', handleReducedMotionChange);\n    };\n  }, []);\n\n  // Track scroll position for parallax\n  useEffect(() => {\n    const handleScroll = () => {\n      scrollPositionRef.current = window.scrollY;\n    };\n    window.addEventListener('scroll', handleScroll, {\n      passive: true\n    });\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n  // Initialize canvas with proper resolution\n  const setupCanvas = useCallback(() => {\n    if (!canvasRef.current || !containerRef.current) return false;\n    const canvas = canvasRef.current;\n    const container = containerRef.current;\n\n    // Get viewport dimensions rather than container dimensions to ensure full coverage\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    const pixelRatio = window.devicePixelRatio || 1;\n\n    // Set canvas size accounting for pixel ratio\n    canvas.width = width * pixelRatio;\n    canvas.height = height * pixelRatio;\n    canvas.style.width = `${width}px`;\n    canvas.style.height = `${height}px`;\n\n    // Update dimensions state\n    setDimensions({\n      width,\n      height,\n      pixelRatio\n    });\n    return true;\n  }, []);\n\n  // Setup canvas resize observer\n  useEffect(() => {\n    const handleResize = () => {\n      if (setupCanvas()) {\n        // Reinitialize stars after resize\n        initializeStars();\n        setIsInitialized(true);\n      }\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Initial setup\n    setupCanvas();\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [setupCanvas]);\n\n  // Initialize stars with proper properties\n  const initializeStars = useCallback(() => {\n    if (!dimensions.width || !dimensions.height) return;\n\n    // Clear existing stars\n    starsRef.current = [];\n\n    // Create stars, ensuring good distribution across viewport\n    for (let i = 0; i < CONFIG.starCount; i++) {\n      const star = {};\n\n      // Position - distribute stars evenly across the entire viewport\n      star.x = Math.random() * dimensions.width;\n      star.y = Math.random() * dimensions.height;\n      star.z = Math.random() * 0.8 + 0.1; // Depth (0.1 to 0.9)\n\n      // Visual properties\n      star.size = (Math.random() * (CONFIG.starSizeMax - CONFIG.starSizeMin) + CONFIG.starSizeMin) * star.z;\n      star.baseOpacity = Math.random() * (CONFIG.starOpacityMax - CONFIG.starOpacityMin) + CONFIG.starOpacityMin;\n      star.opacity = star.baseOpacity;\n\n      // Animation properties\n      star.pulsePhase = Math.random() * Math.PI * 2;\n      star.pulseSpeed = Math.random() * 0.002 + 0.001;\n      star.movementSpeed = (Math.random() * 0.2 + 0.9) * CONFIG.baseMovementSpeed * (1.1 - star.z);\n\n      // Star shape properties - add variation for more realistic stars\n      star.rays = Math.random() > 0.7 ? Math.floor(Math.random() * 2) + 4 : 0; // Some stars have rays\n      star.rayLength = star.size * (Math.random() * 0.7 + 0.3);\n      star.rayIntensity = Math.random() * 0.4 + 0.3;\n\n      // Color variation\n      const colorIndex = Math.floor(Math.random() * COLORS.stars.length);\n      star.color = COLORS.stars[colorIndex];\n\n      // Store in ref\n      starsRef.current.push(star);\n    }\n  }, [dimensions, CONFIG, COLORS.stars]);\n\n  // Update animation state\n  const updateAnimation = useCallback((deltaTime, timestamp) => {\n    // Global time factor for animations\n    const timeFactor = timestamp * 0.001;\n\n    // Parallax effect from scroll - extremely subtle\n    const parallaxOffset = scrollPositionRef.current * CONFIG.parallaxIntensity;\n\n    // Motion dampening for reduced motion preference\n    const motionFactor = prefersReducedMotion ? 0.1 : 1;\n\n    // Update stars\n    for (let i = 0; i < starsRef.current.length; i++) {\n      const star = starsRef.current[i];\n\n      // Subtle movement based on time\n      star.x += Math.sin(timeFactor * 0.2 + star.pulsePhase) * star.movementSpeed * deltaTime * motionFactor;\n      star.y += Math.cos(timeFactor * 0.3 + star.pulsePhase * 1.3) * star.movementSpeed * deltaTime * motionFactor;\n\n      // Apply parallax offset based on depth (z) - extremely subtle\n      const starParallax = parallaxOffset * (1 - star.z) * 0.5;\n      star.parallaxY = starParallax;\n\n      // Wrap around screen edges with padding\n      const padding = 20;\n      if (star.x < -padding) star.x = dimensions.width + padding;\n      if (star.x > dimensions.width + padding) star.x = -padding;\n      if (star.y < -padding) star.y = dimensions.height + padding;\n      if (star.y > dimensions.height + padding) star.y = -padding;\n\n      // Subtle pulsing effect - more natural by combining multiple sine waves\n      const pulseFactor = (Math.sin(timeFactor * star.pulseSpeed + star.pulsePhase) * 0.5 + Math.sin(timeFactor * star.pulseSpeed * 0.4 + star.pulsePhase * 1.3) * 0.3) * 0.15 + 0.85;\n      star.opacity = star.baseOpacity * pulseFactor;\n\n      // Vary ray intensity based on pulse\n      if (star.rays > 0) {\n        star.currentRayIntensity = star.rayIntensity * pulseFactor;\n      }\n    }\n  }, [dimensions, CONFIG, prefersReducedMotion]);\n\n  // Render a more realistic star with optional rays\n  const drawStar = useCallback((ctx, star, y) => {\n    // Draw outer glow for all stars\n    const glowRadius = star.size * 2;\n    const gradient = ctx.createRadialGradient(star.x, y, 0, star.x, y, glowRadius);\n    gradient.addColorStop(0, getColor(star.color, star.opacity * 0.9));\n    gradient.addColorStop(0.5, getColor(star.color, star.opacity * 0.3));\n    gradient.addColorStop(1, getColor(star.color, 0));\n    ctx.beginPath();\n    ctx.fillStyle = gradient;\n    ctx.arc(star.x, y, glowRadius, 0, Math.PI * 2);\n    ctx.fill();\n\n    // Draw bright core\n    ctx.beginPath();\n    ctx.fillStyle = getColor(star.color, star.opacity);\n    ctx.arc(star.x, y, star.size * 0.5, 0, Math.PI * 2);\n    ctx.fill();\n\n    // Draw rays for some stars\n    if (star.rays > 0 && star.opacity > 0.3) {\n      ctx.save();\n      ctx.translate(star.x, y);\n      ctx.rotate(Math.sin(Date.now() * 0.0001) * 0.05); // Very slight rotation\n\n      for (let i = 0; i < star.rays; i++) {\n        const angle = i / star.rays * Math.PI * 2;\n        const rayLength = star.rayLength * (0.7 + Math.sin(Date.now() * 0.001 + i) * 0.3);\n        ctx.beginPath();\n        ctx.moveTo(0, 0);\n        ctx.lineTo(Math.cos(angle) * rayLength, Math.sin(angle) * rayLength);\n\n        // Create gradient for ray\n        const rayGradient = ctx.createLinearGradient(0, 0, Math.cos(angle) * rayLength, Math.sin(angle) * rayLength);\n        rayGradient.addColorStop(0, getColor(star.color, star.opacity * 0.9));\n        rayGradient.addColorStop(1, getColor(star.color, 0));\n        ctx.strokeStyle = rayGradient;\n        ctx.lineWidth = star.size * 0.3;\n        ctx.stroke();\n      }\n      ctx.restore();\n    }\n  }, [getColor]);\n\n  // Render the scene\n  const renderScene = useCallback(() => {\n    if (!canvasRef.current) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Apply device pixel ratio scaling\n    ctx.setTransform(dimensions.pixelRatio, 0, 0, dimensions.pixelRatio, 0, 0);\n\n    // Clear canvas\n    ctx.clearRect(0, 0, dimensions.width, dimensions.height);\n\n    // Draw background gradient\n    const gradient = ctx.createLinearGradient(0, 0, 0, dimensions.height);\n    gradient.addColorStop(0, COLORS.background.topColor);\n    gradient.addColorStop(1, COLORS.background.bottomColor);\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, dimensions.width, dimensions.height);\n\n    // Enable global composition for better glow effect\n    ctx.globalCompositeOperation = 'lighter';\n\n    // Draw stars\n    for (const star of starsRef.current) {\n      // Skip almost invisible stars\n      if (star.opacity < 0.02) continue;\n\n      // Apply parallax to star position (extremely subtle)\n      const y = star.y + (star.parallaxY || 0);\n\n      // Draw star with enhanced rendering\n      drawStar(ctx, star, y);\n    }\n\n    // Reset global composition\n    ctx.globalCompositeOperation = 'source-over';\n  }, [dimensions, COLORS, drawStar]);\n\n  // Main animation loop\n  const animate = useCallback(timestamp => {\n    if (!isInitialized) {\n      animationFrameRef.current = requestAnimationFrame(animate);\n      return;\n    }\n\n    // Calculate delta time with cap to prevent large jumps\n    const deltaTime = lastTimeRef.current ? Math.min(timestamp - lastTimeRef.current, 33) : 16;\n    lastTimeRef.current = timestamp;\n\n    // Update animation state\n    updateAnimation(deltaTime, timestamp);\n\n    // Render scene\n    renderScene();\n\n    // Schedule next frame\n    animationFrameRef.current = requestAnimationFrame(animate);\n  }, [isInitialized, updateAnimation, renderScene]);\n\n  // Initialize animation when component is ready\n  useEffect(() => {\n    if (!isInitialized && dimensions.width && dimensions.height) {\n      initializeStars();\n      setIsInitialized(true);\n    }\n  }, [dimensions, isInitialized, initializeStars]);\n\n  // Start animation loop\n  useEffect(() => {\n    if (!isInitialized) return;\n\n    // Start animation\n    animationFrameRef.current = requestAnimationFrame(animate);\n\n    // Cleanup\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [isInitialized, animate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    style: {\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      width: '100vw',\n      height: '100vh',\n      overflow: 'hidden',\n      zIndex: -1,\n      pointerEvents: 'none'\n    },\n    \"aria-hidden\": \"true\",\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 374,\n    columnNumber: 5\n  }, this);\n};\n_s(Background, \"i0PY5KWH58bYEPojZ41QeStBLSY=\");\n_c = Background;\nexport default Background;\nvar _c;\n$RefreshReg$(_c, \"Background\");","map":{"version":3,"names":["React","useRef","useState","useEffect","useCallback","jsxDEV","_jsxDEV","Background","_s","containerRef","canvasRef","starsRef","animationFrameRef","lastTimeRef","scrollPositionRef","dimensions","setDimensions","width","height","pixelRatio","isInitialized","setIsInitialized","prefersReducedMotion","setPrefersReducedMotion","CONFIG","starCount","starSizeMin","starSizeMax","starOpacityMin","starOpacityMax","baseMovementSpeed","pulseFrequency","pulseIntensity","parallaxIntensity","maxFPS","useGlow","COLORS","stars","background","topColor","bottomColor","getColor","baseColor","opacity","safeOpacity","Math","max","min","replace","reducedMotionQuery","window","matchMedia","matches","handleReducedMotionChange","e","addEventListener","removeEventListener","handleScroll","current","scrollY","passive","setupCanvas","canvas","container","innerWidth","innerHeight","devicePixelRatio","style","handleResize","initializeStars","i","star","x","random","y","z","size","baseOpacity","pulsePhase","PI","pulseSpeed","movementSpeed","rays","floor","rayLength","rayIntensity","colorIndex","length","color","push","updateAnimation","deltaTime","timestamp","timeFactor","parallaxOffset","motionFactor","sin","cos","starParallax","parallaxY","padding","pulseFactor","currentRayIntensity","drawStar","ctx","glowRadius","gradient","createRadialGradient","addColorStop","beginPath","fillStyle","arc","fill","save","translate","rotate","Date","now","angle","moveTo","lineTo","rayGradient","createLinearGradient","strokeStyle","lineWidth","stroke","restore","renderScene","getContext","setTransform","clearRect","fillRect","globalCompositeOperation","animate","requestAnimationFrame","cancelAnimationFrame","ref","position","top","left","overflow","zIndex","pointerEvents","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/valeria/Documents/Crucible/frontend/src/components/core/Background.jsx"],"sourcesContent":["import React, { useRef, useState, useEffect, useCallback } from 'react';\n\n/**\n * Background Component\n * \n * Creates an immersive stellar background with realistic star particles\n * that provide depth without distracting from content.\n * \n * Features:\n * - Full viewport coverage with proper positioning\n * - Realistic star rendering with proper glow effects\n * - Extremely subtle parallax effect on scroll\n * - Optimized for performance across devices\n */\nconst Background = () => {\n  // Refs for DOM elements and animation state\n  const containerRef = useRef(null);\n  const canvasRef = useRef(null);\n  const starsRef = useRef([]);\n  const animationFrameRef = useRef(null);\n  const lastTimeRef = useRef(0);\n  const scrollPositionRef = useRef(0);\n  \n  // Component state\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0, pixelRatio: 1 });\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [prefersReducedMotion, setPrefersReducedMotion] = useState(false);\n  \n  // Configuration\n  const CONFIG = {\n    // Star parameters\n    starCount: 180,       // Increased star count for better coverage\n    starSizeMin: 0.8,\n    starSizeMax: 2.5,\n    starOpacityMin: 0.15,\n    starOpacityMax: 0.85,\n    \n    // Motion and animation\n    baseMovementSpeed: 0.00015,  // Very subtle movement\n    pulseFrequency: 0.00004,     // Slower pulsing\n    pulseIntensity: 0.25,        // Subtle pulse\n    \n    // Parallax effect\n    parallaxIntensity: 0.05,     // Extremely subtle parallax\n    \n    // Performance parameters\n    maxFPS: 30,\n    useGlow: true\n  };\n  \n  // Warm, golden color palette\n  const COLORS = {\n    // Main star colors (warm golden tones)\n    stars: [\n      'rgba(255, 243, 200, alpha)', // Warm yellow\n      'rgba(255, 231, 164, alpha)', // Golden\n      'rgba(255, 236, 179, alpha)', // Pale gold\n      'rgba(252, 249, 231, alpha)', // Off-white gold\n      'rgba(255, 225, 205, alpha)'  // Warm white (slight orange)\n    ],\n    \n    // Background gradient colors\n    background: {\n      topColor: 'rgb(8, 8, 12)',\n      bottomColor: 'rgb(15, 15, 20)'\n    }\n  };\n  \n  // Get color with opacity\n  const getColor = useCallback((baseColor, opacity) => {\n    const safeOpacity = Math.max(0, Math.min(1, opacity || 0));\n    return baseColor.replace(/alpha\\)$/, `${safeOpacity})`);\n  }, []);\n  \n  // Detect reduced motion preference\n  useEffect(() => {\n    const reducedMotionQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\n    setPrefersReducedMotion(reducedMotionQuery.matches);\n    \n    const handleReducedMotionChange = (e) => {\n      setPrefersReducedMotion(e.matches);\n    };\n    \n    reducedMotionQuery.addEventListener('change', handleReducedMotionChange);\n    \n    return () => {\n      reducedMotionQuery.removeEventListener('change', handleReducedMotionChange);\n    };\n  }, []);\n  \n  // Track scroll position for parallax\n  useEffect(() => {\n    const handleScroll = () => {\n      scrollPositionRef.current = window.scrollY;\n    };\n    \n    window.addEventListener('scroll', handleScroll, { passive: true });\n    \n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n  \n  // Initialize canvas with proper resolution\n  const setupCanvas = useCallback(() => {\n    if (!canvasRef.current || !containerRef.current) return false;\n    \n    const canvas = canvasRef.current;\n    const container = containerRef.current;\n    \n    // Get viewport dimensions rather than container dimensions to ensure full coverage\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    const pixelRatio = window.devicePixelRatio || 1;\n    \n    // Set canvas size accounting for pixel ratio\n    canvas.width = width * pixelRatio;\n    canvas.height = height * pixelRatio;\n    canvas.style.width = `${width}px`;\n    canvas.style.height = `${height}px`;\n    \n    // Update dimensions state\n    setDimensions({\n      width,\n      height,\n      pixelRatio\n    });\n    \n    return true;\n  }, []);\n  \n  // Setup canvas resize observer\n  useEffect(() => {\n    const handleResize = () => {\n      if (setupCanvas()) {\n        // Reinitialize stars after resize\n        initializeStars();\n        setIsInitialized(true);\n      }\n    };\n    \n    window.addEventListener('resize', handleResize);\n    \n    // Initial setup\n    setupCanvas();\n    \n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [setupCanvas]);\n  \n  // Initialize stars with proper properties\n  const initializeStars = useCallback(() => {\n    if (!dimensions.width || !dimensions.height) return;\n    \n    // Clear existing stars\n    starsRef.current = [];\n    \n    // Create stars, ensuring good distribution across viewport\n    for (let i = 0; i < CONFIG.starCount; i++) {\n      const star = {};\n      \n      // Position - distribute stars evenly across the entire viewport\n      star.x = Math.random() * dimensions.width;\n      star.y = Math.random() * dimensions.height;\n      star.z = Math.random() * 0.8 + 0.1; // Depth (0.1 to 0.9)\n      \n      // Visual properties\n      star.size = (Math.random() * (CONFIG.starSizeMax - CONFIG.starSizeMin) + CONFIG.starSizeMin) * star.z;\n      star.baseOpacity = Math.random() * (CONFIG.starOpacityMax - CONFIG.starOpacityMin) + CONFIG.starOpacityMin;\n      star.opacity = star.baseOpacity;\n      \n      // Animation properties\n      star.pulsePhase = Math.random() * Math.PI * 2;\n      star.pulseSpeed = Math.random() * 0.002 + 0.001;\n      star.movementSpeed = (Math.random() * 0.2 + 0.9) * CONFIG.baseMovementSpeed * (1.1 - star.z);\n      \n      // Star shape properties - add variation for more realistic stars\n      star.rays = Math.random() > 0.7 ? Math.floor(Math.random() * 2) + 4 : 0; // Some stars have rays\n      star.rayLength = star.size * (Math.random() * 0.7 + 0.3);\n      star.rayIntensity = Math.random() * 0.4 + 0.3;\n      \n      // Color variation\n      const colorIndex = Math.floor(Math.random() * COLORS.stars.length);\n      star.color = COLORS.stars[colorIndex];\n      \n      // Store in ref\n      starsRef.current.push(star);\n    }\n  }, [dimensions, CONFIG, COLORS.stars]);\n  \n  // Update animation state\n  const updateAnimation = useCallback((deltaTime, timestamp) => {\n    // Global time factor for animations\n    const timeFactor = timestamp * 0.001;\n    \n    // Parallax effect from scroll - extremely subtle\n    const parallaxOffset = scrollPositionRef.current * CONFIG.parallaxIntensity;\n    \n    // Motion dampening for reduced motion preference\n    const motionFactor = prefersReducedMotion ? 0.1 : 1;\n    \n    // Update stars\n    for (let i = 0; i < starsRef.current.length; i++) {\n      const star = starsRef.current[i];\n      \n      // Subtle movement based on time\n      star.x += Math.sin(timeFactor * 0.2 + star.pulsePhase) * star.movementSpeed * deltaTime * motionFactor;\n      star.y += Math.cos(timeFactor * 0.3 + star.pulsePhase * 1.3) * star.movementSpeed * deltaTime * motionFactor;\n      \n      // Apply parallax offset based on depth (z) - extremely subtle\n      const starParallax = parallaxOffset * (1 - star.z) * 0.5;\n      star.parallaxY = starParallax;\n      \n      // Wrap around screen edges with padding\n      const padding = 20;\n      if (star.x < -padding) star.x = dimensions.width + padding;\n      if (star.x > dimensions.width + padding) star.x = -padding;\n      if (star.y < -padding) star.y = dimensions.height + padding;\n      if (star.y > dimensions.height + padding) star.y = -padding;\n      \n      // Subtle pulsing effect - more natural by combining multiple sine waves\n      const pulseFactor = (\n        Math.sin(timeFactor * star.pulseSpeed + star.pulsePhase) * 0.5 + \n        Math.sin(timeFactor * star.pulseSpeed * 0.4 + star.pulsePhase * 1.3) * 0.3\n      ) * 0.15 + 0.85;\n      \n      star.opacity = star.baseOpacity * pulseFactor;\n      \n      // Vary ray intensity based on pulse\n      if (star.rays > 0) {\n        star.currentRayIntensity = star.rayIntensity * pulseFactor;\n      }\n    }\n  }, [dimensions, CONFIG, prefersReducedMotion]);\n  \n  // Render a more realistic star with optional rays\n  const drawStar = useCallback((ctx, star, y) => {\n    // Draw outer glow for all stars\n    const glowRadius = star.size * 2;\n    const gradient = ctx.createRadialGradient(star.x, y, 0, star.x, y, glowRadius);\n    gradient.addColorStop(0, getColor(star.color, star.opacity * 0.9));\n    gradient.addColorStop(0.5, getColor(star.color, star.opacity * 0.3));\n    gradient.addColorStop(1, getColor(star.color, 0));\n    \n    ctx.beginPath();\n    ctx.fillStyle = gradient;\n    ctx.arc(star.x, y, glowRadius, 0, Math.PI * 2);\n    ctx.fill();\n    \n    // Draw bright core\n    ctx.beginPath();\n    ctx.fillStyle = getColor(star.color, star.opacity);\n    ctx.arc(star.x, y, star.size * 0.5, 0, Math.PI * 2);\n    ctx.fill();\n    \n    // Draw rays for some stars\n    if (star.rays > 0 && star.opacity > 0.3) {\n      ctx.save();\n      ctx.translate(star.x, y);\n      ctx.rotate(Math.sin(Date.now() * 0.0001) * 0.05); // Very slight rotation\n      \n      for (let i = 0; i < star.rays; i++) {\n        const angle = (i / star.rays) * Math.PI * 2;\n        const rayLength = star.rayLength * (0.7 + Math.sin(Date.now() * 0.001 + i) * 0.3);\n        \n        ctx.beginPath();\n        ctx.moveTo(0, 0);\n        ctx.lineTo(Math.cos(angle) * rayLength, Math.sin(angle) * rayLength);\n        \n        // Create gradient for ray\n        const rayGradient = ctx.createLinearGradient(\n          0, 0,\n          Math.cos(angle) * rayLength, Math.sin(angle) * rayLength\n        );\n        rayGradient.addColorStop(0, getColor(star.color, star.opacity * 0.9));\n        rayGradient.addColorStop(1, getColor(star.color, 0));\n        \n        ctx.strokeStyle = rayGradient;\n        ctx.lineWidth = star.size * 0.3;\n        ctx.stroke();\n      }\n      \n      ctx.restore();\n    }\n  }, [getColor]);\n  \n  // Render the scene\n  const renderScene = useCallback(() => {\n    if (!canvasRef.current) return;\n    \n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    \n    if (!ctx) return;\n    \n    // Apply device pixel ratio scaling\n    ctx.setTransform(dimensions.pixelRatio, 0, 0, dimensions.pixelRatio, 0, 0);\n    \n    // Clear canvas\n    ctx.clearRect(0, 0, dimensions.width, dimensions.height);\n    \n    // Draw background gradient\n    const gradient = ctx.createLinearGradient(0, 0, 0, dimensions.height);\n    gradient.addColorStop(0, COLORS.background.topColor);\n    gradient.addColorStop(1, COLORS.background.bottomColor);\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, dimensions.width, dimensions.height);\n    \n    // Enable global composition for better glow effect\n    ctx.globalCompositeOperation = 'lighter';\n    \n    // Draw stars\n    for (const star of starsRef.current) {\n      // Skip almost invisible stars\n      if (star.opacity < 0.02) continue;\n      \n      // Apply parallax to star position (extremely subtle)\n      const y = star.y + (star.parallaxY || 0);\n      \n      // Draw star with enhanced rendering\n      drawStar(ctx, star, y);\n    }\n    \n    // Reset global composition\n    ctx.globalCompositeOperation = 'source-over';\n  }, [dimensions, COLORS, drawStar]);\n  \n  // Main animation loop\n  const animate = useCallback((timestamp) => {\n    if (!isInitialized) {\n      animationFrameRef.current = requestAnimationFrame(animate);\n      return;\n    }\n    \n    // Calculate delta time with cap to prevent large jumps\n    const deltaTime = lastTimeRef.current ? Math.min(timestamp - lastTimeRef.current, 33) : 16;\n    lastTimeRef.current = timestamp;\n    \n    // Update animation state\n    updateAnimation(deltaTime, timestamp);\n    \n    // Render scene\n    renderScene();\n    \n    // Schedule next frame\n    animationFrameRef.current = requestAnimationFrame(animate);\n  }, [isInitialized, updateAnimation, renderScene]);\n  \n  // Initialize animation when component is ready\n  useEffect(() => {\n    if (!isInitialized && dimensions.width && dimensions.height) {\n      initializeStars();\n      setIsInitialized(true);\n    }\n  }, [dimensions, isInitialized, initializeStars]);\n  \n  // Start animation loop\n  useEffect(() => {\n    if (!isInitialized) return;\n    \n    // Start animation\n    animationFrameRef.current = requestAnimationFrame(animate);\n    \n    // Cleanup\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [isInitialized, animate]);\n  \n  return (\n    <div\n      ref={containerRef}\n      style={{\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        width: '100vw',\n        height: '100vh',\n        overflow: 'hidden',\n        zIndex: -1,\n        pointerEvents: 'none'\n      }}\n      aria-hidden=\"true\"\n    >\n      <canvas\n        ref={canvasRef}\n        style={{\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%',\n          height: '100%'\n        }}\n      />\n    </div>\n  );\n};\n\nexport default Background;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}