{"ast":null,"code":"var _jsxFileName = \"/home/valeria/Documents/Crucible/frontend/src/components/core/effects/holdereffects/ProjectCard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport ProjectCard from './HighPerformanceProjectCard';\n\n/**\n * ProjectCardsContainer\n * \n * A container component that manages the visibility of project cards\n * for performance optimization using the Intersection Observer API.\n * \n * This component:\n * 1. Only loads cards that are near the viewport\n * 2. Detects device capabilities and adjusts rendering accordingly\n * 3. Manages animation timing to prevent simultaneous animations\n * 4. Implements virtualization for large lists\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProjectCardsContainer = ({\n  projects,\n  onCardClick\n}) => {\n  _s();\n  // Track which cards are visible\n  const [visibleCardIds, setVisibleCardIds] = useState(new Set());\n\n  // Track device performance capability\n  const [isLowPerformanceDevice, setIsLowPerformanceDevice] = useState(false);\n\n  // Detect device capabilities on mount\n  useEffect(() => {\n    // Check for low-end device indicators\n    const checkDeviceCapabilities = () => {\n      // Check for reduced motion preference\n      const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n\n      // Check for low CPU cores (proxy for performance)\n      const hasLowCPU = navigator.hardwareConcurrency <= 4;\n\n      // Check for mobile device\n      const isMobileDevice = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n\n      // Check for memory constraints (new API, may not be available everywhere)\n      const hasLowMemory = navigator.deviceMemory !== undefined && navigator.deviceMemory < 4;\n\n      // Set low performance mode if any conditions are met\n      setIsLowPerformanceDevice(prefersReducedMotion || hasLowCPU || isMobileDevice && hasLowMemory);\n    };\n\n    // Run check\n    checkDeviceCapabilities();\n  }, []);\n\n  // Set up intersection observer\n  useEffect(() => {\n    // Only run in browser environment\n    if (typeof window === 'undefined' || typeof IntersectionObserver === 'undefined') {\n      return;\n    }\n\n    // Create an observer instance\n    const observer = new IntersectionObserver(entries => {\n      // Schedule visibility updates on next animation frame for performance\n      requestAnimationFrame(() => {\n        // Process new entries\n        const newVisibleIds = new Set(visibleCardIds);\n        entries.forEach(entry => {\n          const id = entry.target.dataset.projectId;\n          if (entry.isIntersecting) {\n            newVisibleIds.add(id);\n          }\n        });\n\n        // Only update state if there are changes\n        if (newVisibleIds.size !== visibleCardIds.size) {\n          setVisibleCardIds(newVisibleIds);\n        }\n      });\n    }, {\n      rootMargin: '200px 0px',\n      // Start loading before cards enter viewport\n      threshold: 0.1\n    });\n\n    // Observe all project card containers\n    const cardContainers = document.querySelectorAll('.project-card-container');\n    cardContainers.forEach(container => {\n      observer.observe(container);\n    });\n\n    // Cleanup\n    return () => {\n      cardContainers.forEach(container => {\n        observer.unobserve(container);\n      });\n    };\n  }, [visibleCardIds]);\n\n  // Optimize grid layout calculations\n  const gridStyles = useMemo(() => ({\n    display: 'grid',\n    gridTemplateColumns: 'repeat(auto-fill, minmax(300px, 1fr))',\n    gap: '2rem',\n    width: '100%'\n  }), []);\n\n  // Memoized card click handler\n  const handleCardClick = useCallback(project => {\n    if (onCardClick) onCardClick(project);\n  }, [onCardClick]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: gridStyles,\n    children: projects.map((project, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"project-card-container\",\n      \"data-project-id\": project.id || index,\n      style: {\n        minHeight: '420px'\n      } // Reserve space for card\n      ,\n      children: /*#__PURE__*/_jsxDEV(ProjectCard, {\n        project: project,\n        inView: visibleCardIds.has(project.id || index.toString()),\n        lowPerformanceMode: isLowPerformanceDevice,\n        onClick: handleCardClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this)\n    }, project.id || index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n_s(ProjectCardsContainer, \"b25f5O8C1hDawLX3O6E+5m5uTXY=\");\n_c = ProjectCardsContainer;\nexport default ProjectCardsContainer;\nvar _c;\n$RefreshReg$(_c, \"ProjectCardsContainer\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useMemo","ProjectCard","jsxDEV","_jsxDEV","ProjectCardsContainer","projects","onCardClick","_s","visibleCardIds","setVisibleCardIds","Set","isLowPerformanceDevice","setIsLowPerformanceDevice","checkDeviceCapabilities","prefersReducedMotion","window","matchMedia","matches","hasLowCPU","navigator","hardwareConcurrency","isMobileDevice","test","userAgent","hasLowMemory","deviceMemory","undefined","IntersectionObserver","observer","entries","requestAnimationFrame","newVisibleIds","forEach","entry","id","target","dataset","projectId","isIntersecting","add","size","rootMargin","threshold","cardContainers","document","querySelectorAll","container","observe","unobserve","gridStyles","display","gridTemplateColumns","gap","width","handleCardClick","project","style","children","map","index","className","minHeight","inView","has","toString","lowPerformanceMode","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/valeria/Documents/Crucible/frontend/src/components/core/effects/holdereffects/ProjectCard.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport ProjectCard from './HighPerformanceProjectCard';\n\n/**\n * ProjectCardsContainer\n * \n * A container component that manages the visibility of project cards\n * for performance optimization using the Intersection Observer API.\n * \n * This component:\n * 1. Only loads cards that are near the viewport\n * 2. Detects device capabilities and adjusts rendering accordingly\n * 3. Manages animation timing to prevent simultaneous animations\n * 4. Implements virtualization for large lists\n */\nconst ProjectCardsContainer = ({ projects, onCardClick }) => {\n  // Track which cards are visible\n  const [visibleCardIds, setVisibleCardIds] = useState(new Set());\n  \n  // Track device performance capability\n  const [isLowPerformanceDevice, setIsLowPerformanceDevice] = useState(false);\n  \n  // Detect device capabilities on mount\n  useEffect(() => {\n    // Check for low-end device indicators\n    const checkDeviceCapabilities = () => {\n      // Check for reduced motion preference\n      const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n      \n      // Check for low CPU cores (proxy for performance)\n      const hasLowCPU = navigator.hardwareConcurrency <= 4;\n      \n      // Check for mobile device\n      const isMobileDevice = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n      \n      // Check for memory constraints (new API, may not be available everywhere)\n      const hasLowMemory = navigator.deviceMemory !== undefined && navigator.deviceMemory < 4;\n      \n      // Set low performance mode if any conditions are met\n      setIsLowPerformanceDevice(prefersReducedMotion || hasLowCPU || (isMobileDevice && hasLowMemory));\n    };\n    \n    // Run check\n    checkDeviceCapabilities();\n  }, []);\n  \n  // Set up intersection observer\n  useEffect(() => {\n    // Only run in browser environment\n    if (typeof window === 'undefined' || typeof IntersectionObserver === 'undefined') {\n      return;\n    }\n    \n    // Create an observer instance\n    const observer = new IntersectionObserver(\n      (entries) => {\n        // Schedule visibility updates on next animation frame for performance\n        requestAnimationFrame(() => {\n          // Process new entries\n          const newVisibleIds = new Set(visibleCardIds);\n          \n          entries.forEach(entry => {\n            const id = entry.target.dataset.projectId;\n            if (entry.isIntersecting) {\n              newVisibleIds.add(id);\n            }\n          });\n          \n          // Only update state if there are changes\n          if (newVisibleIds.size !== visibleCardIds.size) {\n            setVisibleCardIds(newVisibleIds);\n          }\n        });\n      },\n      {\n        rootMargin: '200px 0px', // Start loading before cards enter viewport\n        threshold: 0.1\n      }\n    );\n    \n    // Observe all project card containers\n    const cardContainers = document.querySelectorAll('.project-card-container');\n    cardContainers.forEach(container => {\n      observer.observe(container);\n    });\n    \n    // Cleanup\n    return () => {\n      cardContainers.forEach(container => {\n        observer.unobserve(container);\n      });\n    };\n  }, [visibleCardIds]);\n  \n  // Optimize grid layout calculations\n  const gridStyles = useMemo(() => ({\n    display: 'grid',\n    gridTemplateColumns: 'repeat(auto-fill, minmax(300px, 1fr))',\n    gap: '2rem',\n    width: '100%'\n  }), []);\n  \n  // Memoized card click handler\n  const handleCardClick = useCallback((project) => {\n    if (onCardClick) onCardClick(project);\n  }, [onCardClick]);\n  \n  return (\n    <div style={gridStyles}>\n      {projects.map((project, index) => (\n        <div \n          key={project.id || index}\n          className=\"project-card-container\"\n          data-project-id={project.id || index}\n          style={{ minHeight: '420px' }} // Reserve space for card\n        >\n          <ProjectCard\n            project={project}\n            inView={visibleCardIds.has(project.id || index.toString())}\n            lowPerformanceMode={isLowPerformanceDevice}\n            onClick={handleCardClick}\n          />\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ProjectCardsContainer;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,EAAEC,OAAO,QAAQ,OAAO;AACxE,OAAOC,WAAW,MAAM,8BAA8B;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA,SAAAC,MAAA,IAAAC,OAAA;AAYA,MAAMC,qBAAqB,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EAC3D;EACA,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGZ,QAAQ,CAAC,IAAIa,GAAG,CAAC,CAAC,CAAC;;EAE/D;EACA,MAAM,CAACC,sBAAsB,EAAEC,yBAAyB,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;;EAE3E;EACAC,SAAS,CAAC,MAAM;IACd;IACA,MAAMe,uBAAuB,GAAGA,CAAA,KAAM;MACpC;MACA,MAAMC,oBAAoB,GAAGC,MAAM,CAACC,UAAU,CAAC,kCAAkC,CAAC,CAACC,OAAO;;MAE1F;MACA,MAAMC,SAAS,GAAGC,SAAS,CAACC,mBAAmB,IAAI,CAAC;;MAEpD;MACA,MAAMC,cAAc,GAAG,gEAAgE,CAACC,IAAI,CAACH,SAAS,CAACI,SAAS,CAAC;;MAEjH;MACA,MAAMC,YAAY,GAAGL,SAAS,CAACM,YAAY,KAAKC,SAAS,IAAIP,SAAS,CAACM,YAAY,GAAG,CAAC;;MAEvF;MACAb,yBAAyB,CAACE,oBAAoB,IAAII,SAAS,IAAKG,cAAc,IAAIG,YAAa,CAAC;IAClG,CAAC;;IAED;IACAX,uBAAuB,CAAC,CAAC;EAC3B,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAf,SAAS,CAAC,MAAM;IACd;IACA,IAAI,OAAOiB,MAAM,KAAK,WAAW,IAAI,OAAOY,oBAAoB,KAAK,WAAW,EAAE;MAChF;IACF;;IAEA;IACA,MAAMC,QAAQ,GAAG,IAAID,oBAAoB,CACtCE,OAAO,IAAK;MACX;MACAC,qBAAqB,CAAC,MAAM;QAC1B;QACA,MAAMC,aAAa,GAAG,IAAIrB,GAAG,CAACF,cAAc,CAAC;QAE7CqB,OAAO,CAACG,OAAO,CAACC,KAAK,IAAI;UACvB,MAAMC,EAAE,GAAGD,KAAK,CAACE,MAAM,CAACC,OAAO,CAACC,SAAS;UACzC,IAAIJ,KAAK,CAACK,cAAc,EAAE;YACxBP,aAAa,CAACQ,GAAG,CAACL,EAAE,CAAC;UACvB;QACF,CAAC,CAAC;;QAEF;QACA,IAAIH,aAAa,CAACS,IAAI,KAAKhC,cAAc,CAACgC,IAAI,EAAE;UAC9C/B,iBAAiB,CAACsB,aAAa,CAAC;QAClC;MACF,CAAC,CAAC;IACJ,CAAC,EACD;MACEU,UAAU,EAAE,WAAW;MAAE;MACzBC,SAAS,EAAE;IACb,CACF,CAAC;;IAED;IACA,MAAMC,cAAc,GAAGC,QAAQ,CAACC,gBAAgB,CAAC,yBAAyB,CAAC;IAC3EF,cAAc,CAACX,OAAO,CAACc,SAAS,IAAI;MAClClB,QAAQ,CAACmB,OAAO,CAACD,SAAS,CAAC;IAC7B,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACXH,cAAc,CAACX,OAAO,CAACc,SAAS,IAAI;QAClClB,QAAQ,CAACoB,SAAS,CAACF,SAAS,CAAC;MAC/B,CAAC,CAAC;IACJ,CAAC;EACH,CAAC,EAAE,CAACtC,cAAc,CAAC,CAAC;;EAEpB;EACA,MAAMyC,UAAU,GAAGjD,OAAO,CAAC,OAAO;IAChCkD,OAAO,EAAE,MAAM;IACfC,mBAAmB,EAAE,uCAAuC;IAC5DC,GAAG,EAAE,MAAM;IACXC,KAAK,EAAE;EACT,CAAC,CAAC,EAAE,EAAE,CAAC;;EAEP;EACA,MAAMC,eAAe,GAAGvD,WAAW,CAAEwD,OAAO,IAAK;IAC/C,IAAIjD,WAAW,EAAEA,WAAW,CAACiD,OAAO,CAAC;EACvC,CAAC,EAAE,CAACjD,WAAW,CAAC,CAAC;EAEjB,oBACEH,OAAA;IAAKqD,KAAK,EAAEP,UAAW;IAAAQ,QAAA,EACpBpD,QAAQ,CAACqD,GAAG,CAAC,CAACH,OAAO,EAAEI,KAAK,kBAC3BxD,OAAA;MAEEyD,SAAS,EAAC,wBAAwB;MAClC,mBAAiBL,OAAO,CAACrB,EAAE,IAAIyB,KAAM;MACrCH,KAAK,EAAE;QAAEK,SAAS,EAAE;MAAQ,CAAE,CAAC;MAAA;MAAAJ,QAAA,eAE/BtD,OAAA,CAACF,WAAW;QACVsD,OAAO,EAAEA,OAAQ;QACjBO,MAAM,EAAEtD,cAAc,CAACuD,GAAG,CAACR,OAAO,CAACrB,EAAE,IAAIyB,KAAK,CAACK,QAAQ,CAAC,CAAC,CAAE;QAC3DC,kBAAkB,EAAEtD,sBAAuB;QAC3CuD,OAAO,EAAEZ;MAAgB;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1B;IAAC,GAVGf,OAAO,CAACrB,EAAE,IAAIyB,KAAK;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAWrB,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC/D,EAAA,CA/GIH,qBAAqB;AAAAmE,EAAA,GAArBnE,qBAAqB;AAiH3B,eAAeA,qBAAqB;AAAC,IAAAmE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}