{"ast":null,"code":"var _jsxFileName = \"/home/valeria/Documents/Crucible/frontend/src/components/sections/codex/creators/creatorshowcase/EvolutionSimulatorConceptShowcase.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport Background from '../../../../core/Background';\nimport MeteorShower from '../../../../core/effects/cosmiceffects/MeteorShower';\nimport EvoSimShowCaseBar from './evosimutils/EvoSimShowcaseBar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = createUseStyles({\n  visualizationContainer: {\n    position: 'relative',\n    flex: 1,\n    overflow: 'hidden'\n  },\n  networkCanvas: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    cursor: 'grab',\n    '&:active': {\n      cursor: 'grabbing'\n    }\n  },\n  categoryFilters: {\n    position: 'absolute',\n    bottom: '1rem',\n    left: '50%',\n    transform: 'translateX(-50%)',\n    backgroundColor: 'rgba(15, 15, 20, 0.8)',\n    borderRadius: '30px',\n    padding: '0.5rem',\n    display: 'flex',\n    gap: '0.5rem',\n    zIndex: 50,\n    boxShadow: '0 4px 15px rgba(0, 0, 0, 0.3)',\n    border: '1px solid rgba(191, 173, 127, 0.2)'\n  },\n  categoryButton: {\n    background: 'transparent',\n    border: 'none',\n    color: 'rgba(224, 224, 224, 0.7)',\n    padding: '0.35rem 0.75rem',\n    borderRadius: '20px',\n    fontSize: '0.85rem',\n    cursor: 'pointer',\n    transition: 'all 0.2s ease',\n    '&:hover': {\n      color: '#e0e0e0',\n      backgroundColor: 'rgba(191, 173, 127, 0.1)'\n    }\n  },\n  categoryButtonActive: {\n    backgroundColor: 'rgba(191, 173, 127, 0.3)',\n    color: '#e0e0e0'\n  }\n});\nconst EvolutionSimulator = () => {\n  _s();\n  const classes = useStyles();\n\n  // State for cursor position (for background effect)\n  const [cursorPosition, setCursorPosition] = useState({\n    x: 0,\n    y: 0\n  });\n\n  // Evolution simulation states\n  const [selectedBodyShape, setSelectedBodyShape] = useState('quadrupedal');\n  const [activeTab, setActiveTab] = useState('traits');\n  const [visualizationMode, setVisualizationMode] = useState('direct');\n  const [showEmergence, setShowEmergence] = useState(false);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [selectedTraits, setSelectedTraits] = useState({});\n\n  // Environment state\n  const [environment, setEnvironment] = useState({\n    eldritch_influence: 0.5,\n    corruption_level: 0.5,\n    resource_scarcity: 0.5,\n    ambient_magic: 0.5,\n    darkness: 0.5\n  });\n\n  // Canvas and interaction refs\n  const canvasRef = useRef(null);\n  const containerRef = useRef(null);\n  const animationFrameRef = useRef(null);\n\n  // Define trait categories for filters\n  const traitCategories = [{\n    id: 'locomotion',\n    name: 'Locomotion',\n    color: '#7D6B9E'\n  }, {\n    id: 'metabolism',\n    name: 'Metabolism',\n    color: '#5C9D8B'\n  }, {\n    id: 'sensory',\n    name: 'Sensory Acuity',\n    color: '#C99846'\n  }, {\n    id: 'etheric',\n    name: 'Etheric Adaptation',\n    color: '#B54B4B'\n  }, {\n    id: 'thermal',\n    name: 'Thermal Regulation',\n    color: '#A67C52'\n  }];\n\n  // Handle mouse movement for background effect\n  const handleMouseMove = e => {\n    setCursorPosition({\n      x: e.clientX,\n      y: e.clientY\n    });\n  };\n\n  // Set up canvas for visualization\n  useEffect(() => {\n    if (!canvasRef.current || !containerRef.current) return;\n    const canvas = canvasRef.current;\n    const container = containerRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Set up canvas dimensions\n    const updateCanvasDimensions = () => {\n      const rect = container.getBoundingClientRect();\n      canvas.width = rect.width;\n      canvas.height = rect.height;\n    };\n    updateCanvasDimensions();\n    window.addEventListener('resize', updateCanvasDimensions);\n\n    // Animation function for the network visualization\n    const animate = () => {\n      // Clear canvas\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Draw network visualization based on current state\n      // This would contain the visualization logic adapted to the current:\n      // - visualizationMode ('direct', 'tree', 'category')\n      // - selectedBodyShape\n      // - selectedTraits\n      // - selectedCategory filter\n      // - environment settings\n\n      // Simple placeholder drawing\n      const centerX = canvas.width / 2;\n      const centerY = canvas.height / 2;\n\n      // Draw center node\n      ctx.beginPath();\n      ctx.arc(centerX, centerY, 50, 0, Math.PI * 2);\n      ctx.fillStyle = 'rgba(191, 173, 127, 0.8)';\n      ctx.fill();\n      ctx.strokeStyle = 'white';\n      ctx.lineWidth = 2;\n      ctx.stroke();\n      ctx.font = 'bold 16px Arial';\n      ctx.fillStyle = 'black';\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(selectedBodyShape.toUpperCase(), centerX, centerY);\n\n      // Continue animation\n      animationFrameRef.current = requestAnimationFrame(animate);\n    };\n    animate();\n    return () => {\n      window.removeEventListener('resize', updateCanvasDimensions);\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [selectedBodyShape, visualizationMode, selectedCategory, selectedTraits, environment]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.evolutionSimulator,\n    onMouseMove: handleMouseMove,\n    children: [/*#__PURE__*/_jsxDEV(Background, {\n      cursorPosition: cursorPosition,\n      setCursorPosition: setCursorPosition\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MeteorShower, {\n      height: \"100vh\",\n      zIndex: 2,\n      trailColor: \"rgba(191, 173, 127, 0.8)\",\n      glowColor: \"rgba(207, 185, 130, 0.6)\",\n      coreColor: \"rgba(255, 248, 220, 1)\",\n      meteorDensity: 15,\n      meteorMinSize: 1,\n      meteorMaxSize: 2,\n      meteorSpeed: 0.08,\n      trailLength: 300,\n      trailSegments: 80,\n      enableParallax: true,\n      parallaxIntensity: 0.15,\n      mode: \"arc\",\n      staggered: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EvoSimShowCaseBar, {\n      selectedBodyShape: selectedBodyShape,\n      onBodyShapeChange: setSelectedBodyShape,\n      activeTab: activeTab,\n      onTabChange: setActiveTab,\n      visualizationMode: visualizationMode,\n      onVisualizationModeChange: setVisualizationMode,\n      environment: environment,\n      onEnvironmentChange: setEnvironment,\n      showEmergence: showEmergence,\n      onToggleEmergence: () => setShowEmergence(!showEmergence),\n      selectedTraits: selectedTraits,\n      onTraitChange: (category, traitId) => {\n        setSelectedTraits(prev => ({\n          ...prev,\n          [category]: traitId\n        }));\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: containerRef,\n      className: classes.visualizationContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        className: classes.networkCanvas\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.categoryFilters,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `${classes.categoryButton} ${selectedCategory === null ? classes.categoryButtonActive : ''}`,\n          onClick: () => setSelectedCategory(null),\n          children: \"All Traits\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }, this), traitCategories.map(category => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `${classes.categoryButton} ${selectedCategory === category.id ? classes.categoryButtonActive : ''}`,\n          onClick: () => setSelectedCategory(category.id),\n          style: {\n            borderBottom: `2px solid ${category.color}`\n          },\n          children: category.name\n        }, category.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n};\n_s(EvolutionSimulator, \"yk6b095jbqV03mwE43aoeLN9G1E=\", false, function () {\n  return [useStyles];\n});\n_c = EvolutionSimulator;\nexport default EvolutionSimulator;\nvar _c;\n$RefreshReg$(_c, \"EvolutionSimulator\");","map":{"version":3,"names":["React","useState","useEffect","useRef","createUseStyles","Background","MeteorShower","EvoSimShowCaseBar","jsxDEV","_jsxDEV","useStyles","visualizationContainer","position","flex","overflow","networkCanvas","top","left","cursor","categoryFilters","bottom","transform","backgroundColor","borderRadius","padding","display","gap","zIndex","boxShadow","border","categoryButton","background","color","fontSize","transition","categoryButtonActive","EvolutionSimulator","_s","classes","cursorPosition","setCursorPosition","x","y","selectedBodyShape","setSelectedBodyShape","activeTab","setActiveTab","visualizationMode","setVisualizationMode","showEmergence","setShowEmergence","selectedCategory","setSelectedCategory","selectedTraits","setSelectedTraits","environment","setEnvironment","eldritch_influence","corruption_level","resource_scarcity","ambient_magic","darkness","canvasRef","containerRef","animationFrameRef","traitCategories","id","name","handleMouseMove","e","clientX","clientY","current","canvas","container","ctx","getContext","updateCanvasDimensions","rect","getBoundingClientRect","width","height","window","addEventListener","animate","clearRect","centerX","centerY","beginPath","arc","Math","PI","fillStyle","fill","strokeStyle","lineWidth","stroke","font","textAlign","textBaseline","fillText","toUpperCase","requestAnimationFrame","removeEventListener","cancelAnimationFrame","className","evolutionSimulator","onMouseMove","children","fileName","_jsxFileName","lineNumber","columnNumber","trailColor","glowColor","coreColor","meteorDensity","meteorMinSize","meteorMaxSize","meteorSpeed","trailLength","trailSegments","enableParallax","parallaxIntensity","mode","staggered","onBodyShapeChange","onTabChange","onVisualizationModeChange","onEnvironmentChange","onToggleEmergence","onTraitChange","category","traitId","prev","ref","onClick","map","style","borderBottom","_c","$RefreshReg$"],"sources":["/home/valeria/Documents/Crucible/frontend/src/components/sections/codex/creators/creatorshowcase/EvolutionSimulatorConceptShowcase.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport Background from '../../../../core/Background';\nimport MeteorShower from '../../../../core/effects/cosmiceffects/MeteorShower';\nimport EvoSimShowCaseBar from './evosimutils/EvoSimShowcaseBar';\n\nconst useStyles = createUseStyles({\n  \n  visualizationContainer: {\n    position: 'relative',\n    flex: 1,\n    overflow: 'hidden'\n  },\n  \n  networkCanvas: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    cursor: 'grab',\n    '&:active': {\n      cursor: 'grabbing'\n    }\n  },\n  \n  categoryFilters: {\n    position: 'absolute',\n    bottom: '1rem',\n    left: '50%',\n    transform: 'translateX(-50%)',\n    backgroundColor: 'rgba(15, 15, 20, 0.8)',\n    borderRadius: '30px',\n    padding: '0.5rem',\n    display: 'flex',\n    gap: '0.5rem',\n    zIndex: 50,\n    boxShadow: '0 4px 15px rgba(0, 0, 0, 0.3)',\n    border: '1px solid rgba(191, 173, 127, 0.2)'\n  },\n  \n  categoryButton: {\n    background: 'transparent',\n    border: 'none',\n    color: 'rgba(224, 224, 224, 0.7)',\n    padding: '0.35rem 0.75rem',\n    borderRadius: '20px',\n    fontSize: '0.85rem',\n    cursor: 'pointer',\n    transition: 'all 0.2s ease',\n    '&:hover': {\n      color: '#e0e0e0',\n      backgroundColor: 'rgba(191, 173, 127, 0.1)'\n    }\n  },\n  \n  categoryButtonActive: {\n    backgroundColor: 'rgba(191, 173, 127, 0.3)',\n    color: '#e0e0e0'\n  }\n});\n\nconst EvolutionSimulator = () => {\n  const classes = useStyles();\n  \n  // State for cursor position (for background effect)\n  const [cursorPosition, setCursorPosition] = useState({ x: 0, y: 0 });\n  \n  // Evolution simulation states\n  const [selectedBodyShape, setSelectedBodyShape] = useState('quadrupedal');\n  const [activeTab, setActiveTab] = useState('traits');\n  const [visualizationMode, setVisualizationMode] = useState('direct');\n  const [showEmergence, setShowEmergence] = useState(false);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [selectedTraits, setSelectedTraits] = useState({});\n  \n  // Environment state\n  const [environment, setEnvironment] = useState({\n    eldritch_influence: 0.5,\n    corruption_level: 0.5,\n    resource_scarcity: 0.5,\n    ambient_magic: 0.5,\n    darkness: 0.5\n  });\n  \n  // Canvas and interaction refs\n  const canvasRef = useRef(null);\n  const containerRef = useRef(null);\n  const animationFrameRef = useRef(null);\n  \n  // Define trait categories for filters\n  const traitCategories = [\n    { id: 'locomotion', name: 'Locomotion', color: '#7D6B9E' },\n    { id: 'metabolism', name: 'Metabolism', color: '#5C9D8B' },\n    { id: 'sensory', name: 'Sensory Acuity', color: '#C99846' },\n    { id: 'etheric', name: 'Etheric Adaptation', color: '#B54B4B' },\n    { id: 'thermal', name: 'Thermal Regulation', color: '#A67C52' }\n  ];\n  \n  // Handle mouse movement for background effect\n  const handleMouseMove = (e) => {\n    setCursorPosition({ x: e.clientX, y: e.clientY });\n  };\n  \n  // Set up canvas for visualization\n  useEffect(() => {\n    if (!canvasRef.current || !containerRef.current) return;\n    \n    const canvas = canvasRef.current;\n    const container = containerRef.current;\n    const ctx = canvas.getContext('2d');\n    \n    // Set up canvas dimensions\n    const updateCanvasDimensions = () => {\n      const rect = container.getBoundingClientRect();\n      canvas.width = rect.width;\n      canvas.height = rect.height;\n    };\n    \n    updateCanvasDimensions();\n    window.addEventListener('resize', updateCanvasDimensions);\n    \n    // Animation function for the network visualization\n    const animate = () => {\n      // Clear canvas\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      \n      // Draw network visualization based on current state\n      // This would contain the visualization logic adapted to the current:\n      // - visualizationMode ('direct', 'tree', 'category')\n      // - selectedBodyShape\n      // - selectedTraits\n      // - selectedCategory filter\n      // - environment settings\n      \n      // Simple placeholder drawing\n      const centerX = canvas.width / 2;\n      const centerY = canvas.height / 2;\n      \n      // Draw center node\n      ctx.beginPath();\n      ctx.arc(centerX, centerY, 50, 0, Math.PI * 2);\n      ctx.fillStyle = 'rgba(191, 173, 127, 0.8)';\n      ctx.fill();\n      ctx.strokeStyle = 'white';\n      ctx.lineWidth = 2;\n      ctx.stroke();\n      \n      ctx.font = 'bold 16px Arial';\n      ctx.fillStyle = 'black';\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(selectedBodyShape.toUpperCase(), centerX, centerY);\n      \n      // Continue animation\n      animationFrameRef.current = requestAnimationFrame(animate);\n    };\n    \n    animate();\n    \n    return () => {\n      window.removeEventListener('resize', updateCanvasDimensions);\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [\n    selectedBodyShape, \n    visualizationMode, \n    selectedCategory,\n    selectedTraits,\n    environment\n  ]);\n  \n  return (\n    <div \n      className={classes.evolutionSimulator}\n      onMouseMove={handleMouseMove}\n    >\n      {/* Background effects */}\n      <Background cursorPosition={cursorPosition} setCursorPosition={setCursorPosition} />\n      <MeteorShower \n        height=\"100vh\"\n        zIndex={2}\n        trailColor=\"rgba(191, 173, 127, 0.8)\"\n        glowColor=\"rgba(207, 185, 130, 0.6)\"\n        coreColor=\"rgba(255, 248, 220, 1)\"\n        meteorDensity={15}\n        meteorMinSize={1}\n        meteorMaxSize={2}\n        meteorSpeed={0.08}\n        trailLength={300}\n        trailSegments={80}\n        enableParallax={true}\n        parallaxIntensity={0.15}\n        mode=\"arc\"\n        staggered={true}\n      />\n      \n      {/* Navigation Bar Component */}\n      <EvoSimShowCaseBar\n        selectedBodyShape={selectedBodyShape}\n        onBodyShapeChange={setSelectedBodyShape}\n        activeTab={activeTab}\n        onTabChange={setActiveTab}\n        visualizationMode={visualizationMode}\n        onVisualizationModeChange={setVisualizationMode}\n        environment={environment}\n        onEnvironmentChange={setEnvironment}\n        showEmergence={showEmergence}\n        onToggleEmergence={() => setShowEmergence(!showEmergence)}\n        selectedTraits={selectedTraits}\n        onTraitChange={(category, traitId) => {\n          setSelectedTraits(prev => ({\n            ...prev,\n            [category]: traitId\n          }));\n        }}\n      />\n      \n      {/* Main Visualization */}\n      <div \n        ref={containerRef}\n        className={classes.visualizationContainer}\n      >\n        <canvas \n          ref={canvasRef}\n          className={classes.networkCanvas}\n        />\n        \n        {/* Category filter buttons */}\n        <div className={classes.categoryFilters}>\n          <button \n            className={`${classes.categoryButton} ${selectedCategory === null ? classes.categoryButtonActive : ''}`}\n            onClick={() => setSelectedCategory(null)}\n          >\n            All Traits\n          </button>\n          \n          {traitCategories.map(category => (\n            <button \n              key={category.id}\n              className={`${classes.categoryButton} ${selectedCategory === category.id ? classes.categoryButtonActive : ''}`}\n              onClick={() => setSelectedCategory(category.id)}\n              style={{ \n                borderBottom: `2px solid ${category.color}`\n              }}\n            >\n              {category.name}\n            </button>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default EvolutionSimulator;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}