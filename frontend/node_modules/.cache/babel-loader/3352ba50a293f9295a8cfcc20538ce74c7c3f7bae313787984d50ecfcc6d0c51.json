{"ast":null,"code":"var _jsxFileName = \"/home/valeria/Documents/Crucible/frontend/src/components/sections/codex/creators/creatorshowcase/EvolutionSimulatorConceptShowcase.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { motion, AnimatePresence, useInView } from 'framer-motion';\nimport Background from '../../../core/Background';\nimport MeteorShower from '../../../../core/effects/cosmiceffects/MeteorShower';\nimport ScrollingTextAnimation from '../../../../core/effects/ScrollingTextAnimation';\nimport RevealText from '../../../../core/effects/RevealText';\nimport useStyles from './evolutionSimulatorStyles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EvolutionSimulator = () => {\n  _s();\n  // State management\n  const [cursorPosition, setCursorPosition] = useState({\n    x: 0,\n    y: 0\n  });\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [selectedBodyShape, setSelectedBodyShape] = useState('quadrupedal');\n  const [selectedTrait, setSelectedTrait] = useState(null);\n  const [selectedTraitConnections, setSelectedTraitConnections] = useState([]);\n  const [showBodyShapeSelector, setShowBodyShapeSelector] = useState(false);\n  const [totalEffectiveStress, setTotalEffectiveStress] = useState(0);\n  const [adaptationProbability, setAdaptationProbability] = useState(0);\n  const [hoveredTrait, setHoveredTrait] = useState(null);\n  const [showAllTraits, setShowAllTraits] = useState(true);\n  const [filterMode, setFilterMode] = useState('all'); // 'all', 'category', 'relevance'\n\n  // Environment state with default values\n  const [environment, setEnvironment] = useState({\n    temperature: 0.4,\n    light_conditions: 0.3,\n    terrain_harshness: 0.5,\n    resource_scarcity: 0.2,\n    ether_density: 0.6,\n    pressure_gravity: 0.4\n  });\n\n  // Canvas and animation refs\n  const canvasRef = useRef(null);\n  const containerRef = useRef(null);\n  const networkRef = useRef(null);\n  const animationFrameRef = useRef(null);\n  const bodyShapeIconRef = useRef(null);\n  const traitRefs = useRef({});\n  const headerRef = useRef(null);\n  const contentRef = useRef(null);\n\n  // Header in view animation\n  const headerInView = useInView(headerRef, {\n    once: true,\n    threshold: 0.2\n  });\n  const contentInView = useInView(contentRef, {\n    once: true,\n    threshold: 0.1\n  });\n\n  // Custom styling hook\n  const classes = useStyles();\n\n  // Body shapes data with icons and elemental affiliations\n  const bodyShapes = [{\n    id: 'bipedal',\n    name: 'Bipedal',\n    description: 'Upright forms with manipulative upper limbs',\n    icon: '⚡',\n    // Lightning symbol for bipedal\n    element: 'Air',\n    color: '#7D6B9E'\n  }, {\n    id: 'quadrupedal',\n    name: 'Quadrupedal',\n    description: 'Four-limbed forms optimized for stability and movement',\n    icon: '⛰️',\n    // Mountain for quadrupedal\n    element: 'Earth',\n    color: '#A67C52'\n  }, {\n    id: 'serpentine',\n    name: 'Serpentine',\n    description: 'Elongated, limbless forms specialized for flexibility',\n    icon: '∫',\n    // Integral symbol representing curves\n    element: 'Void',\n    color: '#5C9D8B'\n  }, {\n    id: 'amorphous',\n    name: 'Amorphous',\n    description: 'Malleable forms without fixed structure',\n    icon: '~',\n    // Tilde for amorphous\n    element: 'Ether',\n    color: '#C99846'\n  }, {\n    id: 'insectoid',\n    name: 'Multi-limbed',\n    description: 'Multi-limbed, segmented forms',\n    icon: '∏',\n    // Pi symbol for multiple limbs\n    element: 'Flesh',\n    color: '#B54B4B'\n  }, {\n    id: 'avian',\n    name: 'Avian',\n    description: 'Forms optimized for flight and aerial movement',\n    icon: '⩜',\n    // Wind symbol for avian\n    element: 'Sky',\n    color: '#7D6B9E'\n  }, {\n    id: 'aquatic',\n    name: 'Aquatic',\n    description: 'Forms specialized for water environments',\n    icon: '≈',\n    // Water symbol for aquatic\n    element: 'Water',\n    color: '#5C9D8B'\n  }];\n\n  // Trait categories with color assignments\n  const traitCategories = [{\n    id: 'locomotion',\n    name: 'Locomotion',\n    color: '#7D6B9E'\n  }, {\n    id: 'metabolism',\n    name: 'Metabolism',\n    color: '#5C9D8B'\n  }, {\n    id: 'sensory',\n    name: 'Sensory Acuity',\n    color: '#C99846'\n  }, {\n    id: 'etheric',\n    name: 'Etheric Adaptation',\n    color: '#B54B4B'\n  }, {\n    id: 'thermal',\n    name: 'Thermal Regulation',\n    color: '#A67C52'\n  }];\n\n  // Get traits based on selected body shape\n  const getTraitsByBodyShape = bodyShapeId => {\n    // Base traits that all body shapes share\n    const baseTraits = {\n      locomotion: [{\n        id: 'running',\n        name: 'Swift Limbs',\n        tier: 1,\n        affinities: {\n          terrain_harshness: 0.7,\n          pressure_gravity: 0.4,\n          temperature: 0.2,\n          resource_scarcity: -0.3,\n          light_conditions: 0.1,\n          ether_density: 0\n        },\n        description: 'Limbs designed for quick locomotion across varied terrain.',\n        connections: ['enhanced_muscle', 'reflective_scales'],\n        compatible: ['quadrupedal', 'bipedal', 'insectoid'],\n        synthesis: {\n          condition: 'high_stress',\n          result: {\n            name: 'Phase Shifting Appendages',\n            description: 'Limbs that can temporarily phase through solid matter, allowing movement through obstacles.'\n          }\n        }\n      }, {\n        id: 'climbing',\n        name: 'Grasping Appendages',\n        tier: 1,\n        affinities: {\n          terrain_harshness: 0.8,\n          pressure_gravity: 0.3,\n          resource_scarcity: -0.2,\n          temperature: 0,\n          light_conditions: 0.1,\n          ether_density: 0\n        },\n        description: 'Specialized limb structures with superior grip for vertical movement.',\n        connections: ['enhanced_muscle', 'sonar_mapping'],\n        compatible: ['bipedal', 'quadrupedal', 'insectoid'],\n        synthesis: {\n          condition: 'extreme_gravity',\n          result: {\n            name: 'Gravity-Defying Grips',\n            description: 'Appendages capable of selectively negating gravitational forces at contact points.'\n          }\n        }\n      }, {\n        id: 'webbed',\n        name: 'Webbed Appendages',\n        tier: 1,\n        affinities: {\n          terrain_harshness: -0.4,\n          pressure_gravity: 0.1,\n          resource_scarcity: -0.1,\n          temperature: -0.2,\n          light_conditions: 0,\n          ether_density: 0\n        },\n        description: 'Limbs with membrane structures optimized for aquatic movement.',\n        connections: ['ether_sensing', 'thick_blubber'],\n        compatible: ['aquatic', 'bipedal', 'quadrupedal'],\n        synthesis: {\n          condition: 'aquatic_etheric',\n          result: {\n            name: 'Dimensional Current Webs',\n            description: 'Membranes that can manipulate water currents through subtle etheric manipulations.'\n          }\n        }\n      }, {\n        id: 'slithering',\n        name: 'Sinuous Musculature',\n        tier: 1,\n        affinities: {\n          terrain_harshness: 0.5,\n          pressure_gravity: 0.3,\n          resource_scarcity: -0.1,\n          temperature: 0.2,\n          light_conditions: -0.2,\n          ether_density: 0\n        },\n        description: 'Highly coordinated muscle structure allowing movement without limbs.',\n        connections: ['vibration_detection', 'reflective_scales'],\n        compatible: ['serpentine'],\n        synthesis: {\n          condition: 'extreme_adaptability',\n          result: {\n            name: 'Undulatory Phase Motion',\n            description: 'Movement through wave-like dimensional shifts rather than physical undulation.'\n          }\n        }\n      }, {\n        id: 'flight',\n        name: 'Aerial Locomotion',\n        tier: 1,\n        affinities: {\n          terrain_harshness: -0.3,\n          pressure_gravity: -0.7,\n          resource_scarcity: -0.2,\n          temperature: 0.1,\n          light_conditions: 0.6,\n          ether_density: 0.2\n        },\n        description: 'Wing structures and lightweight skeletal system enabling flight.',\n        connections: ['acute_vision', 'heat_vents'],\n        compatible: ['avian', 'insectoid'],\n        synthesis: {\n          condition: 'ethereal_skies',\n          result: {\n            name: 'Aetheric Glide',\n            description: 'Wings that interact with etheric currents, enabling flight through magical energy rather than air.'\n          }\n        }\n      }, {\n        id: 'shapeshifting',\n        name: 'Morphic Structure',\n        tier: 1,\n        affinities: {\n          terrain_harshness: 0.3,\n          pressure_gravity: 0.2,\n          resource_scarcity: -0.3,\n          temperature: 0.1,\n          light_conditions: 0,\n          ether_density: 0.6\n        },\n        description: 'Fluid body structure capable of adapting shape for mobility.',\n        connections: ['omnivore', 'ether_channeling'],\n        compatible: ['amorphous'],\n        synthesis: {\n          condition: 'etheric_saturation',\n          result: {\n            name: 'Dimensional Fluidity',\n            description: 'Ability to flow between dimensional planes, existing partially in multiple realities simultaneously.'\n          }\n        }\n      }],\n      metabolism: [{\n        id: 'carnivore',\n        name: 'Carnivore Digestion',\n        tier: 1,\n        affinities: {\n          resource_scarcity: 0.5,\n          temperature: 0.3,\n          terrain_harshness: 0.1,\n          light_conditions: 0,\n          pressure_gravity: 0,\n          ether_density: 0\n        },\n        description: 'Specialized digestive system optimized for meat processing.',\n        connections: ['enhanced_muscle', 'acute_vision'],\n        compatible: ['all'],\n        synthesis: {\n          condition: 'apex_predator',\n          result: {\n            name: 'Essence Extraction',\n            description: 'Ability to consume and metabolize the life essence of prey beyond mere physical substance.'\n          }\n        }\n      }, {\n        id: 'omnivore',\n        name: 'Omnivore Adaptation',\n        tier: 1,\n        affinities: {\n          resource_scarcity: 0.6,\n          terrain_harshness: 0.2,\n          temperature: 0.1,\n          light_conditions: 0,\n          pressure_gravity: 0,\n          ether_density: 0\n        },\n        description: 'Versatile digestive system capable of processing diverse food sources.',\n        connections: ['bioluminescence', 'reflective_scales'],\n        compatible: ['all'],\n        synthesis: {\n          condition: 'scarce_resources',\n          result: {\n            name: 'Universal Digestion',\n            description: 'Capacity to derive nutrients from almost any organic or inorganic substance.'\n          }\n        }\n      }, {\n        id: 'photosynthetic',\n        name: 'Photosynthetic Cells',\n        tier: 1,\n        affinities: {\n          light_conditions: 0.9,\n          resource_scarcity: 0.7,\n          temperature: 0.4,\n          terrain_harshness: -0.2,\n          pressure_gravity: 0,\n          ether_density: 0.1\n        },\n        description: 'Cellular structures that can convert light into energy.',\n        connections: ['ether_sensing', 'reflective_scales'],\n        compatible: ['all'],\n        synthesis: {\n          condition: 'high_light_ether',\n          result: {\n            name: 'Etheric Photosynthesis',\n            description: 'Advanced cells that can convert ambient etheric energy into biological energy.'\n          }\n        }\n      }, {\n        id: 'ether_consumption',\n        name: 'Ether Consumption',\n        tier: 1,\n        affinities: {\n          ether_density: 0.9,\n          resource_scarcity: 0.6,\n          temperature: -0.1,\n          terrain_harshness: -0.1,\n          pressure_gravity: 0,\n          light_conditions: -0.3\n        },\n        description: 'Metabolic pathway that processes ambient etheric energy.',\n        connections: ['ether_channeling', 'bioluminescence'],\n        compatible: ['all'],\n        synthesis: {\n          condition: 'etheric_saturation',\n          result: {\n            name: 'Reality Consumption',\n            description: 'Ability to metabolize the fabric of reality itself, subsisting on dimensional energies.'\n          }\n        }\n      }],\n      sensory: [{\n        id: 'acute_vision',\n        name: 'Acute Vision',\n        tier: 1,\n        affinities: {\n          light_conditions: 0.8,\n          terrain_harshness: 0.3,\n          resource_scarcity: 0.2,\n          temperature: 0,\n          pressure_gravity: 0,\n          ether_density: 0\n        },\n        description: 'Highly developed visual organs with exceptional acuity.',\n        connections: ['enhanced_muscle', 'eagle_eyes'],\n        compatible: ['all'],\n        synthesis: {\n          condition: 'extreme_light',\n          result: {\n            name: 'Reality Perception',\n            description: 'Vision that perceives multiple planes of reality simultaneously, seeing beyond physical existence.'\n          }\n        }\n      }, {\n        id: 'sonar_mapping',\n        name: 'Echolocation',\n        tier: 1,\n        affinities: {\n          light_conditions: -0.8,\n          terrain_harshness: 0.5,\n          pressure_gravity: 0.1,\n          temperature: 0,\n          resource_scarcity: 0,\n          ether_density: 0.2\n        },\n        description: 'Ability to emit and detect sound waves for environmental mapping.',\n        connections: ['vibration_detection', 'bioluminescence'],\n        compatible: ['all'],\n        synthesis: {\n          condition: 'extreme_darkness',\n          result: {\n            name: 'Dimensional Sonar',\n            description: 'Echolocation that can detect entities and structures across dimensional boundaries.'\n          }\n        }\n      }, {\n        id: 'vibration_detection',\n        name: 'Vibration Detection',\n        tier: 1,\n        affinities: {\n          terrain_harshness: 0.6,\n          pressure_gravity: 0.4,\n          light_conditions: -0.3,\n          temperature: 0,\n          resource_scarcity: 0,\n          ether_density: 0.1\n        },\n        description: 'Specialized organs that can detect minute vibrations through various media.',\n        connections: ['sonar_mapping', 'thick_blubber'],\n        compatible: ['all'],\n        synthesis: {\n          condition: 'extreme_sensitivity',\n          result: {\n            name: 'Temporal Tremor Sense',\n            description: 'Ability to detect vibrations through time, sensing events before they occur.'\n          }\n        }\n      }, {\n        id: 'ether_sensing',\n        name: 'Ether Sensing',\n        tier: 1,\n        affinities: {\n          ether_density: 0.8,\n          light_conditions: 0.2,\n          terrain_harshness: 0,\n          temperature: 0,\n          resource_scarcity: 0,\n          pressure_gravity: 0.1\n        },\n        description: 'Specialized organs that can detect and interpret etheric energy patterns.',\n        connections: ['photosynthetic', 'ether_channeling'],\n        compatible: ['all'],\n        synthesis: {\n          condition: 'etheric_saturation',\n          result: {\n            name: 'Soul Reading',\n            description: 'Perception that can detect and analyze the essence of living beings beyond physical form.'\n          }\n        }\n      }],\n      etheric: [{\n        id: 'ether_sensing',\n        name: 'Ether Sensing',\n        tier: 1,\n        affinities: {\n          ether_density: 0.8,\n          light_conditions: 0.2,\n          terrain_harshness: 0,\n          temperature: 0,\n          resource_scarcity: 0,\n          pressure_gravity: 0.1\n        },\n        description: 'Specialized organs that can detect and interpret etheric energy patterns.',\n        connections: ['photosynthetic', 'ether_channeling'],\n        compatible: ['all'],\n        synthesis: {\n          condition: 'etheric_saturation',\n          result: {\n            name: 'Soul Reading',\n            description: 'Perception that can detect and analyze the essence of living beings beyond physical form.'\n          }\n        }\n      }, {\n        id: 'ether_channeling',\n        name: 'Ether Channeling',\n        tier: 1,\n        affinities: {\n          ether_density: 0.9,\n          temperature: 0.3,\n          light_conditions: 0.3,\n          terrain_harshness: 0,\n          resource_scarcity: -0.2,\n          pressure_gravity: 0.1\n        },\n        description: 'Biological structures capable of directing and manipulating etheric energies.',\n        connections: ['ether_sensing', 'bioluminescence'],\n        compatible: ['all'],\n        synthesis: {\n          condition: 'etheric_mastery',\n          result: {\n            name: 'Reality Weaving',\n            description: 'Ability to manipulate the fabric of reality through precise etheric control.'\n          }\n        }\n      }, {\n        id: 'bioluminescence',\n        name: 'Bioluminescence',\n        tier: 1,\n        affinities: {\n          light_conditions: -0.6,\n          ether_density: 0.5,\n          resource_scarcity: -0.3,\n          temperature: 0,\n          terrain_harshness: 0,\n          pressure_gravity: 0\n        },\n        description: 'Ability to produce light through biochemical processes.',\n        connections: ['ether_channeling', 'omnivore'],\n        compatible: ['all'],\n        synthesis: {\n          condition: 'dark_ethereal',\n          result: {\n            name: 'Hypnotic Patterns',\n            description: 'Light displays that can induce altered states of consciousness in observers.'\n          }\n        }\n      }, {\n        id: 'dimensional_anchor',\n        name: 'Dimensional Anchor',\n        tier: 1,\n        affinities: {\n          ether_density: 0.7,\n          pressure_gravity: 0.6,\n          resource_scarcity: -0.2,\n          temperature: 0,\n          terrain_harshness: 0.2,\n          light_conditions: 0.1\n        },\n        description: 'Etheric organ that stabilizes the creature\\'s position within reality.',\n        connections: ['ether_sensing', 'vibration_detection'],\n        compatible: ['all'],\n        synthesis: {\n          condition: 'reality_flux',\n          result: {\n            name: 'Dimensional Phasing',\n            description: 'Control over personal dimensional state, allowing phasing between planes of existence.'\n          }\n        }\n      }],\n      thermal: [{\n        id: 'thick_blubber',\n        name: 'Thick Blubber',\n        tier: 1,\n        affinities: {\n          temperature: -0.8,\n          pressure_gravity: 0.3,\n          resource_scarcity: -0.4,\n          terrain_harshness: 0.1,\n          light_conditions: 0,\n          ether_density: 0\n        },\n        description: 'Dense fatty tissue layer providing insulation in cold environments.',\n        connections: ['vibration_detection', 'enhanced_muscle'],\n        compatible: ['all'],\n        synthesis: {\n          condition: 'extreme_cold',\n          result: {\n            name: 'Thermal Void',\n            description: 'Tissues that create a pocket of absolute thermal isolation from the environment.'\n          }\n        }\n      }, {\n        id: 'reflective_scales',\n        name: 'Reflective Scales',\n        tier: 1,\n        affinities: {\n          temperature: 0.7,\n          light_conditions: 0.6,\n          terrain_harshness: 0.3,\n          resource_scarcity: -0.2,\n          pressure_gravity: 0,\n          ether_density: 0.1\n        },\n        description: 'Light-reflecting scales that help regulate heat absorption.',\n        connections: ['running', 'photosynthetic'],\n        compatible: ['all'],\n        synthesis: {\n          condition: 'extreme_heat',\n          result: {\n            name: 'Thermal Manipulator Scales',\n            description: 'Scales that can actively redirect and manipulate thermal energy in the environment.'\n          }\n        }\n      }, {\n        id: 'heat_vents',\n        name: 'Heat Vents',\n        tier: 1,\n        affinities: {\n          temperature: 0.8,\n          ether_density: 0.3,\n          resource_scarcity: -0.3,\n          terrain_harshness: 0,\n          light_conditions: 0,\n          pressure_gravity: 0\n        },\n        description: 'Specialized structures that can rapidly dissipate excess heat.',\n        connections: ['running', 'ether_channeling'],\n        compatible: ['all'],\n        synthesis: {\n          condition: 'volcanic_environment',\n          result: {\n            name: 'Plasma Channeling',\n            description: 'Ability to vent superheated plasma as a defensive weapon or environmental tool.'\n          }\n        }\n      }, {\n        id: 'thermal_conversion',\n        name: 'Thermal Conversion',\n        tier: 1,\n        affinities: {\n          temperature: 0.4,\n          temperature: -0.4,\n          // Adapts to both extremes\n          resource_scarcity: 0.5,\n          ether_density: 0.3,\n          terrain_harshness: 0,\n          light_conditions: 0.1,\n          pressure_gravity: 0\n        },\n        description: 'Cellular structures that convert temperature differentials into usable energy.',\n        connections: ['omnivore', 'ether_sensing'],\n        compatible: ['all'],\n        synthesis: {\n          condition: 'thermal_extremes',\n          result: {\n            name: 'Entropic Manipulation',\n            description: 'Control over thermodynamic entropy, creating areas of perfect order or chaos.'\n          }\n        }\n      }]\n    };\n\n    // Advanced traits (tier 2)\n    const advancedTraits = {\n      sensory: [{\n        id: 'eagle_eyes',\n        name: 'Eagle-like Vision',\n        tier: 2,\n        parentId: 'acute_vision',\n        affinities: {\n          light_conditions: 0.9,\n          terrain_harshness: 0.5,\n          resource_scarcity: 0.4,\n          temperature: 0,\n          pressure_gravity: 0,\n          ether_density: 0.1\n        },\n        description: 'Exceptionally developed vision with incredible range and detail perception.',\n        connections: ['acute_vision'],\n        compatible: ['all'],\n        synthesis: {\n          condition: 'apex_perception',\n          result: {\n            name: 'Omniscient Perception',\n            description: 'Vision that transcends physical limitations, seeing through all obstacles across vast distances.'\n          }\n        }\n      }, {\n        id: 'void_perception',\n        name: 'Void Perception',\n        tier: 2,\n        parentId: 'ether_sensing',\n        affinities: {\n          ether_density: 0.9,\n          light_conditions: -0.7,\n          resource_scarcity: 0.2,\n          temperature: -0.3,\n          pressure_gravity: 0.5,\n          terrain_harshness: 0.1\n        },\n        description: 'Perception beyond normal reality, sensing the void between dimensions.',\n        connections: ['ether_sensing', 'dimensional_anchor'],\n        compatible: ['all'],\n        synthesis: {\n          condition: 'interdimensional',\n          result: {\n            name: 'Cosmic Awareness',\n            description: 'Consciousness that expands beyond individual perception, connecting to the universe itself.'\n          }\n        }\n      }],\n      locomotion: [{\n        id: 'enhanced_muscle',\n        name: 'Enhanced Musculature',\n        tier: 2,\n        parentId: 'running',\n        affinities: {\n          terrain_harshness: 0.8,\n          pressure_gravity: 0.7,\n          resource_scarcity: -0.4,\n          temperature: 0.1,\n          light_conditions: 0,\n          ether_density: 0\n        },\n        description: 'Highly developed muscle structures with exceptional strength and endurance.',\n        connections: ['running', 'climbing', 'carnivore', 'acute_vision', 'thick_blubber'],\n        compatible: ['bipedal', 'quadrupedal', 'insectoid'],\n        synthesis: {\n          condition: 'apex_physical',\n          result: {\n            name: 'Force Multiplication Tissues',\n            description: 'Muscles that multiply applied force through micro-dimensional folding.'\n          }\n        }\n      }, {\n        id: 'ethereal_movement',\n        name: 'Ethereal Movement',\n        tier: 2,\n        parentId: 'ether_channeling',\n        affinities: {\n          ether_density: 0.9,\n          terrain_harshness: 0.4,\n          pressure_gravity: -0.6,\n          resource_scarcity: -0.3,\n          light_conditions: 0.2,\n          temperature: 0\n        },\n        description: 'Partial phasing allowing movement through solid objects and across dimensional boundaries.',\n        connections: ['ether_channeling', 'dimensional_anchor'],\n        compatible: ['all'],\n        synthesis: {\n          condition: 'ethereal_mastery',\n          result: {\n            name: 'Quantum Teleportation',\n            description: 'Instantaneous movement across any distance through precise manipulation of quantum states.'\n          }\n        }\n      }],\n      etheric: [{\n        id: 'reality_manipulation',\n        name: 'Reality Manipulation',\n        tier: 2,\n        parentId: 'ether_channeling',\n        affinities: {\n          ether_density: 1.0,\n          pressure_gravity: 0.6,\n          light_conditions: 0.5,\n          resource_scarcity: -0.5,\n          temperature: 0.3,\n          terrain_harshness: 0.4\n        },\n        description: 'Advanced etheric organs capable of warping local reality in limited ways.',\n        connections: ['ether_channeling', 'dimensional_anchor'],\n        compatible: ['all'],\n        synthesis: {\n          condition: 'reality_mastery',\n          result: {\n            name: 'Creation Principle',\n            description: 'Ability to manifest thoughts into physical reality through pure will and etheric control.'\n          }\n        }\n      }],\n      metabolism: [{\n        id: 'essence_consumption',\n        name: 'Essence Consumption',\n        tier: 2,\n        parentId: 'carnivore',\n        affinities: {\n          resource_scarcity: 0.9,\n          ether_density: 0.7,\n          temperature: 0.2,\n          light_conditions: -0.3,\n          pressure_gravity: 0.1,\n          terrain_harshness: 0.1\n        },\n        description: 'Ability to consume and absorb the essence of prey, including traits and memories.',\n        connections: ['carnivore', 'ether_sensing'],\n        compatible: ['all'],\n        synthesis: {\n          condition: 'apex_consumption',\n          result: {\n            name: 'Soul Assimilation',\n            description: 'Complete absorption of preys consciousness, memories, and spiritual essence.'\n          }\n        }\n      }],\n      thermal: [{\n        id: 'thermal_projection',\n        name: 'Thermal Projection',\n        tier: 2,\n        parentId: 'heat_vents',\n        affinities: {\n          temperature: 0.9,\n          temperature: -0.5,\n          // Works at both extremes\n          ether_density: 0.6,\n          resource_scarcity: -0.4,\n          terrain_harshness: 0.3,\n          light_conditions: 0.2,\n          pressure_gravity: 0\n        },\n        description: 'Ability to project thermal energy in controlled beams or waves.',\n        connections: ['heat_vents', 'ether_channeling'],\n        compatible: ['all'],\n        synthesis: {\n          condition: 'thermal_mastery',\n          result: {\n            name: 'Absolute Zero Projection',\n            description: 'Projection of perfect cold that freezes all molecular motion in the target area.'\n          }\n        }\n      }]\n    };\n\n    // Specialized traits for specific body shapes\n    const specializedTraits = {\n      bipedal: {\n        locomotion: [{\n          id: 'bipedal_agility',\n          name: 'Bipedal Agility',\n          tier: 2,\n          parentId: 'running',\n          affinities: {\n            terrain_harshness: 0.8,\n            pressure_gravity: 0.5,\n            resource_scarcity: -0.2,\n            temperature: 0.2,\n            light_conditions: 0.3,\n            ether_density: 0\n          },\n          description: 'Specialized balance and coordination optimized for upright movement.',\n          connections: ['running', 'climbing'],\n          compatible: ['bipedal'],\n          synthesis: {\n            condition: 'extreme_agility',\n            result: {\n              name: 'Temporal Reflex',\n              description: 'Movement occurring slightly before the decision to move, through temporal manipulation.'\n            }\n          }\n        }]\n      },\n      quadrupedal: {\n        locomotion: [{\n          id: 'quadrupedal_stability',\n          name: 'Quadrupedal Stability',\n          tier: 2,\n          parentId: 'running',\n          affinities: {\n            terrain_harshness: 0.9,\n            pressure_gravity: 0.7,\n            resource_scarcity: -0.1,\n            temperature: 0.1,\n            light_conditions: 0.1,\n            ether_density: 0\n          },\n          description: 'Enhanced stability and load-bearing capacity from four-limb structure.',\n          connections: ['running', 'enhanced_muscle'],\n          compatible: ['quadrupedal'],\n          synthesis: {\n            condition: 'extreme_stability',\n            result: {\n              name: 'Gravitational Anchor',\n              description: 'Selective control over personal gravitational field providing perfect stability in any conditions.'\n            }\n          }\n        }]\n      },\n      serpentine: {\n        locomotion: [{\n          id: 'serpentine_flexibility',\n          name: 'Serpentine Flexibility',\n          tier: 2,\n          parentId: 'slithering',\n          affinities: {\n            terrain_harshness: 0.7,\n            pressure_gravity: 0.4,\n            resource_scarcity: -0.1,\n            temperature: 0.1,\n            light_conditions: 0,\n            ether_density: 0.1\n          },\n          description: 'Extreme body flexibility allowing navigation of confined spaces.',\n          connections: ['vibration_detection', 'reflective_scales'],\n          compatible: ['serpentine'],\n          synthesis: {\n            condition: 'extreme_adaptation',\n            result: {\n              name: 'Dimensional Coiling',\n              description: 'Body that can loop through multiple dimensional planes, defying conventional physics.'\n            }\n          }\n        }]\n      },\n      amorphous: {\n        metabolism: [{\n          id: 'absorptive_assimilation',\n          name: 'Absorptive Assimilation',\n          tier: 2,\n          parentId: 'omnivore',\n          affinities: {\n            resource_scarcity: 0.9,\n            ether_density: 0.5,\n            terrain_harshness: 0.3,\n            temperature: 0.2,\n            light_conditions: -0.1,\n            pressure_gravity: 0\n          },\n          description: 'Ability to absorb and incorporate materials and traits from consumed entities.',\n          connections: ['shapeshifting', 'omnivore'],\n          compatible: ['amorphous'],\n          synthesis: {\n            condition: 'apex_adaptation',\n            result: {\n              name: 'Perfect Mimicry',\n              description: 'Complete assimilation of consumed entities, including memories, abilities, and consciousness.'\n            }\n          }\n        }]\n      },\n      insectoid: {\n        sensory: [{\n          id: 'compound_perception',\n          name: 'Compound Perception',\n          tier: 2,\n          parentId: 'acute_vision',\n          affinities: {\n            light_conditions: 0.7,\n            terrain_harshness: 0.5,\n            resource_scarcity: 0.2,\n            temperature: 0.1,\n            pressure_gravity: 0.1,\n            ether_density: 0.2\n          },\n          description: 'Multi-faceted visual system providing nearly 360-degree awareness.',\n          connections: ['acute_vision', 'vibration_detection'],\n          compatible: ['insectoid'],\n          synthesis: {\n            condition: 'omnidirectional_mastery',\n            result: {\n              name: 'Quantum Observer',\n              description: 'Simultaneous perception from all possible visual angles through quantum observation.'\n            }\n          }\n        }]\n      },\n      avian: {\n        sensory: [{\n          id: 'predictive_aerial_mapping',\n          name: 'Aerial Current Sensing',\n          tier: 2,\n          parentId: 'acute_vision',\n          affinities: {\n            light_conditions: 0.6,\n            pressure_gravity: -0.7,\n            terrain_harshness: -0.2,\n            temperature: 0.3,\n            resource_scarcity: 0.1,\n            ether_density: 0.4\n          },\n          description: 'Ability to sense and predict air currents and atmospheric patterns.',\n          connections: ['flight', 'ether_sensing'],\n          compatible: ['avian'],\n          synthesis: {\n            condition: 'atmospheric_mastery',\n            result: {\n              name: 'Weather Manipulation',\n              description: 'Control over local atmospheric conditions through etheric attunement to air currents.'\n            }\n          }\n        }]\n      },\n      aquatic: {\n        sensory: [{\n          id: 'pressure_sense',\n          name: 'Pressure Sense',\n          tier: 2,\n          parentId: 'vibration_detection',\n          affinities: {\n            pressure_gravity: 0.9,\n            terrain_harshness: 0.3,\n            light_conditions: -0.4,\n            temperature: -0.2,\n            resource_scarcity: 0.1,\n            ether_density: 0.3\n          },\n          description: 'Specialized organs that can detect minute changes in water pressure and currents.',\n          connections: ['webbed', 'vibration_detection'],\n          compatible: ['aquatic'],\n          synthesis: {\n            condition: 'aquatic_mastery',\n            result: {\n              name: 'Hydromancy',\n              description: 'Control over water through etheric attunement, manipulating currents and state changes.'\n            }\n          }\n        }]\n      }\n    };\n\n    // Combine traits based on selected body shape\n    const allTraits = {\n      ...baseTraits\n    };\n\n    // Add advanced traits\n    Object.keys(advancedTraits).forEach(category => {\n      if (!allTraits[category]) allTraits[category] = [];\n      allTraits[category] = [...allTraits[category], ...advancedTraits[category]];\n    });\n\n    // Add specialized traits for selected body shape\n    if (specializedTraits[bodyShapeId]) {\n      Object.keys(specializedTraits[bodyShapeId]).forEach(category => {\n        if (!allTraits[category]) allTraits[category] = [];\n        allTraits[category] = [...allTraits[category], ...specializedTraits[bodyShapeId][category]];\n      });\n    }\n    return allTraits;\n  };\n\n  // Get all traits as a flattened array\n  const getAllTraits = () => {\n    const traitsByCategory = getTraitsByBodyShape(selectedBodyShape);\n    let allTraits = [];\n    Object.keys(traitsByCategory).forEach(category => {\n      traitsByCategory[category].forEach(trait => {\n        // Add category to trait for easier reference\n        allTraits.push({\n          ...trait,\n          category\n        });\n      });\n    });\n    return allTraits;\n  };\n\n  // Find trait by ID\n  const findTraitById = id => {\n    const allTraits = getAllTraits();\n    return allTraits.find(trait => trait.id === id);\n  };\n\n  // Calculate trait compatibility with body shape\n  const isTraitCompatibleWithBodyShape = trait => {\n    if (!trait.compatible) return true;\n    if (trait.compatible.includes('all')) return true;\n    return trait.compatible.includes(selectedBodyShape);\n  };\n\n  // Calculate trait affinity compatibility\n  const calculateCompatibility = (trait1, trait2) => {\n    if (!trait1 || !trait2) return 0.3; // Baseline compatibility\n\n    const stressors = ['terrain_harshness', 'resource_scarcity', 'light_conditions', 'ether_density', 'temperature', 'pressure_gravity'];\n    let totalSimilarity = 0;\n    let totalWeight = 0;\n    stressors.forEach(stressor => {\n      const val1 = trait1.affinities[stressor] || 0;\n      const val2 = trait2.affinities[stressor] || 0;\n\n      // Calculate similarity (1 for identical, 0 for completely opposite)\n      const similarity = 1 - Math.min(1, Math.abs(val1 - val2) / 2);\n\n      // Weight based on how important this stressor is to either trait\n      const weight = (Math.abs(val1) + Math.abs(val2)) / 2;\n      totalSimilarity += similarity * (1 + weight * 0.5);\n      totalWeight += 1;\n    });\n\n    // Calculate compatibility score (0.3 to 1.0)\n    return 0.3 + 0.5 * (totalSimilarity / (totalWeight * 1.5));\n  };\n\n  // Calculate combined trait affinity for a stressor\n  const calculateCombinedAffinity = stressor => {\n    const allTraits = getAllTraits();\n    const traitsWithAffinity = allTraits.filter(trait => trait.affinities && trait.affinities[stressor] !== undefined && trait.affinities[stressor] !== 0 && isTraitCompatibleWithBodyShape(trait));\n    if (traitsWithAffinity.length === 0) return 0;\n\n    // Sum affinities and normalize by square root of trait count\n    const sum = traitsWithAffinity.reduce((total, trait) => total + trait.affinities[stressor], 0);\n\n    // Using tanh to constrain to [-1, 1] range\n    return Math.tanh(sum / Math.sqrt(traitsWithAffinity.length));\n  };\n\n  // Calculate effective stress for a stressor\n  const calculateEffectiveStress = stressor => {\n    const stressorValue = environment[stressor];\n    if (stressorValue === 0) return 0;\n    const combinedAffinity = calculateCombinedAffinity(stressor);\n\n    // Sigmoid ratio calculation\n    const ratio = combinedAffinity / stressorValue;\n    const sigmoid = 1 / (1 + Math.exp(-3 * (ratio - 0.8)));\n\n    // Effective stress calculation\n    return stressorValue * (1 - sigmoid);\n  };\n\n  // Calculate total effective stress\n  const calculateTotalEffectiveStress = () => {\n    const stressors = ['terrain_harshness', 'resource_scarcity', 'light_conditions', 'ether_density', 'temperature', 'pressure_gravity'];\n\n    // Calculate effective stress for all stressors\n    const stressorValues = stressors.map(stressor => calculateEffectiveStress(stressor));\n\n    // Sum and normalize\n    const sum = stressorValues.reduce((total, stress) => total + stress, 0);\n    const numStressors = stressors.length;\n\n    // Using tanh to constrain to [0, 1] range (mapping from [-1, 1] to [0, 1])\n    const stress = (Math.tanh(sum / Math.sqrt(numStressors)) + 1) / 2;\n    return stress;\n  };\n\n  // Calculate adaptation probability\n  const calculateAdaptationProbability = (stress, duration = 10, threshold = 0.5) => {\n    const adaptationPressure = stress * duration / 25 - threshold;\n    return 1 / (1 + Math.exp(-10 * adaptationPressure));\n  };\n\n  // Calculate environmental relevance for a trait\n  const calculateEnvironmentalRelevance = trait => {\n    if (!trait || !trait.affinities) return 0;\n    let relevanceScore = 0;\n    Object.keys(environment).forEach(stressor => {\n      if (trait.affinities[stressor] !== undefined) {\n        const stressorValue = environment[stressor];\n        const traitAffinity = trait.affinities[stressor];\n\n        // Calculate relevance based on formula from documentation\n        relevanceScore += Math.abs(stressorValue) * stressorValue * traitAffinity;\n      }\n    });\n\n    // Normalize using hyperbolic tangent\n    return Math.tanh(relevanceScore);\n  };\n\n  // Get trait category color\n  const getTraitCategoryColor = categoryId => {\n    const category = traitCategories.find(c => c.id === categoryId);\n    return category ? category.color : '#BFAD7F';\n  };\n\n  // Get trait glow intensity based on environmental relevance\n  const getTraitGlowIntensity = trait => {\n    const relevance = calculateEnvironmentalRelevance(trait);\n    // Scale from 0 to 1\n    const scaledRelevance = (relevance + 1) / 2;\n    return scaledRelevance;\n  };\n\n  // Handle mouse move for background effect\n  const handleMouseMove = e => {\n    setCursorPosition({\n      x: e.clientX,\n      y: e.clientY\n    });\n  };\n\n  // Handle trait selection\n  const handleTraitClick = trait => {\n    if (selectedTrait && selectedTrait.id === trait.id) {\n      setSelectedTrait(null);\n      setSelectedTraitConnections([]);\n    } else {\n      setSelectedTrait(trait);\n\n      // Get connected traits\n      const connections = [];\n      if (trait.connections && trait.connections.length > 0) {\n        trait.connections.forEach(connectionId => {\n          const connectedTrait = findTraitById(connectionId);\n          if (connectedTrait) {\n            connections.push(connectedTrait);\n          }\n        });\n      }\n\n      // If this is a tier > 0 trait, add parent trait\n      if (trait.tier > 0 && trait.parentId) {\n        const parentTrait = findTraitById(trait.parentId);\n        if (parentTrait && !connections.includes(parentTrait)) {\n          connections.push(parentTrait);\n        }\n      }\n\n      // Find traits where this trait is the parent\n      const allTraits = getAllTraits();\n      allTraits.forEach(t => {\n        if (t.parentId === trait.id && !connections.includes(t)) {\n          connections.push(t);\n        }\n      });\n      setSelectedTraitConnections(connections);\n    }\n  };\n\n  // Handle body shape click\n  const handleBodyShapeClick = () => {\n    setShowBodyShapeSelector(!showBodyShapeSelector);\n    setSelectedTrait(null);\n  };\n\n  // Change body shape\n  const changeBodyShape = shapeId => {\n    setSelectedBodyShape(shapeId);\n    setShowBodyShapeSelector(false);\n    setSelectedTrait(null);\n  };\n\n  // Setup the canvas and animation when component mounts or body shape changes\n  useEffect(() => {\n    if (!canvasRef.current || !containerRef.current) return;\n    const canvas = canvasRef.current;\n    const container = containerRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Set up canvas dimensions\n    const updateCanvasDimensions = () => {\n      // Make canvas full-screen size\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n      networkRef.current = {\n        width: canvas.width,\n        height: canvas.height,\n        centerX: canvas.width / 2,\n        centerY: canvas.height / 2\n      };\n    };\n    updateCanvasDimensions();\n    window.addEventListener('resize', updateCanvasDimensions);\n\n    // Animation function\n    const animate = () => {\n      if (!networkRef.current) return;\n\n      // Clear canvas\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      const {\n        centerX,\n        centerY\n      } = networkRef.current;\n      const allTraits = getAllTraits();\n      const traitPositions = {};\n      traitRefs.current = {};\n\n      // Draw background ambient effects for eldritch appearance\n      drawAmbientBackground(ctx, centerX, centerY, canvas.width, canvas.height);\n\n      // Draw mystical symbols in the background\n      drawMysticalSymbols(ctx, centerX, centerY, canvas.width, canvas.height);\n\n      // Draw tier rings with more mystical styling\n      const maxRadius = Math.min(canvas.width, canvas.height) * 0.38; // Use percentage of screen\n      const tierRadius = [0, maxRadius * 0.35, maxRadius * 0.65, maxRadius];\n\n      // Draw tier circles with eldritch styling\n      drawTierCircles(ctx, centerX, centerY, tierRadius);\n\n      // Group traits by category and tier\n      const traitsByCategory = {};\n      traitCategories.forEach(category => {\n        traitsByCategory[category.id] = {\n          tier1: [],\n          tier2: [],\n          tier3: []\n        };\n      });\n      allTraits.forEach(trait => {\n        const tier = trait.tier || 1;\n        if (tier <= 3 && traitsByCategory[trait.category]) {\n          traitsByCategory[trait.category][`tier${tier}`].push(trait);\n        }\n      });\n\n      // Calculate positions for all traits - now with clear category separation\n      traitCategories.forEach((category, categoryIndex) => {\n        const categoryId = category.id;\n        const categoryAngleOffset = categoryIndex / traitCategories.length * Math.PI * 2;\n\n        // Draw category sector\n        drawCategorySector(ctx, centerX, centerY, categoryAngleOffset, 1 / traitCategories.length * Math.PI * 2, tierRadius[tierRadius.length - 1] * 1.05, category);\n\n        // Position traits by tier with better placement\n        [1, 2, 3].forEach(tier => {\n          const traits = traitsByCategory[categoryId][`tier${tier}`] || [];\n          const traitCount = traits.length;\n          if (traitCount === 0) return;\n\n          // Define the arc width for this category (wider for less crowding)\n          const arcWidth = Math.PI * 1.8 / traitCategories.length;\n          const angleSpread = Math.min(arcWidth, Math.PI * 0.3); // Cap maximum spread\n\n          // Calculate trait positions within this arc\n          traits.forEach((trait, index) => {\n            const ratio = traitCount === 1 ? 0.5 : index / (traitCount - 1);\n            const traitAngle = categoryAngleOffset - angleSpread / 2 + angleSpread * ratio;\n\n            // Apply radius based on tier\n            const radius = tierRadius[tier];\n\n            // Add slight random variation in radius for more organic feel\n            const radiusVariation = radius * 0.05 * (Math.random() - 0.5);\n            const finalRadius = radius + radiusVariation;\n            const x = centerX + Math.cos(traitAngle) * finalRadius;\n            const y = centerY + Math.sin(traitAngle) * finalRadius;\n            traitPositions[trait.id] = {\n              x,\n              y,\n              trait,\n              angle: traitAngle\n            };\n            traitRefs.current[trait.id] = {\n              x,\n              y,\n              radius: getNodeRadius(trait),\n              trait\n            };\n          });\n        });\n      });\n\n      // Draw connections with ethereal styling\n      drawConnections(ctx, allTraits, traitPositions, centerX, centerY);\n\n      // Draw parent-child connections with eldritch flow\n      drawParentChildConnections(ctx, allTraits, traitPositions, centerX, centerY);\n\n      // Draw nodes for each trait with enhanced styling\n      Object.keys(traitPositions).forEach(traitId => {\n        const {\n          x,\n          y,\n          trait,\n          angle\n        } = traitPositions[traitId];\n        const category = trait.category;\n        const categoryColor = getTraitCategoryColor(category);\n        const isSelected = selectedTrait && selectedTrait.id === trait.id;\n        const isConnected = selectedTrait && selectedTraitConnections.some(t => t.id === trait.id);\n        const isVisible = showAllTraits || isSelected || isConnected;\n        if (!isVisible) return;\n\n        // Draw trait node with enhanced visual styling\n        drawTraitNode(ctx, x, y, trait, angle, isSelected, isConnected);\n\n        // Store node position and size for interaction\n        traitRefs.current[traitId] = {\n          x,\n          y,\n          radius: getNodeRadius(trait) + (trait.synthesis ? 4 : 0),\n          trait\n        };\n      });\n\n      // Draw central body shape with eldritch styling\n      drawCentralBodyShape(ctx, centerX, centerY);\n\n      // Continue animation\n      animationFrameRef.current = requestAnimationFrame(animate);\n    };\n\n    // Ambient background for eldritch feel\n    const drawAmbientBackground = (ctx, centerX, centerY, width, height) => {\n      // Create subtle radial gradient for ambient glow\n      const gradient = ctx.createRadialGradient(centerX, centerY, 100, centerX, centerY, Math.max(width, height) * 0.7);\n      const bodyShape = bodyShapes.find(shape => shape.id === selectedBodyShape);\n      const baseColor = bodyShape ? bodyShape.color : '#191919';\n\n      // Create a dark variant of the body shape color for the outer edge\n      const getRGBComponents = hexColor => {\n        const r = parseInt(hexColor.slice(1, 3), 16);\n        const g = parseInt(hexColor.slice(3, 5), 16);\n        const b = parseInt(hexColor.slice(5, 7), 16);\n        return {\n          r,\n          g,\n          b\n        };\n      };\n      const {\n        r,\n        g,\n        b\n      } = getRGBComponents(baseColor);\n      const darkColor = `rgba(${r * 0.15}, ${g * 0.15}, ${b * 0.15}, 1)`;\n      gradient.addColorStop(0, `rgba(${r * 0.25}, ${g * 0.25}, ${b * 0.25}, 0.7)`);\n      gradient.addColorStop(1, darkColor);\n      ctx.fillStyle = gradient;\n      ctx.fillRect(0, 0, width, height);\n\n      // Add subtle particle effect\n      const particleCount = 100;\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.1)';\n      for (let i = 0; i < particleCount; i++) {\n        const x = Math.random() * width;\n        const y = Math.random() * height;\n        const size = Math.random() * 1.5 + 0.5;\n        const opacity = Math.random() * 0.08 + 0.02;\n        ctx.globalAlpha = opacity;\n        ctx.beginPath();\n        ctx.arc(x, y, size, 0, Math.PI * 2);\n        ctx.fill();\n      }\n      ctx.globalAlpha = 1;\n    };\n\n    // Draw mystical symbols in background\n    const drawMysticalSymbols = (ctx, centerX, centerY, width, height) => {\n      const symbols = ['⚕', '⚜', '⚝', '⚳', '⚴', '⚵', '☉', '☽', '☿', '♀', '♁', '♂', '♃', '♄'];\n      const symbolCount = 12;\n      ctx.font = '20px serif';\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      for (let i = 0; i < symbolCount; i++) {\n        const distance = Math.random() * (Math.min(width, height) * 0.4) + 100;\n        const angle = Math.random() * Math.PI * 2;\n        const x = centerX + Math.cos(angle) * distance;\n        const y = centerY + Math.sin(angle) * distance;\n        const symbol = symbols[Math.floor(Math.random() * symbols.length)];\n        const opacity = Math.random() * 0.15 + 0.05;\n        ctx.fillStyle = `rgba(191, 173, 127, ${opacity})`;\n        ctx.fillText(symbol, x, y);\n      }\n    };\n\n    // Draw tier circles with eldritch styling\n    const drawTierCircles = (ctx, centerX, centerY, tierRadius) => {\n      // Draw ornate tier circles\n      for (let tier = 1; tier <= 3; tier++) {\n        // Main circle\n        ctx.beginPath();\n        ctx.arc(centerX, centerY, tierRadius[tier], 0, Math.PI * 2);\n        ctx.strokeStyle = tier === 1 ? 'rgba(191, 173, 127, 0.3)' : tier === 2 ? 'rgba(191, 173, 127, 0.2)' : 'rgba(191, 173, 127, 0.15)';\n        ctx.setLineDash(tier === 1 ? [] : tier === 2 ? [5, 5] : [1, 8]);\n        ctx.lineWidth = tier === 1 ? 2 : 1;\n        ctx.stroke();\n        ctx.setLineDash([]);\n\n        // Add subtle glow\n        ctx.beginPath();\n        ctx.arc(centerX, centerY, tierRadius[tier], 0, Math.PI * 2);\n        ctx.strokeStyle = `rgba(191, 173, 127, ${0.1 / tier})`;\n        ctx.lineWidth = 10;\n        ctx.stroke();\n\n        // Draw tier label\n        const tierNames = ['', 'Fundamental', 'Evolutionary', 'Transcendent'];\n        const tierPosition = centerX - tierRadius[tier] + 30;\n        ctx.fillStyle = 'rgba(191, 173, 127, 0.5)';\n        ctx.font = '12px serif';\n        ctx.textAlign = 'center';\n        ctx.fillText(tierNames[tier], tierPosition, centerY - 5);\n      }\n\n      // Add radial lines connecting tiers\n      const lineCount = 12;\n      for (let i = 0; i < lineCount; i++) {\n        const angle = i / lineCount * Math.PI * 2;\n        ctx.beginPath();\n        ctx.moveTo(centerX + Math.cos(angle) * tierRadius[1] * 0.9, centerY + Math.sin(angle) * tierRadius[1] * 0.9);\n        ctx.lineTo(centerX + Math.cos(angle) * tierRadius[3] * 1.05, centerY + Math.sin(angle) * tierRadius[3] * 1.05);\n        ctx.strokeStyle = 'rgba(191, 173, 127, 0.05)';\n        ctx.lineWidth = 1;\n        ctx.stroke();\n      }\n    };\n\n    // Draw category sectors\n    const drawCategorySector = (ctx, centerX, centerY, startAngle, arcAngle, radius, category) => {\n      const endAngle = startAngle + arcAngle;\n\n      // Draw subtle category background\n      ctx.beginPath();\n      ctx.moveTo(centerX, centerY);\n      ctx.arc(centerX, centerY, radius, startAngle, endAngle);\n      ctx.lineTo(centerX, centerY);\n      ctx.fillStyle = `rgba(${parseInt(category.color.slice(1, 3), 16)}, \n                            ${parseInt(category.color.slice(3, 5), 16)}, \n                            ${parseInt(category.color.slice(5, 7), 16)}, 0.03)`;\n      ctx.fill();\n\n      // Draw category boundary lines\n      ctx.beginPath();\n      ctx.moveTo(centerX, centerY);\n      ctx.lineTo(centerX + Math.cos(startAngle) * radius, centerY + Math.sin(startAngle) * radius);\n      ctx.strokeStyle = `rgba(${parseInt(category.color.slice(1, 3), 16)}, \n                              ${parseInt(category.color.slice(3, 5), 16)}, \n                              ${parseInt(category.color.slice(5, 7), 16)}, 0.2)`;\n      ctx.lineWidth = 1;\n      ctx.stroke();\n      ctx.beginPath();\n      ctx.moveTo(centerX, centerY);\n      ctx.lineTo(centerX + Math.cos(endAngle) * radius, centerY + Math.sin(endAngle) * radius);\n      ctx.stroke();\n\n      // Add category label at the outer edge\n      const labelAngle = startAngle + arcAngle / 2;\n      const labelRadius = radius * 1.08;\n      const labelX = centerX + Math.cos(labelAngle) * labelRadius;\n      const labelY = centerY + Math.sin(labelAngle) * labelRadius;\n      ctx.save();\n      ctx.translate(labelX, labelY);\n      ctx.rotate(labelAngle + Math.PI / 2); // Rotate text to follow arc\n\n      ctx.fillStyle = category.color;\n      ctx.font = 'bold 14px serif';\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(category.name.toUpperCase(), 0, 0);\n      ctx.restore();\n    };\n\n    // Draw trait connections with ethereal styling\n    const drawConnections = (ctx, allTraits, traitPositions, centerX, centerY) => {\n      allTraits.forEach(trait => {\n        if (trait.connections) {\n          const sourcePos = traitPositions[trait.id];\n          if (!sourcePos) return;\n          trait.connections.forEach(targetId => {\n            const targetPos = traitPositions[targetId];\n            if (!targetPos) return;\n            const sourceVisible = showAllTraits || selectedTrait && (selectedTrait.id === trait.id || selectedTraitConnections.some(t => t.id === trait.id));\n            const targetVisible = showAllTraits || selectedTrait && (selectedTrait.id === targetId || selectedTraitConnections.some(t => t.id === targetId));\n            if (sourceVisible && targetVisible) {\n              const compatibility = calculateCompatibility(sourcePos.trait, targetPos.trait);\n              const isSelected = selectedTrait && (selectedTrait.id === trait.id || selectedTrait.id === targetId);\n\n              // Enhanced connection drawing\n              drawEtherealConnection(ctx, sourcePos.x, sourcePos.y, targetPos.x, targetPos.y, centerX, centerY, sourcePos.trait, targetPos.trait, compatibility, isSelected);\n            }\n          });\n        }\n      });\n    };\n\n    // Draw parent-child evolutionary connections with eldritch styling\n    const drawParentChildConnections = (ctx, allTraits, traitPositions, centerX, centerY) => {\n      allTraits.forEach(trait => {\n        if (trait.tier > 0 && trait.parentId) {\n          const childPos = traitPositions[trait.id];\n          const parentPos = traitPositions[trait.parentId];\n          if (childPos && parentPos) {\n            const childVisible = showAllTraits || selectedTrait && (selectedTrait.id === trait.id || selectedTraitConnections.some(t => t.id === trait.id));\n            const parentVisible = showAllTraits || selectedTrait && (selectedTrait.id === trait.parentId || selectedTraitConnections.some(t => t.id === trait.parentId));\n            if (childVisible && parentVisible) {\n              const isSelected = selectedTrait && (selectedTrait.id === trait.id || selectedTrait.id === trait.parentId);\n\n              // Draw evolutionary connection with eldritch flow\n              drawEvolutionaryConnection(ctx, childPos.x, childPos.y, parentPos.x, parentPos.y, centerX, centerY, childPos.trait, parentPos.trait, isSelected);\n            }\n          }\n        }\n      });\n    };\n\n    // Draw ethereal connection between traits\n    const drawEtherealConnection = (ctx, x1, y1, x2, y2, centerX, centerY, trait1, trait2, compatibility, isSelected) => {\n      // Create a gentle curve for the connection\n      const midX = (x1 + x2) / 2;\n      const midY = (y1 + y2) / 2;\n\n      // Pull toward center based on tier difference\n      const pullFactor = 0.2;\n      const controlX = midX + (centerX - midX) * pullFactor;\n      const controlY = midY + (centerY - midY) * pullFactor;\n\n      // Create gradient with category colors\n      const gradient = ctx.createLinearGradient(x1, y1, x2, y2);\n      const sourceColor = getTraitCategoryColor(trait1.category);\n      const targetColor = getTraitCategoryColor(trait2.category);\n      gradient.addColorStop(0, sourceColor);\n      gradient.addColorStop(1, targetColor);\n\n      // Draw main connection\n      ctx.beginPath();\n      ctx.moveTo(x1, y1);\n      ctx.quadraticCurveTo(controlX, controlY, x2, y2);\n\n      // Set line style\n      ctx.strokeStyle = gradient;\n      ctx.lineWidth = isSelected ? 3 : 1.5;\n      ctx.globalAlpha = isSelected ? 0.8 : 0.4 * compatibility;\n\n      // Add glow for selected connections\n      if (isSelected) {\n        ctx.shadowColor = 'rgba(255, 253, 227, 0.8)';\n        ctx.shadowBlur = 12;\n      }\n      ctx.stroke();\n\n      // Add ethereal particles along the connection if selected\n      if (isSelected) {\n        const particleCount = 3;\n        for (let i = 0; i < particleCount; i++) {\n          const t = Math.random();\n\n          // Calculate position along the quadratic curve\n          const posX = Math.pow(1 - t, 2) * x1 + 2 * (1 - t) * t * controlX + Math.pow(t, 2) * x2;\n          const posY = Math.pow(1 - t, 2) * y1 + 2 * (1 - t) * t * controlY + Math.pow(t, 2) * y2;\n\n          // Draw ethereal particle\n          ctx.beginPath();\n          ctx.arc(posX, posY, 2, 0, Math.PI * 2);\n          ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n          ctx.fill();\n        }\n      }\n\n      // Reset styles\n      ctx.globalAlpha = 1;\n      ctx.shadowBlur = 0;\n    };\n\n    // Draw evolutionary connection with eldritch styling\n    const drawEvolutionaryConnection = (ctx, childX, childY, parentX, parentY, centerX, centerY, childTrait, parentTrait, isSelected) => {\n      // Create a curve toward center for evolutionary path\n      const midX = (childX + parentX) / 2;\n      const midY = (childY + parentY) / 2;\n\n      // Pull evolutionary path toward center\n      const pullFactor = 0.25;\n      const controlX = midX + (centerX - midX) * pullFactor;\n      const controlY = midY + (centerY - midY) * pullFactor;\n\n      // Special gradient for evolutionary connections\n      const evolutionGradient = ctx.createLinearGradient(childX, childY, parentX, parentY);\n      const childColor = getTraitCategoryColor(childTrait.category);\n      const parentColor = getTraitCategoryColor(parentTrait.category);\n      evolutionGradient.addColorStop(0, childColor);\n      evolutionGradient.addColorStop(1, parentColor);\n\n      // Draw evolutionary path\n      ctx.beginPath();\n      ctx.moveTo(childX, childY);\n      ctx.quadraticCurveTo(controlX, controlY, parentX, parentY);\n\n      // Set special styling for evolutionary connections\n      ctx.strokeStyle = evolutionGradient;\n      ctx.lineWidth = isSelected ? 3 : 2;\n      ctx.setLineDash([3, 5]); // Dashed line for evolutionary connections\n      ctx.globalAlpha = isSelected ? 0.9 : 0.6;\n\n      // Add glow for selected connections\n      if (isSelected) {\n        ctx.shadowColor = 'rgba(255, 253, 227, 0.8)';\n        ctx.shadowBlur = 10;\n      }\n      ctx.stroke();\n\n      // Add direction indicator (flow from parent to child)\n      const midPoint = getPointOnQuadraticCurve(0.5, childX, childY, controlX, controlY, parentX, parentY);\n      if (isSelected) {\n        // Draw energy flow along connection\n        drawEnergyFlow(ctx, childX, childY, controlX, controlY, parentX, parentY, evolutionGradient);\n      }\n\n      // Reset styles\n      ctx.setLineDash([]);\n      ctx.globalAlpha = 1;\n      ctx.shadowBlur = 0;\n    };\n\n    // Draw energy flow along path\n    const drawEnergyFlow = (ctx, x1, y1, cx, cy, x2, y2, gradient) => {\n      const particleCount = 5;\n      const t = Date.now() % 3000 / 3000; // Animation cycle\n\n      for (let i = 0; i < particleCount; i++) {\n        const particleT = (t + i / particleCount) % 1;\n        const pointOnCurve = getPointOnQuadraticCurve(particleT, x1, y1, cx, cy, x2, y2);\n\n        // Draw energy particle\n        ctx.beginPath();\n        ctx.arc(pointOnCurve.x, pointOnCurve.y, 3, 0, Math.PI * 2);\n        ctx.fillStyle = gradient;\n\n        // Add glow effect\n        ctx.shadowColor = 'rgba(255, 253, 227, 0.9)';\n        ctx.shadowBlur = 5;\n        ctx.fill();\n      }\n\n      // Reset shadow\n      ctx.shadowBlur = 0;\n    };\n\n    // Helper to get point on quadratic curve\n    const getPointOnQuadraticCurve = (t, x1, y1, cx, cy, x2, y2) => {\n      return {\n        x: Math.pow(1 - t, 2) * x1 + 2 * (1 - t) * t * cx + Math.pow(t, 2) * x2,\n        y: Math.pow(1 - t, 2) * y1 + 2 * (1 - t) * t * cy + Math.pow(t, 2) * y2\n      };\n    };\n\n    // Draw trait node with enhanced styling\n    const drawTraitNode = (ctx, x, y, trait, angle, isSelected, isConnected) => {\n      const category = trait.category;\n      const categoryColor = getTraitCategoryColor(category);\n\n      // Get trait size based on tier and state\n      const baseSize = trait.tier === 1 ? 18 : trait.tier === 2 ? 22 : 26;\n      let nodeSize = isSelected ? baseSize * 1.3 : isConnected ? baseSize * 1.1 : baseSize;\n\n      // Special treatment for traits with synthesis potential\n      if (trait.synthesis) {\n        nodeSize += 4;\n      }\n\n      // Calculate glow based on environmental relevance\n      const relevance = calculateEnvironmentalRelevance(trait);\n      const glowIntensity = getTraitGlowIntensity(trait);\n\n      // Draw outer aura for relevant traits\n      if (relevance > 0.3) {\n        const auraSize = nodeSize * (1 + relevance * 0.3);\n        const gradient = ctx.createRadialGradient(x, y, nodeSize, x, y, auraSize);\n        gradient.addColorStop(0, `rgba(${parseInt(categoryColor.slice(1, 3), 16)}, \n                                        ${parseInt(categoryColor.slice(3, 5), 16)}, \n                                        ${parseInt(categoryColor.slice(5, 7), 16)}, 0.7)`);\n        gradient.addColorStop(1, 'rgba(0, 0, 0, 0)');\n        ctx.beginPath();\n        ctx.arc(x, y, auraSize, 0, Math.PI * 2);\n        ctx.fillStyle = gradient;\n        ctx.fill();\n      }\n\n      // For traits with synthesis potential, add special ornamental ring\n      if (trait.synthesis) {\n        // Rotating ring effect for synthesis capability\n        const ringSegments = 8;\n        const ringShift = Date.now() / 2000; // Slow rotation\n\n        for (let i = 0; i < ringSegments; i++) {\n          const segmentAngle = i / ringSegments * Math.PI * 2 + ringShift;\n          const nextSegmentAngle = (i + 1) / ringSegments * Math.PI * 2 + ringShift;\n          ctx.beginPath();\n          ctx.arc(x, y, nodeSize + 3, segmentAngle, nextSegmentAngle);\n          ctx.strokeStyle = `rgba(255, 223, 127, ${0.3 + 0.2 * Math.sin(Date.now() / 500 + i)})`;\n          ctx.lineWidth = 2;\n          ctx.stroke();\n        }\n      }\n\n      // Draw main node\n      ctx.beginPath();\n      ctx.arc(x, y, nodeSize, 0, Math.PI * 2);\n\n      // Create radial gradient for node\n      const gradient = ctx.createRadialGradient(x - nodeSize * 0.3, y - nodeSize * 0.3, 0, x, y, nodeSize);\n      gradient.addColorStop(0, categoryColor);\n      gradient.addColorStop(1, adjustColorBrightness(categoryColor, -30));\n      ctx.fillStyle = gradient;\n\n      // Add glow based on environmental relevance\n      ctx.shadowColor = 'rgba(255, 253, 227, 0.8)';\n      ctx.shadowBlur = 8 + glowIntensity * 15;\n      ctx.fill();\n\n      // Add ornamental border\n      ctx.beginPath();\n      ctx.arc(x, y, nodeSize, 0, Math.PI * 2);\n\n      // More pronounced border for selected/connected traits\n      ctx.strokeStyle = isSelected ? '#FFFFFF' : isConnected ? adjustColorBrightness(categoryColor, 30) : categoryColor;\n      ctx.lineWidth = isSelected ? 3 : 2;\n      ctx.stroke();\n\n      // Add tier indicator at center\n      if (trait.tier > 1) {\n        ctx.beginPath();\n        ctx.arc(x, y, nodeSize * 0.4, 0, Math.PI * 2);\n        ctx.fillStyle = isSelected ? '#FFFFFF' : 'rgba(255, 255, 255, 0.7)';\n        ctx.shadowBlur = 0;\n        ctx.fill();\n\n        // Add tier number\n        ctx.fillStyle = categoryColor;\n        ctx.font = `bold ${nodeSize * 0.5}px serif`;\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText(trait.tier.toString(), x, y);\n      }\n\n      // Reset shadow for text\n      ctx.shadowBlur = 0;\n\n      // Draw compatibility indicator for selected trait connections\n      if (isConnected && selectedTrait) {\n        const compatibility = calculateCompatibility(selectedTrait, trait);\n\n        // Draw compatibility arc around node\n        ctx.beginPath();\n        ctx.arc(x, y, nodeSize + 5, 0, Math.PI * 2 * compatibility);\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.8)';\n        ctx.lineWidth = 2;\n        ctx.stroke();\n      }\n\n      // Draw synthesis indicator if available\n      if (trait.synthesis) {\n        // Small symbol indicating synthesis potential\n        const symbolRadius = nodeSize * 0.3;\n        const symbolAngle = angle + Math.PI / 4; // Offset from main angle\n        const symbolX = x + Math.cos(symbolAngle) * (nodeSize + symbolRadius);\n        const symbolY = y + Math.sin(symbolAngle) * (nodeSize + symbolRadius);\n        ctx.beginPath();\n        ctx.arc(symbolX, symbolY, symbolRadius, 0, Math.PI * 2);\n\n        // Pulsating effect for synthesis indicator\n        const pulseIntensity = 0.6 + 0.4 * Math.sin(Date.now() / 500);\n        ctx.fillStyle = `rgba(255, 223, 127, ${pulseIntensity})`;\n        ctx.shadowColor = 'rgba(255, 223, 127, 0.8)';\n        ctx.shadowBlur = 10;\n        ctx.fill();\n\n        // Add synthesis symbol\n        ctx.fillStyle = '#000';\n        ctx.font = `${symbolRadius}px serif`;\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText('✧', symbolX, symbolY);\n\n        // Reset shadow\n        ctx.shadowBlur = 0;\n      }\n\n      // Add trait name as a floating label\n      const labelDistance = nodeSize * 1.3;\n      const labelAngle = angle; // Use the same angle as the node position\n      const labelX = x + Math.cos(labelAngle) * labelDistance;\n      const labelY = y + Math.sin(labelAngle) * labelDistance;\n\n      // Create a subtle text background for better readability\n      const nameWidth = ctx.measureText(trait.name).width;\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';\n      ctx.fillRect(labelX - nameWidth / 2 - 3, labelY - 8, nameWidth + 6, 16);\n\n      // Draw the trait name\n      ctx.fillStyle = isSelected ? '#FFFFFF' : 'rgba(255, 255, 255, 0.9)';\n      ctx.font = `${isSelected ? 'bold ' : ''}12px sans-serif`;\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(trait.name, labelX, labelY);\n    };\n\n    // Draw central body shape with eldritch styling\n    const drawCentralBodyShape = (ctx, centerX, centerY) => {\n      const bodyShape = bodyShapes.find(shape => shape.id === selectedBodyShape);\n      const bodyShapeSize = 80; // Larger central node\n\n      // Store body shape position for interaction\n      bodyShapeIconRef.current = {\n        x: centerX,\n        y: centerY,\n        radius: bodyShapeSize\n      };\n\n      // Draw outer circles with eldritch styling\n      for (let i = 0; i < 3; i++) {\n        ctx.beginPath();\n        ctx.arc(centerX, centerY, bodyShapeSize + 20 + i * 8, 0, Math.PI * 2);\n        ctx.strokeStyle = `rgba(191, 173, 127, ${0.1 - i * 0.03})`;\n        ctx.lineWidth = 1;\n        ctx.stroke();\n      }\n\n      // Create pulsating effect\n      const pulseIntensity = 0.9 + 0.1 * Math.sin(Date.now() / 1000);\n\n      // Draw outer glow\n      const outerGlow = ctx.createRadialGradient(centerX, centerY, bodyShapeSize * 0.7, centerX, centerY, bodyShapeSize * 1.3);\n      const bodyShapeColor = (bodyShape === null || bodyShape === void 0 ? void 0 : bodyShape.color) || 'rgb(191, 173, 127)';\n      outerGlow.addColorStop(0, `rgba(${parseInt(bodyShapeColor.slice(1, 3), 16)}, \n                                      ${parseInt(bodyShapeColor.slice(3, 5), 16)}, \n                                      ${parseInt(bodyShapeColor.slice(5, 7), 16)}, 0.3)`);\n      outerGlow.addColorStop(1, 'rgba(0, 0, 0, 0)');\n      ctx.beginPath();\n      ctx.arc(centerX, centerY, bodyShapeSize * 1.3, 0, Math.PI * 2);\n      ctx.fillStyle = outerGlow;\n      ctx.fill();\n\n      // Draw main body shape background\n      ctx.beginPath();\n      ctx.arc(centerX, centerY, bodyShapeSize, 0, Math.PI * 2);\n\n      // Create radial gradient for body shape\n      const gradient = ctx.createRadialGradient(centerX - bodyShapeSize * 0.3, centerY - bodyShapeSize * 0.3, bodyShapeSize * 0.1, centerX, centerY, bodyShapeSize);\n      gradient.addColorStop(0, bodyShapeColor);\n      gradient.addColorStop(1, adjustColorBrightness(bodyShapeColor, -20));\n      ctx.fillStyle = gradient;\n      ctx.shadowColor = `rgba(${parseInt(bodyShapeColor.slice(1, 3), 16)}, \n                              ${parseInt(bodyShapeColor.slice(3, 5), 16)}, \n                              ${parseInt(bodyShapeColor.slice(5, 7), 16)}, 0.8)`;\n      ctx.shadowBlur = 25 * pulseIntensity;\n      ctx.fill();\n\n      // Draw ornate border\n      ctx.beginPath();\n      ctx.arc(centerX, centerY, bodyShapeSize, 0, Math.PI * 2);\n      ctx.strokeStyle = 'rgba(255, 255, 255, 0.7)';\n      ctx.lineWidth = 2;\n      ctx.stroke();\n\n      // Reset shadow\n      ctx.shadowBlur = 0;\n\n      // Draw body shape icon and name\n      ctx.fillStyle = '#000';\n      ctx.font = `bold 32px serif`;\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillText((bodyShape === null || bodyShape === void 0 ? void 0 : bodyShape.icon) || '⦿', centerX, centerY - 10);\n      ctx.font = 'bold 16px sans-serif';\n      ctx.fillText((bodyShape === null || bodyShape === void 0 ? void 0 : bodyShape.name) || 'Body Shape', centerX, centerY + 20);\n\n      // Draw ornate sigils around the central node\n      const sigilCount = 5;\n      const sigilRadius = bodyShapeSize * 1.4;\n      for (let i = 0; i < sigilCount; i++) {\n        const angle = i / sigilCount * Math.PI * 2;\n        const x = centerX + Math.cos(angle) * sigilRadius;\n        const y = centerY + Math.sin(angle) * sigilRadius;\n        ctx.beginPath();\n        ctx.arc(x, y, 3, 0, Math.PI * 2);\n        ctx.fillStyle = `rgba(191, 173, 127, ${0.3 + 0.2 * Math.sin(Date.now() / 500 + i)})`;\n        ctx.fill();\n\n        // Connect sigils to center with subtle lines\n        ctx.beginPath();\n        ctx.moveTo(centerX + Math.cos(angle) * bodyShapeSize, centerY + Math.sin(angle) * bodyShapeSize);\n        ctx.lineTo(x, y);\n        ctx.strokeStyle = 'rgba(191, 173, 127, 0.1)';\n        ctx.lineWidth = 1;\n        ctx.stroke();\n      }\n\n      // Add elemental text\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.6)';\n      ctx.font = '14px serif';\n      ctx.fillText((bodyShape === null || bodyShape === void 0 ? void 0 : bodyShape.element) || 'Form', centerX, centerY + bodyShapeSize * 1.2);\n    };\n\n    // Helper function to adjust color brightness\n    const adjustColorBrightness = (hex, percent) => {\n      const r = parseInt(hex.slice(1, 3), 16);\n      const g = parseInt(hex.slice(3, 5), 16);\n      const b = parseInt(hex.slice(5, 7), 16);\n      const adjustedR = Math.max(0, Math.min(255, r + percent));\n      const adjustedG = Math.max(0, Math.min(255, g + percent));\n      const adjustedB = Math.max(0, Math.min(255, b + percent));\n      return `rgb(${Math.round(adjustedR)}, ${Math.round(adjustedG)}, ${Math.round(adjustedB)})`;\n    };\n\n    // Start animation loop\n    animate();\n\n    // Set loaded after a delay\n    const timer = setTimeout(() => {\n      setIsLoaded(true);\n    }, 1000);\n\n    // Cleanup on unmount\n    return () => {\n      window.removeEventListener('resize', updateCanvasDimensions);\n      clearTimeout(timer);\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [selectedBodyShape, selectedTrait, selectedTraitConnections, environment, showAllTraits, getTraitCategoryColor, calculateCompatibility, getTraitGlowIntensity]);\n\n  // Calculate stress and adaptation probability when environment changes\n  useEffect(() => {\n    const stress = calculateTotalEffectiveStress();\n    setTotalEffectiveStress(stress);\n    const probability = calculateAdaptationProbability(stress);\n    setAdaptationProbability(probability);\n  }, [environment, selectedBodyShape]);\n\n  // Handle canvas clicks to detect trait and body shape selection\n  const handleCanvasClick = e => {\n    if (!canvasRef.current || !bodyShapeIconRef.current) return;\n    const rect = canvasRef.current.getBoundingClientRect();\n    const mouseX = e.clientX - rect.left;\n    const mouseY = e.clientY - rect.top;\n\n    // Check if clicked on body shape\n    const {\n      x,\n      y,\n      radius\n    } = bodyShapeIconRef.current;\n    const distance = Math.sqrt((mouseX - x) ** 2 + (mouseY - y) ** 2);\n    if (distance <= radius) {\n      handleBodyShapeClick();\n      return;\n    }\n\n    // Check if clicked on any trait\n    let clickedTrait = null;\n    Object.keys(traitRefs.current).forEach(traitId => {\n      const traitRef = traitRefs.current[traitId];\n      const traitDistance = Math.sqrt((mouseX - traitRef.x) ** 2 + (mouseY - traitRef.y) ** 2);\n      if (traitDistance <= traitRef.radius) {\n        clickedTrait = traitRef.trait;\n      }\n    });\n    if (clickedTrait) {\n      handleTraitClick(clickedTrait);\n    } else if (selectedTrait) {\n      setSelectedTrait(null);\n      setSelectedTraitConnections([]);\n    }\n  };\n\n  // Handle canvas mouse movement for hover effects\n  const handleCanvasMouseMove = e => {\n    if (!canvasRef.current) return;\n    const rect = canvasRef.current.getBoundingClientRect();\n    const mouseX = e.clientX - rect.left;\n    const mouseY = e.clientY - rect.top;\n\n    // Check if mouse is over any trait\n    let hovered = null;\n    Object.keys(traitRefs.current).forEach(traitId => {\n      const traitRef = traitRefs.current[traitId];\n      const distance = Math.sqrt((mouseX - traitRef.x) ** 2 + (mouseY - traitRef.y) ** 2);\n      if (distance <= traitRef.radius) {\n        hovered = traitRef.trait;\n      }\n    });\n    setHoveredTrait(hovered);\n  };\n\n  // Handle filter mode changes\n  const handleFilterModeChange = mode => {\n    setFilterMode(mode);\n    if (mode === 'all') {\n      setShowAllTraits(true);\n    } else if (mode === 'relevance') {\n      // Show only traits with positive environmental relevance\n      setShowAllTraits(false);\n    } else if (mode === 'category' && selectedTrait) {\n      // Show only traits in the same category as selected trait\n      setShowAllTraits(false);\n    }\n  };\n\n  // Helper function to get node radius based on trait tier\n  const getNodeRadius = trait => {\n    if (!trait) return 16;\n    const tier = trait.tier || 1;\n    return tier === 1 ? 16 : tier === 2 ? 20 : 24;\n  };\n\n  // Render trait tooltip when hovering\n  const renderTraitTooltip = () => {\n    if (!hoveredTrait || selectedTrait) return null;\n    const trait = hoveredTrait;\n    const relevance = calculateEnvironmentalRelevance(trait);\n    return /*#__PURE__*/_jsxDEV(motion.div, {\n      initial: {\n        opacity: 0,\n        y: 10\n      },\n      animate: {\n        opacity: 1,\n        y: 0\n      },\n      exit: {\n        opacity: 0,\n        y: 10\n      },\n      transition: {\n        duration: 0.2\n      },\n      className: classes.traitTooltip,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.traitTooltipHeader,\n        style: {\n          backgroundColor: getTraitCategoryColor(trait.category)\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: trait.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2219,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Tier \", trait.tier, \" \", trait.category]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2220,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2216,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.traitTooltipContent,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: trait.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2223,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.traitTooltipStats,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.traitTooltipStat,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Environmental Relevance\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2226,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `${classes.traitTooltipStatValue} ${relevance > 0 ? classes.positive : relevance < 0 ? classes.negative : ''}`,\n              children: relevance.toFixed(2)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2227,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2225,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2224,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2222,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2209,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render environmental controls\n  const renderEnvironmentControls = () => {\n    const environmentControls = [{\n      id: 'temperature',\n      name: 'Temperature',\n      min: -1,\n      max: 1\n    }, {\n      id: 'light_conditions',\n      name: 'Light Conditions',\n      min: -1,\n      max: 1\n    }, {\n      id: 'terrain_harshness',\n      name: 'Terrain Harshness',\n      min: -1,\n      max: 1\n    }, {\n      id: 'resource_scarcity',\n      name: 'Resource Scarcity',\n      min: -1,\n      max: 1\n    }, {\n      id: 'ether_density',\n      name: 'Ether Density',\n      min: -1,\n      max: 1\n    }, {\n      id: 'pressure_gravity',\n      name: 'Pressure/Gravity',\n      min: -1,\n      max: 1\n    }];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.environmentControls,\n      children: [/*#__PURE__*/_jsxDEV(RevealText, {\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: classes.controlsTitle,\n          children: \"Environmental Stressors\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2251,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2250,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.environmentSliders,\n        children: environmentControls.map(control => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.sliderContainer,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.sliderLabel,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: control.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2258,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `\n                  ${classes.sliderValue} \n                  ${environment[control.id] > 0 ? classes.positive : environment[control.id] < 0 ? classes.negative : ''}\n                `,\n              children: environment[control.id].toFixed(1)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2259,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2257,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: control.min,\n            max: control.max,\n            step: \"0.1\",\n            value: environment[control.id],\n            onChange: e => setEnvironment(prev => ({\n              ...prev,\n              [control.id]: parseFloat(e.target.value)\n            })),\n            className: classes.slider\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2266,\n            columnNumber: 15\n          }, this)]\n        }, control.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2256,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2254,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.adaptationStats,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.adaptationStat,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Total Effective Stress:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2286,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.stressBar,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.stressBarFill,\n              style: {\n                width: `${totalEffectiveStress * 100}%`,\n                backgroundColor: totalEffectiveStress > 0.7 ? '#B54B4B' : totalEffectiveStress > 0.4 ? '#C99846' : '#5C9D8B'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2288,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: totalEffectiveStress.toFixed(2)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2298,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2287,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2285,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.adaptationStat,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Adaptation Probability:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2302,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.stressBar,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.stressBarFill,\n              style: {\n                width: `${adaptationProbability * 100}%`,\n                backgroundColor: adaptationProbability > 0.7 ? '#B54B4B' : adaptationProbability > 0.4 ? '#C99846' : '#5C9D8B'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2304,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: adaptationProbability.toFixed(2)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2314,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2303,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2301,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2284,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2249,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render body shape selector\n  const renderBodyShapeSelector = () => {\n    return /*#__PURE__*/_jsxDEV(motion.div, {\n      className: classes.bodyShapeSelector,\n      initial: {\n        y: -50,\n        opacity: 0\n      },\n      animate: {\n        y: 0,\n        opacity: 1\n      },\n      transition: {\n        duration: 0.4,\n        type: 'spring',\n        stiffness: 120\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.bodyShapeGrid,\n        children: bodyShapes.map(shape => /*#__PURE__*/_jsxDEV(motion.div, {\n          className: `${classes.bodyShapeCard} ${selectedBodyShape === shape.id ? classes.selectedShape : ''}`,\n          onClick: () => changeBodyShape(shape.id),\n          whileHover: {\n            scale: 1.05,\n            boxShadow: `0 5px 20px rgba(${parseInt(shape.color.slice(1, 3), 16)}, \n                                            ${parseInt(shape.color.slice(3, 5), 16)}, \n                                            ${parseInt(shape.color.slice(5, 7), 16)}, 0.4)`\n          },\n          style: {\n            backgroundColor: `${shape.color}22`\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.bodyShapeIcon,\n            style: {\n              backgroundColor: shape.color\n            },\n            children: shape.icon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2345,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.bodyShapeInfo,\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: shape.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2349,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.elementTag,\n              children: shape.element\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2350,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: shape.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2351,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2348,\n            columnNumber: 15\n          }, this), selectedBodyShape === shape.id && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.activeIndicator,\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Active\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2355,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2354,\n            columnNumber: 17\n          }, this)]\n        }, shape.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2333,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2331,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2325,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render trait details panel\n  const renderTraitDetails = () => {\n    var _traitCategories$find, _trait$synthesis, _traitCategories$find2;\n    if (!selectedTrait) return null;\n    const trait = selectedTrait;\n    const categoryName = ((_traitCategories$find = traitCategories.find(c => c.id === trait.category)) === null || _traitCategories$find === void 0 ? void 0 : _traitCategories$find.name) || trait.category;\n    const relevance = calculateEnvironmentalRelevance(trait);\n\n    // Find parent trait if available\n    let parentTrait = null;\n    if (trait.tier > 0 && trait.parentId) {\n      parentTrait = findTraitById(trait.parentId);\n    }\n\n    // Get synthesized trait if available\n    const synthesizedTrait = (_trait$synthesis = trait.synthesis) === null || _trait$synthesis === void 0 ? void 0 : _trait$synthesis.result;\n    return /*#__PURE__*/_jsxDEV(motion.div, {\n      className: classes.traitDetails,\n      initial: {\n        opacity: 0,\n        y: 20\n      },\n      animate: {\n        opacity: 1,\n        y: 0\n      },\n      exit: {\n        opacity: 0,\n        y: 20\n      },\n      transition: {\n        duration: 0.3\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.traitDetailsHeader,\n        style: {\n          backgroundColor: getTraitCategoryColor(trait.category)\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.traitHeaderContent,\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: classes.traitName,\n            children: trait.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2395,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.traitMeta,\n            children: [categoryName, \" \\u2022 Tier \", trait.tier]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2396,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2394,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: classes.closeButton,\n          onClick: () => setSelectedTrait(null),\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2400,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2390,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.traitDetailsContent,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.traitDescription,\n          children: trait.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2409,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.traitDetailsSection,\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: classes.sectionTitle,\n            children: \"Environmental Affinities\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2414,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.affinitiesGrid,\n            children: Object.entries(trait.affinities).map(([stressor, value]) => {\n              if (value === 0) return null;\n              const stressorName = stressor.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: classes.affinityItem,\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: classes.affinityName,\n                  children: stressorName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2425,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: `\n                      ${classes.affinityValue} \n                      ${value > 0 ? classes.positive : classes.negative}\n                    `,\n                  children: [value > 0 ? '+' : '', value.toFixed(1)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2426,\n                  columnNumber: 21\n                }, this)]\n              }, stressor, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2424,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2415,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.environmentalRelevance,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.relevanceLabel,\n              children: \"Environmental Relevance\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2438,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `\n                ${classes.relevanceValue} \n                ${relevance > 0 ? classes.positive : relevance < 0 ? classes.negative : ''}\n              `,\n              children: relevance.toFixed(2)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2441,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2437,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2413,\n          columnNumber: 11\n        }, this), parentTrait && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.traitDetailsSection,\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: classes.sectionTitle,\n            children: \"Evolutionary Origin\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2452,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.parentTrait,\n            onClick: () => handleTraitClick(parentTrait),\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.parentTraitIcon,\n              style: {\n                backgroundColor: getTraitCategoryColor(parentTrait.category)\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2457,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.parentTraitDetails,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: classes.parentTraitName,\n                children: parentTrait.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2461,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: classes.parentTraitCategory,\n                children: [(_traitCategories$find2 = traitCategories.find(c => c.id === parentTrait.category)) === null || _traitCategories$find2 === void 0 ? void 0 : _traitCategories$find2.name, \" \\u2022 Tier \", parentTrait.tier]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2462,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2460,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2453,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2451,\n          columnNumber: 13\n        }, this), selectedTraitConnections.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.traitDetailsSection,\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: classes.sectionTitle,\n            children: \"Connected Traits\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2472,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.connectionsList,\n            children: selectedTraitConnections.map(connection => {\n              var _traitCategories$find3;\n              const compatibility = calculateCompatibility(trait, connection);\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: classes.connectionItem,\n                onClick: () => handleTraitClick(connection),\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: classes.connectionItemLeft,\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: classes.connectionDot,\n                    style: {\n                      backgroundColor: getTraitCategoryColor(connection.category)\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2484,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: classes.connectionDetails,\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: classes.connectionName,\n                      children: connection.name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2489,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: classes.connectionCategory,\n                      children: [(_traitCategories$find3 = traitCategories.find(c => c.id === connection.category)) === null || _traitCategories$find3 === void 0 ? void 0 : _traitCategories$find3.name, \" \\u2022 Tier \", connection.tier]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 2490,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 2488,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2483,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `\n                        ${classes.compatibilityBadge}\n                        ${compatibility > 0.7 ? classes.highCompatibility : compatibility > 0.5 ? classes.mediumCompatibility : classes.lowCompatibility}\n                      `,\n                  children: compatibility.toFixed(2)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 2495,\n                  columnNumber: 23\n                }, this)]\n              }, connection.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 2478,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2473,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2471,\n          columnNumber: 13\n        }, this), synthesizedTrait && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.traitDetailsSection,\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: classes.sectionTitle,\n            children: \"Synthesis Potential\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2512,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.synthesisPotential,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.synthesisName,\n              children: synthesizedTrait.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2514,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.synthesisDescription,\n              children: synthesizedTrait.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2517,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.synthesisCondition,\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Trigger Condition:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2521,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: classes.conditionName,\n                children: trait.synthesis.condition.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2522,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2520,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2513,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2511,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2408,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2383,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Main render\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.evolutionSimulator,\n    onMouseMove: handleMouseMove,\n    children: [/*#__PURE__*/_jsxDEV(Background, {\n      cursorPosition: cursorPosition,\n      setCursorPosition: setCursorPosition\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2543,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MeteorShower, {\n      height: \"100vh\",\n      zIndex: 2,\n      trailColor: \"rgba(191, 173, 127, 0.8)\",\n      glowColor: \"rgba(207, 185, 130, 0.6)\",\n      coreColor: \"rgba(255, 248, 220, 1)\",\n      meteorDensity: 20,\n      meteorMinSize: 1,\n      meteorMaxSize: 2.5,\n      meteorSpeed: 0.08,\n      trailLength: 300,\n      trailSegments: 80,\n      enableParallax: true,\n      parallaxIntensity: 0.15,\n      mode: \"arc\",\n      staggered: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2546,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n      ref: headerRef,\n      className: classes.header,\n      children: /*#__PURE__*/_jsxDEV(ScrollingTextAnimation, {\n        scrollConfig: {\n          startPosition: 0,\n          endPosition: 300,\n          initialY: -30,\n          finalY: 0,\n          clampValues: true\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: classes.title,\n          children: \"Crescent Evolution System\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2575,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: classes.subtitle,\n          children: \"Explore the interconnected trait networks that drive evolution through Bayesian natural selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2576,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2566,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2565,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(motion.div, {\n      className: classes.controlPanel,\n      initial: {\n        y: -20,\n        opacity: 0\n      },\n      animate: {\n        y: 0,\n        opacity: 1\n      },\n      transition: {\n        delay: 0.5,\n        duration: 0.4\n      },\n      children: [renderBodyShapeSelector(), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.controlBar,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.filterControls,\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: `${classes.filterButton} ${filterMode === 'all' ? classes.active : ''}`,\n            onClick: () => handleFilterModeChange('all'),\n            children: \"All Traits\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2595,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `${classes.filterButton} ${filterMode === 'relevance' ? classes.active : ''}`,\n            onClick: () => handleFilterModeChange('relevance'),\n            children: \"By Relevance\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2601,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `${classes.filterButton} ${filterMode === 'category' ? classes.active : ''}`,\n            onClick: () => handleFilterModeChange('category'),\n            disabled: !selectedTrait,\n            children: \"By Category\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2607,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2594,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.legendControls,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.legendItems,\n            children: traitCategories.map(category => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.legendItem,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: classes.legendColor,\n                style: {\n                  backgroundColor: category.color\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2621,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: classes.legendName,\n                children: category.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2625,\n                columnNumber: 19\n              }, this)]\n            }, category.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2620,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2618,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2617,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2593,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2583,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: containerRef,\n      className: classes.networkVisualizer,\n      onClick: handleCanvasClick,\n      onMouseMove: handleCanvasMouseMove,\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        className: classes.networkCanvas\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2640,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AnimatePresence, {\n        children: hoveredTrait && renderTraitTooltip()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2646,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2634,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.informationPanels,\n      children: [/*#__PURE__*/_jsxDEV(motion.div, {\n        className: classes.envPanel,\n        initial: {\n          opacity: 0,\n          x: 50\n        },\n        animate: {\n          opacity: 1,\n          x: 0\n        },\n        transition: {\n          delay: 0.7,\n          duration: 0.5\n        },\n        children: renderEnvironmentControls()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2654,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AnimatePresence, {\n        children: selectedTrait && /*#__PURE__*/_jsxDEV(motion.div, {\n          className: classes.traitPanel,\n          initial: {\n            opacity: 0,\n            y: 30\n          },\n          animate: {\n            opacity: 1,\n            y: 0\n          },\n          exit: {\n            opacity: 0,\n            y: 30\n          },\n          transition: {\n            duration: 0.4\n          },\n          children: renderTraitDetails()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2666,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2664,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2652,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(motion.div, {\n      className: classes.instructionOverlay,\n      initial: {\n        opacity: 1\n      },\n      animate: {\n        opacity: isLoaded ? 0 : 1\n      },\n      transition: {\n        delay: 3,\n        duration: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.instructionContent,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.instructionIcon,\n          children: \"\\u29CD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2687,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Click on the central body shape or any trait to explore connections\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2688,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2686,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2680,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"#content\",\n      className: classes.skipLink,\n      children: \"Skip to main content\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2693,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 2538,\n    columnNumber: 5\n  }, this);\n};\n_s(EvolutionSimulator, \"/7VepYMsp6AHV/XgrQoiovcAlN8=\", false, function () {\n  return [useInView, useInView, useStyles];\n});\n_c = EvolutionSimulator;\nexport default EvolutionSimulator;\nvar _c;\n$RefreshReg$(_c, \"EvolutionSimulator\");","map":{"version":3,"names":["React","useState","useEffect","useRef","motion","AnimatePresence","useInView","Background","MeteorShower","ScrollingTextAnimation","RevealText","useStyles","jsxDEV","_jsxDEV","EvolutionSimulator","_s","cursorPosition","setCursorPosition","x","y","isLoaded","setIsLoaded","selectedBodyShape","setSelectedBodyShape","selectedTrait","setSelectedTrait","selectedTraitConnections","setSelectedTraitConnections","showBodyShapeSelector","setShowBodyShapeSelector","totalEffectiveStress","setTotalEffectiveStress","adaptationProbability","setAdaptationProbability","hoveredTrait","setHoveredTrait","showAllTraits","setShowAllTraits","filterMode","setFilterMode","environment","setEnvironment","temperature","light_conditions","terrain_harshness","resource_scarcity","ether_density","pressure_gravity","canvasRef","containerRef","networkRef","animationFrameRef","bodyShapeIconRef","traitRefs","headerRef","contentRef","headerInView","once","threshold","contentInView","classes","bodyShapes","id","name","description","icon","element","color","traitCategories","getTraitsByBodyShape","bodyShapeId","baseTraits","locomotion","tier","affinities","connections","compatible","synthesis","condition","result","metabolism","sensory","etheric","thermal","advancedTraits","parentId","specializedTraits","bipedal","quadrupedal","serpentine","amorphous","insectoid","avian","aquatic","allTraits","Object","keys","forEach","category","getAllTraits","traitsByCategory","trait","push","findTraitById","find","isTraitCompatibleWithBodyShape","includes","calculateCompatibility","trait1","trait2","stressors","totalSimilarity","totalWeight","stressor","val1","val2","similarity","Math","min","abs","weight","calculateCombinedAffinity","traitsWithAffinity","filter","undefined","length","sum","reduce","total","tanh","sqrt","calculateEffectiveStress","stressorValue","combinedAffinity","ratio","sigmoid","exp","calculateTotalEffectiveStress","stressorValues","map","stress","numStressors","calculateAdaptationProbability","duration","adaptationPressure","calculateEnvironmentalRelevance","relevanceScore","traitAffinity","getTraitCategoryColor","categoryId","c","getTraitGlowIntensity","relevance","scaledRelevance","handleMouseMove","e","clientX","clientY","handleTraitClick","connectionId","connectedTrait","parentTrait","t","handleBodyShapeClick","changeBodyShape","shapeId","current","canvas","container","ctx","getContext","updateCanvasDimensions","width","window","innerWidth","height","innerHeight","centerX","centerY","addEventListener","animate","clearRect","traitPositions","drawAmbientBackground","drawMysticalSymbols","maxRadius","tierRadius","drawTierCircles","tier1","tier2","tier3","categoryIndex","categoryAngleOffset","PI","drawCategorySector","traits","traitCount","arcWidth","angleSpread","index","traitAngle","radius","radiusVariation","random","finalRadius","cos","sin","angle","getNodeRadius","drawConnections","drawParentChildConnections","traitId","categoryColor","isSelected","isConnected","some","isVisible","drawTraitNode","drawCentralBodyShape","requestAnimationFrame","gradient","createRadialGradient","max","bodyShape","shape","baseColor","getRGBComponents","hexColor","r","parseInt","slice","g","b","darkColor","addColorStop","fillStyle","fillRect","particleCount","i","size","opacity","globalAlpha","beginPath","arc","fill","symbols","symbolCount","font","textAlign","textBaseline","distance","symbol","floor","fillText","strokeStyle","setLineDash","lineWidth","stroke","tierNames","tierPosition","lineCount","moveTo","lineTo","startAngle","arcAngle","endAngle","labelAngle","labelRadius","labelX","labelY","save","translate","rotate","toUpperCase","restore","sourcePos","targetId","targetPos","sourceVisible","targetVisible","compatibility","drawEtherealConnection","childPos","parentPos","childVisible","parentVisible","drawEvolutionaryConnection","x1","y1","x2","y2","midX","midY","pullFactor","controlX","controlY","createLinearGradient","sourceColor","targetColor","quadraticCurveTo","shadowColor","shadowBlur","posX","pow","posY","childX","childY","parentX","parentY","childTrait","evolutionGradient","childColor","parentColor","midPoint","getPointOnQuadraticCurve","drawEnergyFlow","cx","cy","Date","now","particleT","pointOnCurve","baseSize","nodeSize","glowIntensity","auraSize","ringSegments","ringShift","segmentAngle","nextSegmentAngle","adjustColorBrightness","toString","symbolRadius","symbolAngle","symbolX","symbolY","pulseIntensity","labelDistance","nameWidth","measureText","bodyShapeSize","outerGlow","bodyShapeColor","sigilCount","sigilRadius","hex","percent","adjustedR","adjustedG","adjustedB","round","timer","setTimeout","removeEventListener","clearTimeout","cancelAnimationFrame","probability","handleCanvasClick","rect","getBoundingClientRect","mouseX","left","mouseY","top","clickedTrait","traitRef","traitDistance","handleCanvasMouseMove","hovered","handleFilterModeChange","mode","renderTraitTooltip","div","initial","exit","transition","className","traitTooltip","children","traitTooltipHeader","style","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","traitTooltipContent","traitTooltipStats","traitTooltipStat","traitTooltipStatValue","positive","negative","toFixed","renderEnvironmentControls","environmentControls","controlsTitle","environmentSliders","control","sliderContainer","sliderLabel","sliderValue","type","step","value","onChange","prev","parseFloat","target","slider","adaptationStats","adaptationStat","stressBar","stressBarFill","renderBodyShapeSelector","bodyShapeSelector","stiffness","bodyShapeGrid","bodyShapeCard","selectedShape","onClick","whileHover","scale","boxShadow","bodyShapeIcon","bodyShapeInfo","elementTag","activeIndicator","renderTraitDetails","_traitCategories$find","_trait$synthesis","_traitCategories$find2","categoryName","synthesizedTrait","traitDetails","traitDetailsHeader","traitHeaderContent","traitName","traitMeta","closeButton","traitDetailsContent","traitDescription","traitDetailsSection","sectionTitle","affinitiesGrid","entries","stressorName","split","word","charAt","join","affinityItem","affinityName","affinityValue","environmentalRelevance","relevanceLabel","relevanceValue","parentTraitIcon","parentTraitDetails","parentTraitName","parentTraitCategory","connectionsList","connection","_traitCategories$find3","connectionItem","connectionItemLeft","connectionDot","connectionDetails","connectionName","connectionCategory","compatibilityBadge","highCompatibility","mediumCompatibility","lowCompatibility","synthesisPotential","synthesisName","synthesisDescription","synthesisCondition","conditionName","evolutionSimulator","onMouseMove","zIndex","trailColor","glowColor","coreColor","meteorDensity","meteorMinSize","meteorMaxSize","meteorSpeed","trailLength","trailSegments","enableParallax","parallaxIntensity","staggered","ref","header","scrollConfig","startPosition","endPosition","initialY","finalY","clampValues","title","subtitle","controlPanel","delay","controlBar","filterControls","filterButton","active","disabled","legendControls","legendItems","legendItem","legendColor","legendName","networkVisualizer","networkCanvas","informationPanels","envPanel","traitPanel","instructionOverlay","instructionContent","instructionIcon","href","skipLink","_c","$RefreshReg$"],"sources":["/home/valeria/Documents/Crucible/frontend/src/components/sections/codex/creators/creatorshowcase/EvolutionSimulatorConceptShowcase.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { motion, AnimatePresence, useInView } from 'framer-motion';\nimport Background from '../../../core/Background';\nimport MeteorShower from '../../../../core/effects/cosmiceffects/MeteorShower';\nimport ScrollingTextAnimation from '../../../../core/effects/ScrollingTextAnimation';\nimport RevealText from '../../../../core/effects/RevealText';\nimport useStyles from './evolutionSimulatorStyles';\n\nconst EvolutionSimulator = () => {\n  // State management\n  const [cursorPosition, setCursorPosition] = useState({ x: 0, y: 0 });\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [selectedBodyShape, setSelectedBodyShape] = useState('quadrupedal');\n  const [selectedTrait, setSelectedTrait] = useState(null);\n  const [selectedTraitConnections, setSelectedTraitConnections] = useState([]);\n  const [showBodyShapeSelector, setShowBodyShapeSelector] = useState(false);\n  const [totalEffectiveStress, setTotalEffectiveStress] = useState(0);\n  const [adaptationProbability, setAdaptationProbability] = useState(0);\n  const [hoveredTrait, setHoveredTrait] = useState(null);\n  const [showAllTraits, setShowAllTraits] = useState(true);\n  const [filterMode, setFilterMode] = useState('all'); // 'all', 'category', 'relevance'\n\n  // Environment state with default values\n  const [environment, setEnvironment] = useState({\n    temperature: 0.4,\n    light_conditions: 0.3,\n    terrain_harshness: 0.5,\n    resource_scarcity: 0.2,\n    ether_density: 0.6,\n    pressure_gravity: 0.4\n  });\n\n  // Canvas and animation refs\n  const canvasRef = useRef(null);\n  const containerRef = useRef(null);\n  const networkRef = useRef(null);\n  const animationFrameRef = useRef(null);\n  const bodyShapeIconRef = useRef(null);\n  const traitRefs = useRef({});\n  const headerRef = useRef(null);\n  const contentRef = useRef(null);\n\n  // Header in view animation\n  const headerInView = useInView(headerRef, { once: true, threshold: 0.2 });\n  const contentInView = useInView(contentRef, { once: true, threshold: 0.1 });\n\n  // Custom styling hook\n  const classes = useStyles();\n\n  // Body shapes data with icons and elemental affiliations\n  const bodyShapes = [\n    { \n      id: 'bipedal', \n      name: 'Bipedal', \n      description: 'Upright forms with manipulative upper limbs',\n      icon: '⚡', // Lightning symbol for bipedal\n      element: 'Air',\n      color: '#7D6B9E'\n    },\n    { \n      id: 'quadrupedal', \n      name: 'Quadrupedal', \n      description: 'Four-limbed forms optimized for stability and movement',\n      icon: '⛰️', // Mountain for quadrupedal\n      element: 'Earth',\n      color: '#A67C52'\n    },\n    { \n      id: 'serpentine', \n      name: 'Serpentine', \n      description: 'Elongated, limbless forms specialized for flexibility',\n      icon: '∫', // Integral symbol representing curves\n      element: 'Void',\n      color: '#5C9D8B'\n    },\n    { \n      id: 'amorphous', \n      name: 'Amorphous', \n      description: 'Malleable forms without fixed structure',\n      icon: '~', // Tilde for amorphous\n      element: 'Ether',\n      color: '#C99846'\n    },\n    { \n      id: 'insectoid', \n      name: 'Multi-limbed', \n      description: 'Multi-limbed, segmented forms',\n      icon: '∏', // Pi symbol for multiple limbs\n      element: 'Flesh',\n      color: '#B54B4B'\n    },\n    { \n      id: 'avian', \n      name: 'Avian', \n      description: 'Forms optimized for flight and aerial movement',\n      icon: '⩜', // Wind symbol for avian\n      element: 'Sky',\n      color: '#7D6B9E'\n    },\n    { \n      id: 'aquatic', \n      name: 'Aquatic', \n      description: 'Forms specialized for water environments',\n      icon: '≈', // Water symbol for aquatic\n      element: 'Water',\n      color: '#5C9D8B'\n    }\n  ];\n\n  // Trait categories with color assignments\n  const traitCategories = [\n    { id: 'locomotion', name: 'Locomotion', color: '#7D6B9E' },\n    { id: 'metabolism', name: 'Metabolism', color: '#5C9D8B' },\n    { id: 'sensory', name: 'Sensory Acuity', color: '#C99846' },\n    { id: 'etheric', name: 'Etheric Adaptation', color: '#B54B4B' },\n    { id: 'thermal', name: 'Thermal Regulation', color: '#A67C52' }\n  ];\n\n  // Get traits based on selected body shape\n  const getTraitsByBodyShape = (bodyShapeId) => {\n    // Base traits that all body shapes share\n    const baseTraits = {\n      locomotion: [\n        {\n          id: 'running',\n          name: 'Swift Limbs',\n          tier: 1,\n          affinities: {\n            terrain_harshness: 0.7,\n            pressure_gravity: 0.4,\n            temperature: 0.2,\n            resource_scarcity: -0.3,\n            light_conditions: 0.1,\n            ether_density: 0\n          },\n          description: 'Limbs designed for quick locomotion across varied terrain.',\n          connections: ['enhanced_muscle', 'reflective_scales'],\n          compatible: ['quadrupedal', 'bipedal', 'insectoid'],\n          synthesis: {\n            condition: 'high_stress',\n            result: {\n              name: 'Phase Shifting Appendages',\n              description: 'Limbs that can temporarily phase through solid matter, allowing movement through obstacles.'\n            }\n          }\n        },\n        {\n          id: 'climbing',\n          name: 'Grasping Appendages',\n          tier: 1,\n          affinities: {\n            terrain_harshness: 0.8,\n            pressure_gravity: 0.3,\n            resource_scarcity: -0.2,\n            temperature: 0,\n            light_conditions: 0.1,\n            ether_density: 0\n          },\n          description: 'Specialized limb structures with superior grip for vertical movement.',\n          connections: ['enhanced_muscle', 'sonar_mapping'],\n          compatible: ['bipedal', 'quadrupedal', 'insectoid'],\n          synthesis: {\n            condition: 'extreme_gravity',\n            result: {\n              name: 'Gravity-Defying Grips',\n              description: 'Appendages capable of selectively negating gravitational forces at contact points.'\n            }\n          }\n        },\n        {\n          id: 'webbed',\n          name: 'Webbed Appendages',\n          tier: 1,\n          affinities: {\n            terrain_harshness: -0.4,\n            pressure_gravity: 0.1,\n            resource_scarcity: -0.1,\n            temperature: -0.2,\n            light_conditions: 0,\n            ether_density: 0\n          },\n          description: 'Limbs with membrane structures optimized for aquatic movement.',\n          connections: ['ether_sensing', 'thick_blubber'],\n          compatible: ['aquatic', 'bipedal', 'quadrupedal'],\n          synthesis: {\n            condition: 'aquatic_etheric',\n            result: {\n              name: 'Dimensional Current Webs',\n              description: 'Membranes that can manipulate water currents through subtle etheric manipulations.'\n            }\n          }\n        },\n        {\n          id: 'slithering',\n          name: 'Sinuous Musculature',\n          tier: 1,\n          affinities: {\n            terrain_harshness: 0.5,\n            pressure_gravity: 0.3,\n            resource_scarcity: -0.1,\n            temperature: 0.2,\n            light_conditions: -0.2,\n            ether_density: 0\n          },\n          description: 'Highly coordinated muscle structure allowing movement without limbs.',\n          connections: ['vibration_detection', 'reflective_scales'],\n          compatible: ['serpentine'],\n          synthesis: {\n            condition: 'extreme_adaptability',\n            result: {\n              name: 'Undulatory Phase Motion',\n              description: 'Movement through wave-like dimensional shifts rather than physical undulation.'\n            }\n          }\n        },\n        {\n          id: 'flight',\n          name: 'Aerial Locomotion',\n          tier: 1,\n          affinities: {\n            terrain_harshness: -0.3,\n            pressure_gravity: -0.7,\n            resource_scarcity: -0.2,\n            temperature: 0.1,\n            light_conditions: 0.6,\n            ether_density: 0.2\n          },\n          description: 'Wing structures and lightweight skeletal system enabling flight.',\n          connections: ['acute_vision', 'heat_vents'],\n          compatible: ['avian', 'insectoid'],\n          synthesis: {\n            condition: 'ethereal_skies',\n            result: {\n              name: 'Aetheric Glide',\n              description: 'Wings that interact with etheric currents, enabling flight through magical energy rather than air.'\n            }\n          }\n        },\n        {\n          id: 'shapeshifting',\n          name: 'Morphic Structure',\n          tier: 1,\n          affinities: {\n            terrain_harshness: 0.3,\n            pressure_gravity: 0.2,\n            resource_scarcity: -0.3,\n            temperature: 0.1,\n            light_conditions: 0,\n            ether_density: 0.6\n          },\n          description: 'Fluid body structure capable of adapting shape for mobility.',\n          connections: ['omnivore', 'ether_channeling'],\n          compatible: ['amorphous'],\n          synthesis: {\n            condition: 'etheric_saturation',\n            result: {\n              name: 'Dimensional Fluidity',\n              description: 'Ability to flow between dimensional planes, existing partially in multiple realities simultaneously.'\n            }\n          }\n        }\n      ],\n      metabolism: [\n        {\n          id: 'carnivore',\n          name: 'Carnivore Digestion',\n          tier: 1,\n          affinities: {\n            resource_scarcity: 0.5,\n            temperature: 0.3,\n            terrain_harshness: 0.1,\n            light_conditions: 0,\n            pressure_gravity: 0,\n            ether_density: 0\n          },\n          description: 'Specialized digestive system optimized for meat processing.',\n          connections: ['enhanced_muscle', 'acute_vision'],\n          compatible: ['all'],\n          synthesis: {\n            condition: 'apex_predator',\n            result: {\n              name: 'Essence Extraction',\n              description: 'Ability to consume and metabolize the life essence of prey beyond mere physical substance.'\n            }\n          }\n        },\n        {\n          id: 'omnivore',\n          name: 'Omnivore Adaptation',\n          tier: 1,\n          affinities: {\n            resource_scarcity: 0.6,\n            terrain_harshness: 0.2,\n            temperature: 0.1,\n            light_conditions: 0,\n            pressure_gravity: 0,\n            ether_density: 0\n          },\n          description: 'Versatile digestive system capable of processing diverse food sources.',\n          connections: ['bioluminescence', 'reflective_scales'],\n          compatible: ['all'],\n          synthesis: {\n            condition: 'scarce_resources',\n            result: {\n              name: 'Universal Digestion',\n              description: 'Capacity to derive nutrients from almost any organic or inorganic substance.'\n            }\n          }\n        },\n        {\n          id: 'photosynthetic',\n          name: 'Photosynthetic Cells',\n          tier: 1,\n          affinities: {\n            light_conditions: 0.9,\n            resource_scarcity: 0.7,\n            temperature: 0.4,\n            terrain_harshness: -0.2,\n            pressure_gravity: 0,\n            ether_density: 0.1\n          },\n          description: 'Cellular structures that can convert light into energy.',\n          connections: ['ether_sensing', 'reflective_scales'],\n          compatible: ['all'],\n          synthesis: {\n            condition: 'high_light_ether',\n            result: {\n              name: 'Etheric Photosynthesis',\n              description: 'Advanced cells that can convert ambient etheric energy into biological energy.'\n            }\n          }\n        },\n        {\n          id: 'ether_consumption',\n          name: 'Ether Consumption',\n          tier: 1,\n          affinities: {\n            ether_density: 0.9,\n            resource_scarcity: 0.6,\n            temperature: -0.1,\n            terrain_harshness: -0.1,\n            pressure_gravity: 0,\n            light_conditions: -0.3\n          },\n          description: 'Metabolic pathway that processes ambient etheric energy.',\n          connections: ['ether_channeling', 'bioluminescence'],\n          compatible: ['all'],\n          synthesis: {\n            condition: 'etheric_saturation',\n            result: {\n              name: 'Reality Consumption',\n              description: 'Ability to metabolize the fabric of reality itself, subsisting on dimensional energies.'\n            }\n          }\n        }\n      ],\n      sensory: [\n        {\n          id: 'acute_vision',\n          name: 'Acute Vision',\n          tier: 1,\n          affinities: {\n            light_conditions: 0.8,\n            terrain_harshness: 0.3,\n            resource_scarcity: 0.2,\n            temperature: 0,\n            pressure_gravity: 0,\n            ether_density: 0\n          },\n          description: 'Highly developed visual organs with exceptional acuity.',\n          connections: ['enhanced_muscle', 'eagle_eyes'],\n          compatible: ['all'],\n          synthesis: {\n            condition: 'extreme_light',\n            result: {\n              name: 'Reality Perception',\n              description: 'Vision that perceives multiple planes of reality simultaneously, seeing beyond physical existence.'\n            }\n          }\n        },\n        {\n          id: 'sonar_mapping',\n          name: 'Echolocation',\n          tier: 1,\n          affinities: {\n            light_conditions: -0.8,\n            terrain_harshness: 0.5,\n            pressure_gravity: 0.1,\n            temperature: 0,\n            resource_scarcity: 0,\n            ether_density: 0.2\n          },\n          description: 'Ability to emit and detect sound waves for environmental mapping.',\n          connections: ['vibration_detection', 'bioluminescence'],\n          compatible: ['all'],\n          synthesis: {\n            condition: 'extreme_darkness',\n            result: {\n              name: 'Dimensional Sonar',\n              description: 'Echolocation that can detect entities and structures across dimensional boundaries.'\n            }\n          }\n        },\n        {\n          id: 'vibration_detection',\n          name: 'Vibration Detection',\n          tier: 1,\n          affinities: {\n            terrain_harshness: 0.6,\n            pressure_gravity: 0.4,\n            light_conditions: -0.3,\n            temperature: 0,\n            resource_scarcity: 0,\n            ether_density: 0.1\n          },\n          description: 'Specialized organs that can detect minute vibrations through various media.',\n          connections: ['sonar_mapping', 'thick_blubber'],\n          compatible: ['all'],\n          synthesis: {\n            condition: 'extreme_sensitivity',\n            result: {\n              name: 'Temporal Tremor Sense',\n              description: 'Ability to detect vibrations through time, sensing events before they occur.'\n            }\n          }\n        },\n        {\n          id: 'ether_sensing',\n          name: 'Ether Sensing',\n          tier: 1,\n          affinities: {\n            ether_density: 0.8,\n            light_conditions: 0.2,\n            terrain_harshness: 0,\n            temperature: 0,\n            resource_scarcity: 0,\n            pressure_gravity: 0.1\n          },\n          description: 'Specialized organs that can detect and interpret etheric energy patterns.',\n          connections: ['photosynthetic', 'ether_channeling'],\n          compatible: ['all'],\n          synthesis: {\n            condition: 'etheric_saturation',\n            result: {\n              name: 'Soul Reading',\n              description: 'Perception that can detect and analyze the essence of living beings beyond physical form.'\n            }\n          }\n        }\n      ],\n      etheric: [\n        {\n          id: 'ether_sensing',\n          name: 'Ether Sensing',\n          tier: 1,\n          affinities: {\n            ether_density: 0.8,\n            light_conditions: 0.2,\n            terrain_harshness: 0,\n            temperature: 0,\n            resource_scarcity: 0,\n            pressure_gravity: 0.1\n          },\n          description: 'Specialized organs that can detect and interpret etheric energy patterns.',\n          connections: ['photosynthetic', 'ether_channeling'],\n          compatible: ['all'],\n          synthesis: {\n            condition: 'etheric_saturation',\n            result: {\n              name: 'Soul Reading',\n              description: 'Perception that can detect and analyze the essence of living beings beyond physical form.'\n            }\n          }\n        },\n        {\n          id: 'ether_channeling',\n          name: 'Ether Channeling',\n          tier: 1,\n          affinities: {\n            ether_density: 0.9,\n            temperature: 0.3,\n            light_conditions: 0.3,\n            terrain_harshness: 0,\n            resource_scarcity: -0.2,\n            pressure_gravity: 0.1\n          },\n          description: 'Biological structures capable of directing and manipulating etheric energies.',\n          connections: ['ether_sensing', 'bioluminescence'],\n          compatible: ['all'],\n          synthesis: {\n            condition: 'etheric_mastery',\n            result: {\n              name: 'Reality Weaving',\n              description: 'Ability to manipulate the fabric of reality through precise etheric control.'\n            }\n          }\n        },\n        {\n          id: 'bioluminescence',\n          name: 'Bioluminescence',\n          tier: 1,\n          affinities: {\n            light_conditions: -0.6,\n            ether_density: 0.5,\n            resource_scarcity: -0.3,\n            temperature: 0,\n            terrain_harshness: 0,\n            pressure_gravity: 0\n          },\n          description: 'Ability to produce light through biochemical processes.',\n          connections: ['ether_channeling', 'omnivore'],\n          compatible: ['all'],\n          synthesis: {\n            condition: 'dark_ethereal',\n            result: {\n              name: 'Hypnotic Patterns',\n              description: 'Light displays that can induce altered states of consciousness in observers.'\n            }\n          }\n        },\n        {\n          id: 'dimensional_anchor',\n          name: 'Dimensional Anchor',\n          tier: 1,\n          affinities: {\n            ether_density: 0.7,\n            pressure_gravity: 0.6,\n            resource_scarcity: -0.2,\n            temperature: 0,\n            terrain_harshness: 0.2,\n            light_conditions: 0.1\n          },\n          description: 'Etheric organ that stabilizes the creature\\'s position within reality.',\n          connections: ['ether_sensing', 'vibration_detection'],\n          compatible: ['all'],\n          synthesis: {\n            condition: 'reality_flux',\n            result: {\n              name: 'Dimensional Phasing',\n              description: 'Control over personal dimensional state, allowing phasing between planes of existence.'\n            }\n          }\n        }\n      ],\n      thermal: [\n        {\n          id: 'thick_blubber',\n          name: 'Thick Blubber',\n          tier: 1,\n          affinities: {\n            temperature: -0.8,\n            pressure_gravity: 0.3,\n            resource_scarcity: -0.4,\n            terrain_harshness: 0.1,\n            light_conditions: 0,\n            ether_density: 0\n          },\n          description: 'Dense fatty tissue layer providing insulation in cold environments.',\n          connections: ['vibration_detection', 'enhanced_muscle'],\n          compatible: ['all'],\n          synthesis: {\n            condition: 'extreme_cold',\n            result: {\n              name: 'Thermal Void',\n              description: 'Tissues that create a pocket of absolute thermal isolation from the environment.'\n            }\n          }\n        },\n        {\n          id: 'reflective_scales',\n          name: 'Reflective Scales',\n          tier: 1,\n          affinities: {\n            temperature: 0.7,\n            light_conditions: 0.6,\n            terrain_harshness: 0.3,\n            resource_scarcity: -0.2,\n            pressure_gravity: 0,\n            ether_density: 0.1\n          },\n          description: 'Light-reflecting scales that help regulate heat absorption.',\n          connections: ['running', 'photosynthetic'],\n          compatible: ['all'],\n          synthesis: {\n            condition: 'extreme_heat',\n            result: {\n              name: 'Thermal Manipulator Scales',\n              description: 'Scales that can actively redirect and manipulate thermal energy in the environment.'\n            }\n          }\n        },\n        {\n          id: 'heat_vents',\n          name: 'Heat Vents',\n          tier: 1,\n          affinities: {\n            temperature: 0.8,\n            ether_density: 0.3,\n            resource_scarcity: -0.3,\n            terrain_harshness: 0,\n            light_conditions: 0,\n            pressure_gravity: 0\n          },\n          description: 'Specialized structures that can rapidly dissipate excess heat.',\n          connections: ['running', 'ether_channeling'],\n          compatible: ['all'],\n          synthesis: {\n            condition: 'volcanic_environment',\n            result: {\n              name: 'Plasma Channeling',\n              description: 'Ability to vent superheated plasma as a defensive weapon or environmental tool.'\n            }\n          }\n        },\n        {\n          id: 'thermal_conversion',\n          name: 'Thermal Conversion',\n          tier: 1,\n          affinities: {\n            temperature: 0.4,\n            temperature: -0.4, // Adapts to both extremes\n            resource_scarcity: 0.5,\n            ether_density: 0.3,\n            terrain_harshness: 0,\n            light_conditions: 0.1,\n            pressure_gravity: 0\n          },\n          description: 'Cellular structures that convert temperature differentials into usable energy.',\n          connections: ['omnivore', 'ether_sensing'],\n          compatible: ['all'],\n          synthesis: {\n            condition: 'thermal_extremes',\n            result: {\n              name: 'Entropic Manipulation',\n              description: 'Control over thermodynamic entropy, creating areas of perfect order or chaos.'\n            }\n          }\n        }\n      ]\n    };\n    \n    // Advanced traits (tier 2)\n    const advancedTraits = {\n      sensory: [\n        {\n          id: 'eagle_eyes',\n          name: 'Eagle-like Vision',\n          tier: 2,\n          parentId: 'acute_vision',\n          affinities: {\n            light_conditions: 0.9,\n            terrain_harshness: 0.5,\n            resource_scarcity: 0.4,\n            temperature: 0,\n            pressure_gravity: 0,\n            ether_density: 0.1\n          },\n          description: 'Exceptionally developed vision with incredible range and detail perception.',\n          connections: ['acute_vision'],\n          compatible: ['all'],\n          synthesis: {\n            condition: 'apex_perception',\n            result: {\n              name: 'Omniscient Perception',\n              description: 'Vision that transcends physical limitations, seeing through all obstacles across vast distances.'\n            }\n          }\n        },\n        {\n          id: 'void_perception',\n          name: 'Void Perception',\n          tier: 2,\n          parentId: 'ether_sensing',\n          affinities: {\n            ether_density: 0.9,\n            light_conditions: -0.7,\n            resource_scarcity: 0.2,\n            temperature: -0.3,\n            pressure_gravity: 0.5,\n            terrain_harshness: 0.1\n          },\n          description: 'Perception beyond normal reality, sensing the void between dimensions.',\n          connections: ['ether_sensing', 'dimensional_anchor'],\n          compatible: ['all'],\n          synthesis: {\n            condition: 'interdimensional',\n            result: {\n              name: 'Cosmic Awareness',\n              description: 'Consciousness that expands beyond individual perception, connecting to the universe itself.'\n            }\n          }\n        }\n      ],\n      locomotion: [\n        {\n          id: 'enhanced_muscle',\n          name: 'Enhanced Musculature',\n          tier: 2,\n          parentId: 'running',\n          affinities: {\n            terrain_harshness: 0.8,\n            pressure_gravity: 0.7,\n            resource_scarcity: -0.4,\n            temperature: 0.1,\n            light_conditions: 0,\n            ether_density: 0\n          },\n          description: 'Highly developed muscle structures with exceptional strength and endurance.',\n          connections: ['running', 'climbing', 'carnivore', 'acute_vision', 'thick_blubber'],\n          compatible: ['bipedal', 'quadrupedal', 'insectoid'],\n          synthesis: {\n            condition: 'apex_physical',\n            result: {\n              name: 'Force Multiplication Tissues',\n              description: 'Muscles that multiply applied force through micro-dimensional folding.'\n            }\n          }\n        },\n        {\n          id: 'ethereal_movement',\n          name: 'Ethereal Movement',\n          tier: 2,\n          parentId: 'ether_channeling',\n          affinities: {\n            ether_density: 0.9,\n            terrain_harshness: 0.4,\n            pressure_gravity: -0.6,\n            resource_scarcity: -0.3,\n            light_conditions: 0.2,\n            temperature: 0\n          },\n          description: 'Partial phasing allowing movement through solid objects and across dimensional boundaries.',\n          connections: ['ether_channeling', 'dimensional_anchor'],\n          compatible: ['all'],\n          synthesis: {\n            condition: 'ethereal_mastery',\n            result: {\n              name: 'Quantum Teleportation',\n              description: 'Instantaneous movement across any distance through precise manipulation of quantum states.'\n            }\n          }\n        }\n      ],\n      etheric: [\n        {\n          id: 'reality_manipulation',\n          name: 'Reality Manipulation',\n          tier: 2,\n          parentId: 'ether_channeling',\n          affinities: {\n            ether_density: 1.0,\n            pressure_gravity: 0.6,\n            light_conditions: 0.5,\n            resource_scarcity: -0.5,\n            temperature: 0.3,\n            terrain_harshness: 0.4\n          },\n          description: 'Advanced etheric organs capable of warping local reality in limited ways.',\n          connections: ['ether_channeling', 'dimensional_anchor'],\n          compatible: ['all'],\n          synthesis: {\n            condition: 'reality_mastery',\n            result: {\n              name: 'Creation Principle',\n              description: 'Ability to manifest thoughts into physical reality through pure will and etheric control.'\n            }\n          }\n        }\n      ],\n      metabolism: [\n        {\n          id: 'essence_consumption',\n          name: 'Essence Consumption',\n          tier: 2,\n          parentId: 'carnivore',\n          affinities: {\n            resource_scarcity: 0.9,\n            ether_density: 0.7,\n            temperature: 0.2,\n            light_conditions: -0.3,\n            pressure_gravity: 0.1,\n            terrain_harshness: 0.1\n          },\n          description: 'Ability to consume and absorb the essence of prey, including traits and memories.',\n          connections: ['carnivore', 'ether_sensing'],\n          compatible: ['all'],\n          synthesis: {\n            condition: 'apex_consumption',\n            result: {\n              name: 'Soul Assimilation',\n              description: 'Complete absorption of preys consciousness, memories, and spiritual essence.'\n            }\n          }\n        }\n      ],\n      thermal: [\n        {\n          id: 'thermal_projection',\n          name: 'Thermal Projection',\n          tier: 2,\n          parentId: 'heat_vents',\n          affinities: {\n            temperature: 0.9,\n            temperature: -0.5, // Works at both extremes\n            ether_density: 0.6,\n            resource_scarcity: -0.4,\n            terrain_harshness: 0.3,\n            light_conditions: 0.2,\n            pressure_gravity: 0\n          },\n          description: 'Ability to project thermal energy in controlled beams or waves.',\n          connections: ['heat_vents', 'ether_channeling'],\n          compatible: ['all'],\n          synthesis: {\n            condition: 'thermal_mastery',\n            result: {\n              name: 'Absolute Zero Projection',\n              description: 'Projection of perfect cold that freezes all molecular motion in the target area.'\n            }\n          }\n        }\n      ]\n    };\n    \n    // Specialized traits for specific body shapes\n    const specializedTraits = {\n      bipedal: {\n        locomotion: [\n          {\n            id: 'bipedal_agility',\n            name: 'Bipedal Agility',\n            tier: 2,\n            parentId: 'running',\n            affinities: {\n              terrain_harshness: 0.8,\n              pressure_gravity: 0.5,\n              resource_scarcity: -0.2,\n              temperature: 0.2,\n              light_conditions: 0.3,\n              ether_density: 0\n            },\n            description: 'Specialized balance and coordination optimized for upright movement.',\n            connections: ['running', 'climbing'],\n            compatible: ['bipedal'],\n            synthesis: {\n              condition: 'extreme_agility',\n              result: {\n                name: 'Temporal Reflex',\n                description: 'Movement occurring slightly before the decision to move, through temporal manipulation.'\n              }\n            }\n          }\n        ]\n      },\n      quadrupedal: {\n        locomotion: [\n          {\n            id: 'quadrupedal_stability',\n            name: 'Quadrupedal Stability',\n            tier: 2,\n            parentId: 'running',\n            affinities: {\n              terrain_harshness: 0.9,\n              pressure_gravity: 0.7,\n              resource_scarcity: -0.1,\n              temperature: 0.1,\n              light_conditions: 0.1,\n              ether_density: 0\n            },\n            description: 'Enhanced stability and load-bearing capacity from four-limb structure.',\n            connections: ['running', 'enhanced_muscle'],\n            compatible: ['quadrupedal'],\n            synthesis: {\n              condition: 'extreme_stability',\n              result: {\n                name: 'Gravitational Anchor',\n                description: 'Selective control over personal gravitational field providing perfect stability in any conditions.'\n              }\n            }\n          }\n        ]\n      },\n      serpentine: {\n        locomotion: [\n          {\n            id: 'serpentine_flexibility',\n            name: 'Serpentine Flexibility',\n            tier: 2,\n            parentId: 'slithering',\n            affinities: {\n              terrain_harshness: 0.7,\n              pressure_gravity: 0.4,\n              resource_scarcity: -0.1,\n              temperature: 0.1,\n              light_conditions: 0,\n              ether_density: 0.1\n            },\n            description: 'Extreme body flexibility allowing navigation of confined spaces.',\n            connections: ['vibration_detection', 'reflective_scales'],\n            compatible: ['serpentine'],\n            synthesis: {\n              condition: 'extreme_adaptation',\n              result: {\n                name: 'Dimensional Coiling',\n                description: 'Body that can loop through multiple dimensional planes, defying conventional physics.'\n              }\n            }\n          }\n        ]\n      },\n      amorphous: {\n        metabolism: [\n          {\n            id: 'absorptive_assimilation',\n            name: 'Absorptive Assimilation',\n            tier: 2,\n            parentId: 'omnivore',\n            affinities: {\n              resource_scarcity: 0.9,\n              ether_density: 0.5,\n              terrain_harshness: 0.3,\n              temperature: 0.2,\n              light_conditions: -0.1,\n              pressure_gravity: 0\n            },\n            description: 'Ability to absorb and incorporate materials and traits from consumed entities.',\n            connections: ['shapeshifting', 'omnivore'],\n            compatible: ['amorphous'],\n            synthesis: {\n              condition: 'apex_adaptation',\n              result: {\n                name: 'Perfect Mimicry',\n                description: 'Complete assimilation of consumed entities, including memories, abilities, and consciousness.'\n              }\n            }\n          }\n        ]\n      },\n      insectoid: {\n        sensory: [\n          {\n            id: 'compound_perception',\n            name: 'Compound Perception',\n            tier: 2,\n            parentId: 'acute_vision',\n            affinities: {\n              light_conditions: 0.7,\n              terrain_harshness: 0.5,\n              resource_scarcity: 0.2,\n              temperature: 0.1,\n              pressure_gravity: 0.1,\n              ether_density: 0.2\n            },\n            description: 'Multi-faceted visual system providing nearly 360-degree awareness.',\n            connections: ['acute_vision', 'vibration_detection'],\n            compatible: ['insectoid'],\n            synthesis: {\n              condition: 'omnidirectional_mastery',\n              result: {\n                name: 'Quantum Observer',\n                description: 'Simultaneous perception from all possible visual angles through quantum observation.'\n              }\n            }\n          }\n        ]\n      },\n      avian: {\n        sensory: [\n          {\n            id: 'predictive_aerial_mapping',\n            name: 'Aerial Current Sensing',\n            tier: 2,\n            parentId: 'acute_vision',\n            affinities: {\n              light_conditions: 0.6,\n              pressure_gravity: -0.7,\n              terrain_harshness: -0.2,\n              temperature: 0.3,\n              resource_scarcity: 0.1,\n              ether_density: 0.4\n            },\n            description: 'Ability to sense and predict air currents and atmospheric patterns.',\n            connections: ['flight', 'ether_sensing'],\n            compatible: ['avian'],\n            synthesis: {\n              condition: 'atmospheric_mastery',\n              result: {\n                name: 'Weather Manipulation',\n                description: 'Control over local atmospheric conditions through etheric attunement to air currents.'\n              }\n            }\n          }\n        ]\n      },\n      aquatic: {\n        sensory: [\n          {\n            id: 'pressure_sense',\n            name: 'Pressure Sense',\n            tier: 2,\n            parentId: 'vibration_detection',\n            affinities: {\n              pressure_gravity: 0.9,\n              terrain_harshness: 0.3,\n              light_conditions: -0.4,\n              temperature: -0.2,\n              resource_scarcity: 0.1,\n              ether_density: 0.3\n            },\n            description: 'Specialized organs that can detect minute changes in water pressure and currents.',\n            connections: ['webbed', 'vibration_detection'],\n            compatible: ['aquatic'],\n            synthesis: {\n              condition: 'aquatic_mastery',\n              result: {\n                name: 'Hydromancy',\n                description: 'Control over water through etheric attunement, manipulating currents and state changes.'\n              }\n            }\n          }\n        ]\n      }\n    };\n    \n    // Combine traits based on selected body shape\n    const allTraits = { ...baseTraits };\n    \n    // Add advanced traits\n    Object.keys(advancedTraits).forEach(category => {\n      if (!allTraits[category]) allTraits[category] = [];\n      allTraits[category] = [...allTraits[category], ...advancedTraits[category]];\n    });\n    \n    // Add specialized traits for selected body shape\n    if (specializedTraits[bodyShapeId]) {\n      Object.keys(specializedTraits[bodyShapeId]).forEach(category => {\n        if (!allTraits[category]) allTraits[category] = [];\n        allTraits[category] = [...allTraits[category], ...specializedTraits[bodyShapeId][category]];\n      });\n    }\n    \n    return allTraits;\n  };\n\n  // Get all traits as a flattened array\n  const getAllTraits = () => {\n    const traitsByCategory = getTraitsByBodyShape(selectedBodyShape);\n    let allTraits = [];\n    \n    Object.keys(traitsByCategory).forEach(category => {\n      traitsByCategory[category].forEach(trait => {\n        // Add category to trait for easier reference\n        allTraits.push({\n          ...trait,\n          category\n        });\n      });\n    });\n    \n    return allTraits;\n  };\n\n  // Find trait by ID\n  const findTraitById = (id) => {\n    const allTraits = getAllTraits();\n    return allTraits.find(trait => trait.id === id);\n  };\n\n  // Calculate trait compatibility with body shape\n  const isTraitCompatibleWithBodyShape = (trait) => {\n    if (!trait.compatible) return true;\n    if (trait.compatible.includes('all')) return true;\n    return trait.compatible.includes(selectedBodyShape);\n  };\n\n  // Calculate trait affinity compatibility\n  const calculateCompatibility = (trait1, trait2) => {\n    if (!trait1 || !trait2) return 0.3; // Baseline compatibility\n    \n    const stressors = ['terrain_harshness', 'resource_scarcity', 'light_conditions', \n                     'ether_density', 'temperature', 'pressure_gravity'];\n    \n    let totalSimilarity = 0;\n    let totalWeight = 0;\n    \n    stressors.forEach(stressor => {\n      const val1 = trait1.affinities[stressor] || 0;\n      const val2 = trait2.affinities[stressor] || 0;\n      \n      // Calculate similarity (1 for identical, 0 for completely opposite)\n      const similarity = 1 - Math.min(1, Math.abs(val1 - val2) / 2);\n      \n      // Weight based on how important this stressor is to either trait\n      const weight = (Math.abs(val1) + Math.abs(val2)) / 2;\n      \n      totalSimilarity += similarity * (1 + weight * 0.5);\n      totalWeight += 1;\n    });\n    \n    // Calculate compatibility score (0.3 to 1.0)\n    return 0.3 + 0.5 * (totalSimilarity / (totalWeight * 1.5));\n  };\n\n  // Calculate combined trait affinity for a stressor\n  const calculateCombinedAffinity = (stressor) => {\n    const allTraits = getAllTraits();\n    const traitsWithAffinity = allTraits.filter(trait => \n      trait.affinities && trait.affinities[stressor] !== undefined && \n      trait.affinities[stressor] !== 0 && \n      isTraitCompatibleWithBodyShape(trait)\n    );\n    \n    if (traitsWithAffinity.length === 0) return 0;\n    \n    // Sum affinities and normalize by square root of trait count\n    const sum = traitsWithAffinity.reduce(\n      (total, trait) => total + trait.affinities[stressor], 0\n    );\n    \n    // Using tanh to constrain to [-1, 1] range\n    return Math.tanh(sum / Math.sqrt(traitsWithAffinity.length));\n  };\n\n  // Calculate effective stress for a stressor\n  const calculateEffectiveStress = (stressor) => {\n    const stressorValue = environment[stressor];\n    if (stressorValue === 0) return 0;\n    \n    const combinedAffinity = calculateCombinedAffinity(stressor);\n    \n    // Sigmoid ratio calculation\n    const ratio = combinedAffinity / stressorValue;\n    const sigmoid = 1 / (1 + Math.exp(-3 * (ratio - 0.8)));\n    \n    // Effective stress calculation\n    return stressorValue * (1 - sigmoid);\n  };\n\n  // Calculate total effective stress\n  const calculateTotalEffectiveStress = () => {\n    const stressors = ['terrain_harshness', 'resource_scarcity', 'light_conditions', \n                      'ether_density', 'temperature', 'pressure_gravity'];\n    \n    // Calculate effective stress for all stressors\n    const stressorValues = stressors.map(stressor => calculateEffectiveStress(stressor));\n    \n    // Sum and normalize\n    const sum = stressorValues.reduce((total, stress) => total + stress, 0);\n    const numStressors = stressors.length;\n    \n    // Using tanh to constrain to [0, 1] range (mapping from [-1, 1] to [0, 1])\n    const stress = (Math.tanh(sum / Math.sqrt(numStressors)) + 1) / 2;\n    \n    return stress;\n  };\n\n  // Calculate adaptation probability\n  const calculateAdaptationProbability = (stress, duration = 10, threshold = 0.5) => {\n    const adaptationPressure = (stress * duration / 25) - threshold;\n    return 1 / (1 + Math.exp(-10 * adaptationPressure));\n  };\n\n  // Calculate environmental relevance for a trait\n  const calculateEnvironmentalRelevance = (trait) => {\n    if (!trait || !trait.affinities) return 0;\n    \n    let relevanceScore = 0;\n    \n    Object.keys(environment).forEach(stressor => {\n      if (trait.affinities[stressor] !== undefined) {\n        const stressorValue = environment[stressor];\n        const traitAffinity = trait.affinities[stressor];\n        \n        // Calculate relevance based on formula from documentation\n        relevanceScore += Math.abs(stressorValue) * stressorValue * traitAffinity;\n      }\n    });\n    \n    // Normalize using hyperbolic tangent\n    return Math.tanh(relevanceScore);\n  };\n\n  // Get trait category color\n  const getTraitCategoryColor = (categoryId) => {\n    const category = traitCategories.find(c => c.id === categoryId);\n    return category ? category.color : '#BFAD7F';\n  };\n\n  // Get trait glow intensity based on environmental relevance\n  const getTraitGlowIntensity = (trait) => {\n    const relevance = calculateEnvironmentalRelevance(trait);\n    // Scale from 0 to 1\n    const scaledRelevance = (relevance + 1) / 2;\n    return scaledRelevance;\n  };\n\n  // Handle mouse move for background effect\n  const handleMouseMove = (e) => {\n    setCursorPosition({ x: e.clientX, y: e.clientY });\n  };\n\n  // Handle trait selection\n  const handleTraitClick = (trait) => {\n    if (selectedTrait && selectedTrait.id === trait.id) {\n      setSelectedTrait(null);\n      setSelectedTraitConnections([]);\n    } else {\n      setSelectedTrait(trait);\n      \n      // Get connected traits\n      const connections = [];\n      if (trait.connections && trait.connections.length > 0) {\n        trait.connections.forEach(connectionId => {\n          const connectedTrait = findTraitById(connectionId);\n          if (connectedTrait) {\n            connections.push(connectedTrait);\n          }\n        });\n      }\n      \n      // If this is a tier > 0 trait, add parent trait\n      if (trait.tier > 0 && trait.parentId) {\n        const parentTrait = findTraitById(trait.parentId);\n        if (parentTrait && !connections.includes(parentTrait)) {\n          connections.push(parentTrait);\n        }\n      }\n      \n      // Find traits where this trait is the parent\n      const allTraits = getAllTraits();\n      allTraits.forEach(t => {\n        if (t.parentId === trait.id && !connections.includes(t)) {\n          connections.push(t);\n        }\n      });\n      \n      setSelectedTraitConnections(connections);\n    }\n  };\n\n  // Handle body shape click\n  const handleBodyShapeClick = () => {\n    setShowBodyShapeSelector(!showBodyShapeSelector);\n    setSelectedTrait(null);\n  };\n\n  // Change body shape\n  const changeBodyShape = (shapeId) => {\n    setSelectedBodyShape(shapeId);\n    setShowBodyShapeSelector(false);\n    setSelectedTrait(null);\n  };\n\n  // Setup the canvas and animation when component mounts or body shape changes\n  useEffect(() => {\n    if (!canvasRef.current || !containerRef.current) return;\n    \n    const canvas = canvasRef.current;\n    const container = containerRef.current;\n    const ctx = canvas.getContext('2d');\n    \n    // Set up canvas dimensions\n    const updateCanvasDimensions = () => {\n      // Make canvas full-screen size\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n      \n      networkRef.current = {\n        width: canvas.width,\n        height: canvas.height,\n        centerX: canvas.width / 2,\n        centerY: canvas.height / 2\n      };\n    };\n    \n    updateCanvasDimensions();\n    window.addEventListener('resize', updateCanvasDimensions);\n    \n    // Animation function\n    const animate = () => {\n      if (!networkRef.current) return;\n      \n      // Clear canvas\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      \n      const { centerX, centerY } = networkRef.current;\n      const allTraits = getAllTraits();\n      const traitPositions = {};\n      traitRefs.current = {};\n      \n      // Draw background ambient effects for eldritch appearance\n      drawAmbientBackground(ctx, centerX, centerY, canvas.width, canvas.height);\n      \n      // Draw mystical symbols in the background\n      drawMysticalSymbols(ctx, centerX, centerY, canvas.width, canvas.height);\n      \n      // Draw tier rings with more mystical styling\n      const maxRadius = Math.min(canvas.width, canvas.height) * 0.38; // Use percentage of screen\n      const tierRadius = [0, maxRadius * 0.35, maxRadius * 0.65, maxRadius];\n      \n      // Draw tier circles with eldritch styling\n      drawTierCircles(ctx, centerX, centerY, tierRadius);\n      \n      // Group traits by category and tier\n      const traitsByCategory = {};\n      traitCategories.forEach(category => {\n        traitsByCategory[category.id] = {\n          tier1: [],\n          tier2: [],\n          tier3: []\n        };\n      });\n      \n      allTraits.forEach(trait => {\n        const tier = trait.tier || 1;\n        if (tier <= 3 && traitsByCategory[trait.category]) {\n          traitsByCategory[trait.category][`tier${tier}`].push(trait);\n        }\n      });\n      \n      // Calculate positions for all traits - now with clear category separation\n      traitCategories.forEach((category, categoryIndex) => {\n        const categoryId = category.id;\n        const categoryAngleOffset = (categoryIndex / traitCategories.length) * Math.PI * 2;\n        \n        // Draw category sector\n        drawCategorySector(\n          ctx, \n          centerX, \n          centerY, \n          categoryAngleOffset,\n          (1 / traitCategories.length) * Math.PI * 2,\n          tierRadius[tierRadius.length - 1] * 1.05,\n          category\n        );\n        \n        // Position traits by tier with better placement\n        [1, 2, 3].forEach(tier => {\n          const traits = traitsByCategory[categoryId][`tier${tier}`] || [];\n          const traitCount = traits.length;\n          \n          if (traitCount === 0) return;\n          \n          // Define the arc width for this category (wider for less crowding)\n          const arcWidth = (Math.PI * 1.8) / traitCategories.length;\n          const angleSpread = Math.min(arcWidth, Math.PI * 0.3); // Cap maximum spread\n          \n          // Calculate trait positions within this arc\n          traits.forEach((trait, index) => {\n            const ratio = traitCount === 1 ? 0.5 : index / (traitCount - 1);\n            const traitAngle = categoryAngleOffset - (angleSpread / 2) + (angleSpread * ratio);\n            \n            // Apply radius based on tier\n            const radius = tierRadius[tier];\n            \n            // Add slight random variation in radius for more organic feel\n            const radiusVariation = radius * 0.05 * (Math.random() - 0.5);\n            const finalRadius = radius + radiusVariation;\n            \n            const x = centerX + Math.cos(traitAngle) * finalRadius;\n            const y = centerY + Math.sin(traitAngle) * finalRadius;\n            \n            traitPositions[trait.id] = { x, y, trait, angle: traitAngle };\n            traitRefs.current[trait.id] = { x, y, radius: getNodeRadius(trait), trait };\n          });\n        });\n      });\n      \n      // Draw connections with ethereal styling\n      drawConnections(ctx, allTraits, traitPositions, centerX, centerY);\n      \n      // Draw parent-child connections with eldritch flow\n      drawParentChildConnections(ctx, allTraits, traitPositions, centerX, centerY);\n      \n      // Draw nodes for each trait with enhanced styling\n      Object.keys(traitPositions).forEach(traitId => {\n        const { x, y, trait, angle } = traitPositions[traitId];\n        const category = trait.category;\n        const categoryColor = getTraitCategoryColor(category);\n        \n        const isSelected = selectedTrait && selectedTrait.id === trait.id;\n        const isConnected = selectedTrait && selectedTraitConnections.some(t => t.id === trait.id);\n        const isVisible = showAllTraits || isSelected || isConnected;\n        \n        if (!isVisible) return;\n        \n        // Draw trait node with enhanced visual styling\n        drawTraitNode(ctx, x, y, trait, angle, isSelected, isConnected);\n        \n        // Store node position and size for interaction\n        traitRefs.current[traitId] = { \n          x, \n          y, \n          radius: getNodeRadius(trait) + (trait.synthesis ? 4 : 0), \n          trait \n        };\n      });\n      \n      // Draw central body shape with eldritch styling\n      drawCentralBodyShape(ctx, centerX, centerY);\n      \n      // Continue animation\n      animationFrameRef.current = requestAnimationFrame(animate);\n    };\n    \n    // Ambient background for eldritch feel\n    const drawAmbientBackground = (ctx, centerX, centerY, width, height) => {\n      // Create subtle radial gradient for ambient glow\n      const gradient = ctx.createRadialGradient(\n        centerX, centerY, 100,\n        centerX, centerY, Math.max(width, height) * 0.7\n      );\n      \n      const bodyShape = bodyShapes.find(shape => shape.id === selectedBodyShape);\n      const baseColor = bodyShape ? bodyShape.color : '#191919';\n      \n      // Create a dark variant of the body shape color for the outer edge\n      const getRGBComponents = (hexColor) => {\n        const r = parseInt(hexColor.slice(1, 3), 16);\n        const g = parseInt(hexColor.slice(3, 5), 16);\n        const b = parseInt(hexColor.slice(5, 7), 16);\n        return { r, g, b };\n      };\n      \n      const { r, g, b } = getRGBComponents(baseColor);\n      const darkColor = `rgba(${r * 0.15}, ${g * 0.15}, ${b * 0.15}, 1)`;\n      \n      gradient.addColorStop(0, `rgba(${r * 0.25}, ${g * 0.25}, ${b * 0.25}, 0.7)`);\n      gradient.addColorStop(1, darkColor);\n      \n      ctx.fillStyle = gradient;\n      ctx.fillRect(0, 0, width, height);\n      \n      // Add subtle particle effect\n      const particleCount = 100;\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.1)';\n      \n      for (let i = 0; i < particleCount; i++) {\n        const x = Math.random() * width;\n        const y = Math.random() * height;\n        const size = Math.random() * 1.5 + 0.5;\n        const opacity = Math.random() * 0.08 + 0.02;\n        \n        ctx.globalAlpha = opacity;\n        ctx.beginPath();\n        ctx.arc(x, y, size, 0, Math.PI * 2);\n        ctx.fill();\n      }\n      \n      ctx.globalAlpha = 1;\n    };\n    \n    // Draw mystical symbols in background\n    const drawMysticalSymbols = (ctx, centerX, centerY, width, height) => {\n      const symbols = ['⚕', '⚜', '⚝', '⚳', '⚴', '⚵', '☉', '☽', '☿', '♀', '♁', '♂', '♃', '♄'];\n      const symbolCount = 12;\n      ctx.font = '20px serif';\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      \n      for (let i = 0; i < symbolCount; i++) {\n        const distance = Math.random() * (Math.min(width, height) * 0.4) + 100;\n        const angle = Math.random() * Math.PI * 2;\n        const x = centerX + Math.cos(angle) * distance;\n        const y = centerY + Math.sin(angle) * distance;\n        const symbol = symbols[Math.floor(Math.random() * symbols.length)];\n        const opacity = Math.random() * 0.15 + 0.05;\n        \n        ctx.fillStyle = `rgba(191, 173, 127, ${opacity})`;\n        ctx.fillText(symbol, x, y);\n      }\n    };\n    \n    // Draw tier circles with eldritch styling\n    const drawTierCircles = (ctx, centerX, centerY, tierRadius) => {\n      // Draw ornate tier circles\n      for (let tier = 1; tier <= 3; tier++) {\n        // Main circle\n        ctx.beginPath();\n        ctx.arc(centerX, centerY, tierRadius[tier], 0, Math.PI * 2);\n        ctx.strokeStyle = tier === 1 \n          ? 'rgba(191, 173, 127, 0.3)' \n          : tier === 2 \n            ? 'rgba(191, 173, 127, 0.2)' \n            : 'rgba(191, 173, 127, 0.15)';\n        ctx.setLineDash(tier === 1 ? [] : tier === 2 ? [5, 5] : [1, 8]);\n        ctx.lineWidth = tier === 1 ? 2 : 1;\n        ctx.stroke();\n        ctx.setLineDash([]);\n        \n        // Add subtle glow\n        ctx.beginPath();\n        ctx.arc(centerX, centerY, tierRadius[tier], 0, Math.PI * 2);\n        ctx.strokeStyle = `rgba(191, 173, 127, ${0.1 / tier})`;\n        ctx.lineWidth = 10;\n        ctx.stroke();\n        \n        // Draw tier label\n        const tierNames = ['', 'Fundamental', 'Evolutionary', 'Transcendent'];\n        const tierPosition = centerX - tierRadius[tier] + 30;\n        ctx.fillStyle = 'rgba(191, 173, 127, 0.5)';\n        ctx.font = '12px serif';\n        ctx.textAlign = 'center';\n        ctx.fillText(tierNames[tier], tierPosition, centerY - 5);\n      }\n      \n      // Add radial lines connecting tiers\n      const lineCount = 12;\n      for (let i = 0; i < lineCount; i++) {\n        const angle = (i / lineCount) * Math.PI * 2;\n        ctx.beginPath();\n        ctx.moveTo(centerX + Math.cos(angle) * tierRadius[1] * 0.9, \n                  centerY + Math.sin(angle) * tierRadius[1] * 0.9);\n        ctx.lineTo(centerX + Math.cos(angle) * tierRadius[3] * 1.05, \n                  centerY + Math.sin(angle) * tierRadius[3] * 1.05);\n        ctx.strokeStyle = 'rgba(191, 173, 127, 0.05)';\n        ctx.lineWidth = 1;\n        ctx.stroke();\n      }\n    };\n    \n    // Draw category sectors\n    const drawCategorySector = (ctx, centerX, centerY, startAngle, arcAngle, radius, category) => {\n      const endAngle = startAngle + arcAngle;\n      \n      // Draw subtle category background\n      ctx.beginPath();\n      ctx.moveTo(centerX, centerY);\n      ctx.arc(centerX, centerY, radius, startAngle, endAngle);\n      ctx.lineTo(centerX, centerY);\n      ctx.fillStyle = `rgba(${parseInt(category.color.slice(1, 3), 16)}, \n                            ${parseInt(category.color.slice(3, 5), 16)}, \n                            ${parseInt(category.color.slice(5, 7), 16)}, 0.03)`;\n      ctx.fill();\n      \n      // Draw category boundary lines\n      ctx.beginPath();\n      ctx.moveTo(centerX, centerY);\n      ctx.lineTo(centerX + Math.cos(startAngle) * radius, \n                centerY + Math.sin(startAngle) * radius);\n      ctx.strokeStyle = `rgba(${parseInt(category.color.slice(1, 3), 16)}, \n                              ${parseInt(category.color.slice(3, 5), 16)}, \n                              ${parseInt(category.color.slice(5, 7), 16)}, 0.2)`;\n      ctx.lineWidth = 1;\n      ctx.stroke();\n      \n      ctx.beginPath();\n      ctx.moveTo(centerX, centerY);\n      ctx.lineTo(centerX + Math.cos(endAngle) * radius, \n                centerY + Math.sin(endAngle) * radius);\n      ctx.stroke();\n      \n      // Add category label at the outer edge\n      const labelAngle = startAngle + arcAngle / 2;\n      const labelRadius = radius * 1.08;\n      const labelX = centerX + Math.cos(labelAngle) * labelRadius;\n      const labelY = centerY + Math.sin(labelAngle) * labelRadius;\n      \n      ctx.save();\n      ctx.translate(labelX, labelY);\n      ctx.rotate(labelAngle + Math.PI/2); // Rotate text to follow arc\n      \n      ctx.fillStyle = category.color;\n      ctx.font = 'bold 14px serif';\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(category.name.toUpperCase(), 0, 0);\n      \n      ctx.restore();\n    };\n    \n    // Draw trait connections with ethereal styling\n    const drawConnections = (ctx, allTraits, traitPositions, centerX, centerY) => {\n      allTraits.forEach(trait => {\n        if (trait.connections) {\n          const sourcePos = traitPositions[trait.id];\n          \n          if (!sourcePos) return;\n          \n          trait.connections.forEach(targetId => {\n            const targetPos = traitPositions[targetId];\n            \n            if (!targetPos) return;\n            \n            const sourceVisible = showAllTraits || \n              (selectedTrait && (selectedTrait.id === trait.id || \n                selectedTraitConnections.some(t => t.id === trait.id)));\n                \n            const targetVisible = showAllTraits || \n              (selectedTrait && (selectedTrait.id === targetId || \n                selectedTraitConnections.some(t => t.id === targetId)));\n            \n            if (sourceVisible && targetVisible) {\n              const compatibility = calculateCompatibility(sourcePos.trait, targetPos.trait);\n              const isSelected = selectedTrait && \n                (selectedTrait.id === trait.id || selectedTrait.id === targetId);\n              \n              // Enhanced connection drawing\n              drawEtherealConnection(\n                ctx, \n                sourcePos.x, sourcePos.y, \n                targetPos.x, targetPos.y, \n                centerX, centerY,\n                sourcePos.trait, targetPos.trait,\n                compatibility, isSelected\n              );\n            }\n          });\n        }\n      });\n    };\n    \n    // Draw parent-child evolutionary connections with eldritch styling\n    const drawParentChildConnections = (ctx, allTraits, traitPositions, centerX, centerY) => {\n      allTraits.forEach(trait => {\n        if (trait.tier > 0 && trait.parentId) {\n          const childPos = traitPositions[trait.id];\n          const parentPos = traitPositions[trait.parentId];\n          \n          if (childPos && parentPos) {\n            const childVisible = showAllTraits || \n              (selectedTrait && (selectedTrait.id === trait.id || \n                selectedTraitConnections.some(t => t.id === trait.id)));\n                \n            const parentVisible = showAllTraits || \n              (selectedTrait && (selectedTrait.id === trait.parentId || \n                selectedTraitConnections.some(t => t.id === trait.parentId)));\n            \n            if (childVisible && parentVisible) {\n              const isSelected = selectedTrait && \n                (selectedTrait.id === trait.id || selectedTrait.id === trait.parentId);\n              \n              // Draw evolutionary connection with eldritch flow\n              drawEvolutionaryConnection(\n                ctx, \n                childPos.x, childPos.y, \n                parentPos.x, parentPos.y, \n                centerX, centerY,\n                childPos.trait, parentPos.trait,\n                isSelected\n              );\n            }\n          }\n        }\n      });\n    };\n    \n    // Draw ethereal connection between traits\n    const drawEtherealConnection = (ctx, x1, y1, x2, y2, centerX, centerY, trait1, trait2, compatibility, isSelected) => {\n      // Create a gentle curve for the connection\n      const midX = (x1 + x2) / 2;\n      const midY = (y1 + y2) / 2;\n      \n      // Pull toward center based on tier difference\n      const pullFactor = 0.2;\n      const controlX = midX + (centerX - midX) * pullFactor;\n      const controlY = midY + (centerY - midY) * pullFactor;\n      \n      // Create gradient with category colors\n      const gradient = ctx.createLinearGradient(x1, y1, x2, y2);\n      const sourceColor = getTraitCategoryColor(trait1.category);\n      const targetColor = getTraitCategoryColor(trait2.category);\n      \n      gradient.addColorStop(0, sourceColor);\n      gradient.addColorStop(1, targetColor);\n      \n      // Draw main connection\n      ctx.beginPath();\n      ctx.moveTo(x1, y1);\n      ctx.quadraticCurveTo(controlX, controlY, x2, y2);\n      \n      // Set line style\n      ctx.strokeStyle = gradient;\n      ctx.lineWidth = isSelected ? 3 : 1.5;\n      ctx.globalAlpha = isSelected ? 0.8 : 0.4 * compatibility;\n      \n      // Add glow for selected connections\n      if (isSelected) {\n        ctx.shadowColor = 'rgba(255, 253, 227, 0.8)';\n        ctx.shadowBlur = 12;\n      }\n      \n      ctx.stroke();\n      \n      // Add ethereal particles along the connection if selected\n      if (isSelected) {\n        const particleCount = 3;\n        for (let i = 0; i < particleCount; i++) {\n          const t = Math.random();\n          \n          // Calculate position along the quadratic curve\n          const posX = Math.pow(1-t, 2) * x1 + \n                      2 * (1-t) * t * controlX + \n                      Math.pow(t, 2) * x2;\n          const posY = Math.pow(1-t, 2) * y1 + \n                      2 * (1-t) * t * controlY + \n                      Math.pow(t, 2) * y2;\n          \n          // Draw ethereal particle\n          ctx.beginPath();\n          ctx.arc(posX, posY, 2, 0, Math.PI * 2);\n          ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n          ctx.fill();\n        }\n      }\n      \n      // Reset styles\n      ctx.globalAlpha = 1;\n      ctx.shadowBlur = 0;\n    };\n    \n    // Draw evolutionary connection with eldritch styling\n    const drawEvolutionaryConnection = (ctx, childX, childY, parentX, parentY, centerX, centerY, childTrait, parentTrait, isSelected) => {\n      // Create a curve toward center for evolutionary path\n      const midX = (childX + parentX) / 2;\n      const midY = (childY + parentY) / 2;\n      \n      // Pull evolutionary path toward center\n      const pullFactor = 0.25;\n      const controlX = midX + (centerX - midX) * pullFactor;\n      const controlY = midY + (centerY - midY) * pullFactor;\n      \n      // Special gradient for evolutionary connections\n      const evolutionGradient = ctx.createLinearGradient(childX, childY, parentX, parentY);\n      const childColor = getTraitCategoryColor(childTrait.category);\n      const parentColor = getTraitCategoryColor(parentTrait.category);\n      \n      evolutionGradient.addColorStop(0, childColor);\n      evolutionGradient.addColorStop(1, parentColor);\n      \n      // Draw evolutionary path\n      ctx.beginPath();\n      ctx.moveTo(childX, childY);\n      ctx.quadraticCurveTo(controlX, controlY, parentX, parentY);\n      \n      // Set special styling for evolutionary connections\n      ctx.strokeStyle = evolutionGradient;\n      ctx.lineWidth = isSelected ? 3 : 2;\n      ctx.setLineDash([3, 5]); // Dashed line for evolutionary connections\n      ctx.globalAlpha = isSelected ? 0.9 : 0.6;\n      \n      // Add glow for selected connections\n      if (isSelected) {\n        ctx.shadowColor = 'rgba(255, 253, 227, 0.8)';\n        ctx.shadowBlur = 10;\n      }\n      \n      ctx.stroke();\n      \n      // Add direction indicator (flow from parent to child)\n      const midPoint = getPointOnQuadraticCurve(0.5, childX, childY, controlX, controlY, parentX, parentY);\n      \n      if (isSelected) {\n        // Draw energy flow along connection\n        drawEnergyFlow(ctx, childX, childY, controlX, controlY, parentX, parentY, evolutionGradient);\n      }\n      \n      // Reset styles\n      ctx.setLineDash([]);\n      ctx.globalAlpha = 1;\n      ctx.shadowBlur = 0;\n    };\n    \n    // Draw energy flow along path\n    const drawEnergyFlow = (ctx, x1, y1, cx, cy, x2, y2, gradient) => {\n      const particleCount = 5;\n      const t = (Date.now() % 3000) / 3000; // Animation cycle\n      \n      for (let i = 0; i < particleCount; i++) {\n        const particleT = (t + i/particleCount) % 1;\n        const pointOnCurve = getPointOnQuadraticCurve(particleT, x1, y1, cx, cy, x2, y2);\n        \n        // Draw energy particle\n        ctx.beginPath();\n        ctx.arc(pointOnCurve.x, pointOnCurve.y, 3, 0, Math.PI * 2);\n        ctx.fillStyle = gradient;\n        \n        // Add glow effect\n        ctx.shadowColor = 'rgba(255, 253, 227, 0.9)';\n        ctx.shadowBlur = 5;\n        \n        ctx.fill();\n      }\n      \n      // Reset shadow\n      ctx.shadowBlur = 0;\n    };\n    \n    // Helper to get point on quadratic curve\n    const getPointOnQuadraticCurve = (t, x1, y1, cx, cy, x2, y2) => {\n      return {\n        x: Math.pow(1-t, 2) * x1 + 2 * (1-t) * t * cx + Math.pow(t, 2) * x2,\n        y: Math.pow(1-t, 2) * y1 + 2 * (1-t) * t * cy + Math.pow(t, 2) * y2\n      };\n    };\n    \n    // Draw trait node with enhanced styling\n    const drawTraitNode = (ctx, x, y, trait, angle, isSelected, isConnected) => {\n      const category = trait.category;\n      const categoryColor = getTraitCategoryColor(category);\n      \n      // Get trait size based on tier and state\n      const baseSize = trait.tier === 1 ? 18 : trait.tier === 2 ? 22 : 26;\n      let nodeSize = isSelected ? baseSize * 1.3 : isConnected ? baseSize * 1.1 : baseSize;\n      \n      // Special treatment for traits with synthesis potential\n      if (trait.synthesis) {\n        nodeSize += 4;\n      }\n      \n      // Calculate glow based on environmental relevance\n      const relevance = calculateEnvironmentalRelevance(trait);\n      const glowIntensity = getTraitGlowIntensity(trait);\n      \n      // Draw outer aura for relevant traits\n      if (relevance > 0.3) {\n        const auraSize = nodeSize * (1 + relevance * 0.3);\n        const gradient = ctx.createRadialGradient(x, y, nodeSize, x, y, auraSize);\n        gradient.addColorStop(0, `rgba(${parseInt(categoryColor.slice(1, 3), 16)}, \n                                        ${parseInt(categoryColor.slice(3, 5), 16)}, \n                                        ${parseInt(categoryColor.slice(5, 7), 16)}, 0.7)`);\n        gradient.addColorStop(1, 'rgba(0, 0, 0, 0)');\n        \n        ctx.beginPath();\n        ctx.arc(x, y, auraSize, 0, Math.PI * 2);\n        ctx.fillStyle = gradient;\n        ctx.fill();\n      }\n      \n      // For traits with synthesis potential, add special ornamental ring\n      if (trait.synthesis) {\n        // Rotating ring effect for synthesis capability\n        const ringSegments = 8;\n        const ringShift = Date.now() / 2000; // Slow rotation\n        \n        for (let i = 0; i < ringSegments; i++) {\n          const segmentAngle = ((i / ringSegments) * Math.PI * 2) + ringShift;\n          const nextSegmentAngle = (((i + 1) / ringSegments) * Math.PI * 2) + ringShift;\n          \n          ctx.beginPath();\n          ctx.arc(x, y, nodeSize + 3, segmentAngle, nextSegmentAngle);\n          ctx.strokeStyle = `rgba(255, 223, 127, ${0.3 + 0.2 * Math.sin(Date.now() / 500 + i)})`;\n          ctx.lineWidth = 2;\n          ctx.stroke();\n        }\n      }\n      \n      // Draw main node\n      ctx.beginPath();\n      ctx.arc(x, y, nodeSize, 0, Math.PI * 2);\n      \n      // Create radial gradient for node\n      const gradient = ctx.createRadialGradient(\n        x - nodeSize * 0.3, y - nodeSize * 0.3, 0,\n        x, y, nodeSize\n      );\n      gradient.addColorStop(0, categoryColor);\n      gradient.addColorStop(1, adjustColorBrightness(categoryColor, -30));\n      \n      ctx.fillStyle = gradient;\n      \n      // Add glow based on environmental relevance\n      ctx.shadowColor = 'rgba(255, 253, 227, 0.8)';\n      ctx.shadowBlur = 8 + glowIntensity * 15;\n      ctx.fill();\n      \n      // Add ornamental border\n      ctx.beginPath();\n      ctx.arc(x, y, nodeSize, 0, Math.PI * 2);\n      \n      // More pronounced border for selected/connected traits\n      ctx.strokeStyle = isSelected ? '#FFFFFF' : isConnected ? adjustColorBrightness(categoryColor, 30) : categoryColor;\n      ctx.lineWidth = isSelected ? 3 : 2;\n      ctx.stroke();\n      \n      // Add tier indicator at center\n      if (trait.tier > 1) {\n        ctx.beginPath();\n        ctx.arc(x, y, nodeSize * 0.4, 0, Math.PI * 2);\n        ctx.fillStyle = isSelected ? '#FFFFFF' : 'rgba(255, 255, 255, 0.7)';\n        ctx.shadowBlur = 0;\n        ctx.fill();\n        \n        // Add tier number\n        ctx.fillStyle = categoryColor;\n        ctx.font = `bold ${nodeSize * 0.5}px serif`;\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText(trait.tier.toString(), x, y);\n      }\n      \n      // Reset shadow for text\n      ctx.shadowBlur = 0;\n      \n      // Draw compatibility indicator for selected trait connections\n      if (isConnected && selectedTrait) {\n        const compatibility = calculateCompatibility(selectedTrait, trait);\n        \n        // Draw compatibility arc around node\n        ctx.beginPath();\n        ctx.arc(x, y, nodeSize + 5, 0, Math.PI * 2 * compatibility);\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.8)';\n        ctx.lineWidth = 2;\n        ctx.stroke();\n      }\n      \n      // Draw synthesis indicator if available\n      if (trait.synthesis) {\n        // Small symbol indicating synthesis potential\n        const symbolRadius = nodeSize * 0.3;\n        const symbolAngle = angle + Math.PI / 4; // Offset from main angle\n        const symbolX = x + Math.cos(symbolAngle) * (nodeSize + symbolRadius);\n        const symbolY = y + Math.sin(symbolAngle) * (nodeSize + symbolRadius);\n        \n        ctx.beginPath();\n        ctx.arc(symbolX, symbolY, symbolRadius, 0, Math.PI * 2);\n        \n        // Pulsating effect for synthesis indicator\n        const pulseIntensity = 0.6 + 0.4 * Math.sin(Date.now() / 500);\n        ctx.fillStyle = `rgba(255, 223, 127, ${pulseIntensity})`;\n        \n        ctx.shadowColor = 'rgba(255, 223, 127, 0.8)';\n        ctx.shadowBlur = 10;\n        ctx.fill();\n        \n        // Add synthesis symbol\n        ctx.fillStyle = '#000';\n        ctx.font = `${symbolRadius}px serif`;\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText('✧', symbolX, symbolY);\n        \n        // Reset shadow\n        ctx.shadowBlur = 0;\n      }\n      \n      // Add trait name as a floating label\n      const labelDistance = nodeSize * 1.3;\n      const labelAngle = angle; // Use the same angle as the node position\n      const labelX = x + Math.cos(labelAngle) * labelDistance;\n      const labelY = y + Math.sin(labelAngle) * labelDistance;\n      \n      // Create a subtle text background for better readability\n      const nameWidth = ctx.measureText(trait.name).width;\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';\n      ctx.fillRect(labelX - nameWidth/2 - 3, labelY - 8, nameWidth + 6, 16);\n      \n      // Draw the trait name\n      ctx.fillStyle = isSelected ? '#FFFFFF' : 'rgba(255, 255, 255, 0.9)';\n      ctx.font = `${isSelected ? 'bold ' : ''}12px sans-serif`;\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(trait.name, labelX, labelY);\n    };\n    \n    // Draw central body shape with eldritch styling\n    const drawCentralBodyShape = (ctx, centerX, centerY) => {\n      const bodyShape = bodyShapes.find(shape => shape.id === selectedBodyShape);\n      const bodyShapeSize = 80; // Larger central node\n      \n      // Store body shape position for interaction\n      bodyShapeIconRef.current = {\n        x: centerX,\n        y: centerY,\n        radius: bodyShapeSize\n      };\n      \n      // Draw outer circles with eldritch styling\n      for (let i = 0; i < 3; i++) {\n        ctx.beginPath();\n        ctx.arc(centerX, centerY, bodyShapeSize + 20 + i * 8, 0, Math.PI * 2);\n        ctx.strokeStyle = `rgba(191, 173, 127, ${0.1 - i * 0.03})`;\n        ctx.lineWidth = 1;\n        ctx.stroke();\n      }\n      \n      // Create pulsating effect\n      const pulseIntensity = 0.9 + 0.1 * Math.sin(Date.now() / 1000);\n      \n      // Draw outer glow\n      const outerGlow = ctx.createRadialGradient(\n        centerX, centerY, bodyShapeSize * 0.7,\n        centerX, centerY, bodyShapeSize * 1.3\n      );\n      \n      const bodyShapeColor = bodyShape?.color || 'rgb(191, 173, 127)';\n      outerGlow.addColorStop(0, `rgba(${parseInt(bodyShapeColor.slice(1, 3), 16)}, \n                                      ${parseInt(bodyShapeColor.slice(3, 5), 16)}, \n                                      ${parseInt(bodyShapeColor.slice(5, 7), 16)}, 0.3)`);\n      outerGlow.addColorStop(1, 'rgba(0, 0, 0, 0)');\n      \n      ctx.beginPath();\n      ctx.arc(centerX, centerY, bodyShapeSize * 1.3, 0, Math.PI * 2);\n      ctx.fillStyle = outerGlow;\n      ctx.fill();\n      \n      // Draw main body shape background\n      ctx.beginPath();\n      ctx.arc(centerX, centerY, bodyShapeSize, 0, Math.PI * 2);\n      \n      // Create radial gradient for body shape\n      const gradient = ctx.createRadialGradient(\n        centerX - bodyShapeSize * 0.3, centerY - bodyShapeSize * 0.3, bodyShapeSize * 0.1,\n        centerX, centerY, bodyShapeSize\n      );\n      gradient.addColorStop(0, bodyShapeColor);\n      gradient.addColorStop(1, adjustColorBrightness(bodyShapeColor, -20));\n      \n      ctx.fillStyle = gradient;\n      ctx.shadowColor = `rgba(${parseInt(bodyShapeColor.slice(1, 3), 16)}, \n                              ${parseInt(bodyShapeColor.slice(3, 5), 16)}, \n                              ${parseInt(bodyShapeColor.slice(5, 7), 16)}, 0.8)`;\n      ctx.shadowBlur = 25 * pulseIntensity;\n      ctx.fill();\n      \n      // Draw ornate border\n      ctx.beginPath();\n      ctx.arc(centerX, centerY, bodyShapeSize, 0, Math.PI * 2);\n      ctx.strokeStyle = 'rgba(255, 255, 255, 0.7)';\n      ctx.lineWidth = 2;\n      ctx.stroke();\n      \n      // Reset shadow\n      ctx.shadowBlur = 0;\n      \n      // Draw body shape icon and name\n      ctx.fillStyle = '#000';\n      ctx.font = `bold 32px serif`;\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(bodyShape?.icon || '⦿', centerX, centerY - 10);\n      \n      ctx.font = 'bold 16px sans-serif';\n      ctx.fillText(bodyShape?.name || 'Body Shape', centerX, centerY + 20);\n      \n      // Draw ornate sigils around the central node\n      const sigilCount = 5;\n      const sigilRadius = bodyShapeSize * 1.4;\n      \n      for (let i = 0; i < sigilCount; i++) {\n        const angle = (i / sigilCount) * Math.PI * 2;\n        const x = centerX + Math.cos(angle) * sigilRadius;\n        const y = centerY + Math.sin(angle) * sigilRadius;\n        \n        ctx.beginPath();\n        ctx.arc(x, y, 3, 0, Math.PI * 2);\n        ctx.fillStyle = `rgba(191, 173, 127, ${0.3 + 0.2 * Math.sin(Date.now() / 500 + i)})`;\n        ctx.fill();\n        \n        // Connect sigils to center with subtle lines\n        ctx.beginPath();\n        ctx.moveTo(centerX + Math.cos(angle) * bodyShapeSize, \n                  centerY + Math.sin(angle) * bodyShapeSize);\n        ctx.lineTo(x, y);\n        ctx.strokeStyle = 'rgba(191, 173, 127, 0.1)';\n        ctx.lineWidth = 1;\n        ctx.stroke();\n      }\n      \n      // Add elemental text\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.6)';\n      ctx.font = '14px serif';\n      ctx.fillText(bodyShape?.element || 'Form', centerX, centerY + bodyShapeSize * 1.2);\n    };\n    \n    // Helper function to adjust color brightness\n    const adjustColorBrightness = (hex, percent) => {\n      const r = parseInt(hex.slice(1, 3), 16);\n      const g = parseInt(hex.slice(3, 5), 16);\n      const b = parseInt(hex.slice(5, 7), 16);\n      \n      const adjustedR = Math.max(0, Math.min(255, r + percent));\n      const adjustedG = Math.max(0, Math.min(255, g + percent));\n      const adjustedB = Math.max(0, Math.min(255, b + percent));\n      \n      return `rgb(${Math.round(adjustedR)}, ${Math.round(adjustedG)}, ${Math.round(adjustedB)})`;\n    };\n    \n    // Start animation loop\n    animate();\n    \n    // Set loaded after a delay\n    const timer = setTimeout(() => {\n      setIsLoaded(true);\n    }, 1000);\n    \n    // Cleanup on unmount\n    return () => {\n      window.removeEventListener('resize', updateCanvasDimensions);\n      clearTimeout(timer);\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [\n    selectedBodyShape, \n    selectedTrait, \n    selectedTraitConnections, \n    environment, \n    showAllTraits,\n    getTraitCategoryColor,\n    calculateCompatibility,\n    getTraitGlowIntensity\n  ]);\n\n  // Calculate stress and adaptation probability when environment changes\n  useEffect(() => {\n    const stress = calculateTotalEffectiveStress();\n    setTotalEffectiveStress(stress);\n    \n    const probability = calculateAdaptationProbability(stress);\n    setAdaptationProbability(probability);\n  }, [environment, selectedBodyShape]);\n\n  // Handle canvas clicks to detect trait and body shape selection\n  const handleCanvasClick = (e) => {\n    if (!canvasRef.current || !bodyShapeIconRef.current) return;\n    \n    const rect = canvasRef.current.getBoundingClientRect();\n    const mouseX = e.clientX - rect.left;\n    const mouseY = e.clientY - rect.top;\n    \n    // Check if clicked on body shape\n    const { x, y, radius } = bodyShapeIconRef.current;\n    const distance = Math.sqrt((mouseX - x) ** 2 + (mouseY - y) ** 2);\n    \n    if (distance <= radius) {\n      handleBodyShapeClick();\n      return;\n    }\n    \n    // Check if clicked on any trait\n    let clickedTrait = null;\n    \n    Object.keys(traitRefs.current).forEach(traitId => {\n      const traitRef = traitRefs.current[traitId];\n      const traitDistance = Math.sqrt(\n        (mouseX - traitRef.x) ** 2 + (mouseY - traitRef.y) ** 2\n      );\n      \n      if (traitDistance <= traitRef.radius) {\n        clickedTrait = traitRef.trait;\n      }\n    });\n    \n    if (clickedTrait) {\n      handleTraitClick(clickedTrait);\n    } else if (selectedTrait) {\n      setSelectedTrait(null);\n      setSelectedTraitConnections([]);\n    }\n  };\n\n  // Handle canvas mouse movement for hover effects\n  const handleCanvasMouseMove = (e) => {\n    if (!canvasRef.current) return;\n    \n    const rect = canvasRef.current.getBoundingClientRect();\n    const mouseX = e.clientX - rect.left;\n    const mouseY = e.clientY - rect.top;\n    \n    // Check if mouse is over any trait\n    let hovered = null;\n    \n    Object.keys(traitRefs.current).forEach(traitId => {\n      const traitRef = traitRefs.current[traitId];\n      const distance = Math.sqrt(\n        (mouseX - traitRef.x) ** 2 + (mouseY - traitRef.y) ** 2\n      );\n      \n      if (distance <= traitRef.radius) {\n        hovered = traitRef.trait;\n      }\n    });\n    \n    setHoveredTrait(hovered);\n  };\n\n  // Handle filter mode changes\n  const handleFilterModeChange = (mode) => {\n    setFilterMode(mode);\n    \n    if (mode === 'all') {\n      setShowAllTraits(true);\n    } else if (mode === 'relevance') {\n      // Show only traits with positive environmental relevance\n      setShowAllTraits(false);\n    } else if (mode === 'category' && selectedTrait) {\n      // Show only traits in the same category as selected trait\n      setShowAllTraits(false);\n    }\n  };\n\n  // Helper function to get node radius based on trait tier\n  const getNodeRadius = (trait) => {\n    if (!trait) return 16;\n    const tier = trait.tier || 1;\n    return tier === 1 ? 16 : tier === 2 ? 20 : 24;\n  };\n\n  // Render trait tooltip when hovering\n  const renderTraitTooltip = () => {\n    if (!hoveredTrait || selectedTrait) return null;\n    \n    const trait = hoveredTrait;\n    const relevance = calculateEnvironmentalRelevance(trait);\n    \n    return (\n      <motion.div\n        initial={{ opacity: 0, y: 10 }}\n        animate={{ opacity: 1, y: 0 }}\n        exit={{ opacity: 0, y: 10 }}\n        transition={{ duration: 0.2 }}\n        className={classes.traitTooltip}\n      >\n        <div className={classes.traitTooltipHeader} style={{ \n          backgroundColor: getTraitCategoryColor(trait.category) \n        }}>\n          <h3>{trait.name}</h3>\n          <span>Tier {trait.tier} {trait.category}</span>\n        </div>\n        <div className={classes.traitTooltipContent}>\n          <p>{trait.description}</p>\n          <div className={classes.traitTooltipStats}>\n            <div className={classes.traitTooltipStat}>\n              <span>Environmental Relevance</span>\n              <span className={`${classes.traitTooltipStatValue} ${relevance > 0 ? classes.positive : relevance < 0 ? classes.negative : ''}`}>\n                {relevance.toFixed(2)}\n              </span>\n            </div>\n          </div>\n        </div>\n      </motion.div>\n    );\n  };\n\n  // Render environmental controls\n  const renderEnvironmentControls = () => {\n    const environmentControls = [\n      { id: 'temperature', name: 'Temperature', min: -1, max: 1 },\n      { id: 'light_conditions', name: 'Light Conditions', min: -1, max: 1 },\n      { id: 'terrain_harshness', name: 'Terrain Harshness', min: -1, max: 1 },\n      { id: 'resource_scarcity', name: 'Resource Scarcity', min: -1, max: 1 },\n      { id: 'ether_density', name: 'Ether Density', min: -1, max: 1 },\n      { id: 'pressure_gravity', name: 'Pressure/Gravity', min: -1, max: 1 }\n    ];\n    \n    return (\n      <div className={classes.environmentControls}>\n        <RevealText>\n          <h3 className={classes.controlsTitle}>Environmental Stressors</h3>\n        </RevealText>\n        \n        <div className={classes.environmentSliders}>\n          {environmentControls.map(control => (\n            <div key={control.id} className={classes.sliderContainer}>\n              <div className={classes.sliderLabel}>\n                <span>{control.name}</span>\n                <span className={`\n                  ${classes.sliderValue} \n                  ${environment[control.id] > 0 ? classes.positive : environment[control.id] < 0 ? classes.negative : ''}\n                `}>\n                  {environment[control.id].toFixed(1)}\n                </span>\n              </div>\n              <input\n                type=\"range\"\n                min={control.min}\n                max={control.max}\n                step=\"0.1\"\n                value={environment[control.id]}\n                onChange={(e) => \n                  setEnvironment(prev => ({\n                    ...prev,\n                    [control.id]: parseFloat(e.target.value)\n                  }))\n                }\n                className={classes.slider}\n              />\n            </div>\n          ))}\n        </div>\n        \n        <div className={classes.adaptationStats}>\n          <div className={classes.adaptationStat}>\n            <span>Total Effective Stress:</span>\n            <div className={classes.stressBar}>\n              <div \n                className={classes.stressBarFill} \n                style={{ \n                  width: `${totalEffectiveStress * 100}%`,\n                  backgroundColor: \n                    totalEffectiveStress > 0.7 ? '#B54B4B' : \n                    totalEffectiveStress > 0.4 ? '#C99846' : \n                    '#5C9D8B'\n                }}\n              ></div>\n              <span>{(totalEffectiveStress).toFixed(2)}</span>\n            </div>\n          </div>\n          <div className={classes.adaptationStat}>\n            <span>Adaptation Probability:</span>\n            <div className={classes.stressBar}>\n              <div \n                className={classes.stressBarFill}\n                style={{ \n                  width: `${adaptationProbability * 100}%`,\n                  backgroundColor: \n                    adaptationProbability > 0.7 ? '#B54B4B' : \n                    adaptationProbability > 0.4 ? '#C99846' : \n                    '#5C9D8B'\n                }}\n              ></div>\n              <span>{(adaptationProbability).toFixed(2)}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  // Render body shape selector\n  const renderBodyShapeSelector = () => {\n    return (\n      <motion.div \n        className={classes.bodyShapeSelector}\n        initial={{ y: -50, opacity: 0 }}\n        animate={{ y: 0, opacity: 1 }}\n        transition={{ duration: 0.4, type: 'spring', stiffness: 120 }}\n      >\n        <div className={classes.bodyShapeGrid}>\n          {bodyShapes.map(shape => (\n            <motion.div \n              key={shape.id}\n              className={`${classes.bodyShapeCard} ${selectedBodyShape === shape.id ? classes.selectedShape : ''}`}\n              onClick={() => changeBodyShape(shape.id)}\n              whileHover={{ \n                scale: 1.05, \n                boxShadow: `0 5px 20px rgba(${parseInt(shape.color.slice(1, 3), 16)}, \n                                            ${parseInt(shape.color.slice(3, 5), 16)}, \n                                            ${parseInt(shape.color.slice(5, 7), 16)}, 0.4)` \n              }}\n              style={{ backgroundColor: `${shape.color}22` }}\n            >\n              <div className={classes.bodyShapeIcon} style={{ backgroundColor: shape.color }}>\n                {shape.icon}\n              </div>\n              <div className={classes.bodyShapeInfo}>\n                <h3>{shape.name}</h3>\n                <div className={classes.elementTag}>{shape.element}</div>\n                <p>{shape.description}</p>\n              </div>\n              {selectedBodyShape === shape.id && (\n                <div className={classes.activeIndicator}>\n                  <span>Active</span>\n                </div>\n              )}\n            </motion.div>\n          ))}\n        </div>\n      </motion.div>\n    );\n  };\n\n  // Render trait details panel\n  const renderTraitDetails = () => {\n    if (!selectedTrait) return null;\n    \n    const trait = selectedTrait;\n    const categoryName = traitCategories.find(c => c.id === trait.category)?.name || trait.category;\n    const relevance = calculateEnvironmentalRelevance(trait);\n    \n    // Find parent trait if available\n    let parentTrait = null;\n    if (trait.tier > 0 && trait.parentId) {\n      parentTrait = findTraitById(trait.parentId);\n    }\n    \n    // Get synthesized trait if available\n    const synthesizedTrait = trait.synthesis?.result;\n    \n    return (\n      <motion.div \n        className={classes.traitDetails}\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        exit={{ opacity: 0, y: 20 }}\n        transition={{ duration: 0.3 }}\n      >\n        <div \n          className={classes.traitDetailsHeader}\n          style={{ backgroundColor: getTraitCategoryColor(trait.category) }}\n        >\n          <div className={classes.traitHeaderContent}>\n            <h2 className={classes.traitName}>{trait.name}</h2>\n            <div className={classes.traitMeta}>\n              {categoryName} • Tier {trait.tier}\n            </div>\n          </div>\n          <button \n            className={classes.closeButton}\n            onClick={() => setSelectedTrait(null)}\n          >\n            ×\n          </button>\n        </div>\n        \n        <div className={classes.traitDetailsContent}>\n          <div className={classes.traitDescription}>\n            {trait.description}\n          </div>\n          \n          <div className={classes.traitDetailsSection}>\n            <h3 className={classes.sectionTitle}>Environmental Affinities</h3>\n            <div className={classes.affinitiesGrid}>\n              {Object.entries(trait.affinities).map(([stressor, value]) => {\n                if (value === 0) return null;\n                \n                const stressorName = stressor.split('_').map(word => \n                  word.charAt(0).toUpperCase() + word.slice(1)\n                ).join(' ');\n                \n                return (\n                  <div key={stressor} className={classes.affinityItem}>\n                    <span className={classes.affinityName}>{stressorName}</span>\n                    <span className={`\n                      ${classes.affinityValue} \n                      ${value > 0 ? classes.positive : classes.negative}\n                    `}>\n                      {value > 0 ? '+' : ''}{value.toFixed(1)}\n                    </span>\n                  </div>\n                );\n              })}\n            </div>\n            \n            <div className={classes.environmentalRelevance}>\n              <div className={classes.relevanceLabel}>\n                Environmental Relevance\n              </div>\n              <div className={`\n                ${classes.relevanceValue} \n                ${relevance > 0 ? classes.positive : relevance < 0 ? classes.negative : ''}\n              `}>\n                {relevance.toFixed(2)}\n              </div>\n            </div>\n          </div>\n          \n          {parentTrait && (\n            <div className={classes.traitDetailsSection}>\n              <h3 className={classes.sectionTitle}>Evolutionary Origin</h3>\n              <div\n                className={classes.parentTrait}\n                onClick={() => handleTraitClick(parentTrait)}\n              >\n                <div className={classes.parentTraitIcon} style={{ \n                  backgroundColor: getTraitCategoryColor(parentTrait.category) \n                }}></div>\n                <div className={classes.parentTraitDetails}>\n                  <div className={classes.parentTraitName}>{parentTrait.name}</div>\n                  <div className={classes.parentTraitCategory}>\n                    {traitCategories.find(c => c.id === parentTrait.category)?.name} • Tier {parentTrait.tier}\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n          \n          {selectedTraitConnections.length > 0 && (\n            <div className={classes.traitDetailsSection}>\n              <h3 className={classes.sectionTitle}>Connected Traits</h3>\n              <div className={classes.connectionsList}>\n                {selectedTraitConnections.map(connection => {\n                  const compatibility = calculateCompatibility(trait, connection);\n                  \n                  return (\n                    <div\n                      key={connection.id}\n                      className={classes.connectionItem}\n                      onClick={() => handleTraitClick(connection)}\n                    >\n                      <div className={classes.connectionItemLeft}>\n                        <div \n                          className={classes.connectionDot} \n                          style={{ backgroundColor: getTraitCategoryColor(connection.category) }}\n                        ></div>\n                        <div className={classes.connectionDetails}>\n                          <div className={classes.connectionName}>{connection.name}</div>\n                          <div className={classes.connectionCategory}>\n                            {traitCategories.find(c => c.id === connection.category)?.name} • Tier {connection.tier}\n                          </div>\n                        </div>\n                      </div>\n                      <div className={`\n                        ${classes.compatibilityBadge}\n                        ${compatibility > 0.7 ? classes.highCompatibility : \n                          compatibility > 0.5 ? classes.mediumCompatibility : \n                          classes.lowCompatibility}\n                      `}>\n                        {compatibility.toFixed(2)}\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          )}\n          \n          {synthesizedTrait && (\n            <div className={classes.traitDetailsSection}>\n              <h3 className={classes.sectionTitle}>Synthesis Potential</h3>\n              <div className={classes.synthesisPotential}>\n                <div className={classes.synthesisName}>\n                  {synthesizedTrait.name}\n                </div>\n                <div className={classes.synthesisDescription}>\n                  {synthesizedTrait.description}\n                </div>\n                <div className={classes.synthesisCondition}>\n                  <span>Trigger Condition:</span> \n                  <span className={classes.conditionName}>\n                    {trait.synthesis.condition.split('_').map(word => \n                      word.charAt(0).toUpperCase() + word.slice(1)\n                    ).join(' ')}\n                  </span>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </motion.div>\n    );\n  };\n\n  // Main render\n  return (\n    <div \n      className={classes.evolutionSimulator}\n      onMouseMove={handleMouseMove}\n    >\n      {/* Background with stars */}\n      <Background cursorPosition={cursorPosition} setCursorPosition={setCursorPosition} />\n      \n      {/* Meteor shower effect */}\n      <MeteorShower \n        height=\"100vh\"\n        zIndex={2}\n        trailColor=\"rgba(191, 173, 127, 0.8)\"\n        glowColor=\"rgba(207, 185, 130, 0.6)\"\n        coreColor=\"rgba(255, 248, 220, 1)\"\n        meteorDensity={20}\n        meteorMinSize={1}\n        meteorMaxSize={2.5}\n        meteorSpeed={0.08}\n        trailLength={300}\n        trailSegments={80}\n        enableParallax={true}\n        parallaxIntensity={0.15}\n        mode=\"arc\"\n        staggered={true}\n      />\n      \n      {/* Header overlay */}\n      <header ref={headerRef} className={classes.header}>\n        <ScrollingTextAnimation\n          scrollConfig={{\n            startPosition: 0,\n            endPosition: 300,\n            initialY: -30,\n            finalY: 0,\n            clampValues: true\n          }}\n        >\n          <h1 className={classes.title}>Crescent Evolution System</h1>\n          <p className={classes.subtitle}>\n            Explore the interconnected trait networks that drive evolution through Bayesian natural selection\n          </p>\n        </ScrollingTextAnimation>\n      </header>\n      \n      {/* Floating control panel */}\n      <motion.div \n        className={classes.controlPanel}\n        initial={{ y: -20, opacity: 0 }}\n        animate={{ y: 0, opacity: 1 }}\n        transition={{ delay: 0.5, duration: 0.4 }}\n      >\n        {/* Body shape selector always visible at top */}\n        {renderBodyShapeSelector()}\n        \n        {/* Filter controls */}\n        <div className={classes.controlBar}>\n          <div className={classes.filterControls}>\n            <button \n              className={`${classes.filterButton} ${filterMode === 'all' ? classes.active : ''}`}\n              onClick={() => handleFilterModeChange('all')}\n            >\n              All Traits\n            </button>\n            <button \n              className={`${classes.filterButton} ${filterMode === 'relevance' ? classes.active : ''}`}\n              onClick={() => handleFilterModeChange('relevance')}\n            >\n              By Relevance\n            </button>\n            <button \n              className={`${classes.filterButton} ${filterMode === 'category' ? classes.active : ''}`}\n              onClick={() => handleFilterModeChange('category')}\n              disabled={!selectedTrait}\n            >\n              By Category\n            </button>\n          </div>\n          \n          {/* Legend display */}\n          <div className={classes.legendControls}>\n            <div className={classes.legendItems}>\n              {traitCategories.map(category => (\n                <div key={category.id} className={classes.legendItem}>\n                  <div \n                    className={classes.legendColor}\n                    style={{ backgroundColor: category.color }}\n                  ></div>\n                  <span className={classes.legendName}>{category.name}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </motion.div>\n      \n      {/* Main interactive visualization */}\n      <div \n        ref={containerRef}\n        className={classes.networkVisualizer}\n        onClick={handleCanvasClick}\n        onMouseMove={handleCanvasMouseMove}\n      >\n        <canvas \n          ref={canvasRef}\n          className={classes.networkCanvas}\n        />\n        \n        {/* Trait tooltip on hover */}\n        <AnimatePresence>\n          {hoveredTrait && renderTraitTooltip()}\n        </AnimatePresence>\n      </div>\n      \n      {/* Floating information panels */}\n      <div className={classes.informationPanels}>\n        {/* Environmental controls panel */}\n        <motion.div \n          className={classes.envPanel}\n          initial={{ opacity: 0, x: 50 }}\n          animate={{ opacity: 1, x: 0 }}\n          transition={{ delay: 0.7, duration: 0.5 }}\n        >\n          {renderEnvironmentControls()}\n        </motion.div>\n        \n        {/* Trait details panel when a trait is selected */}\n        <AnimatePresence>\n          {selectedTrait && (\n            <motion.div \n              className={classes.traitPanel}\n              initial={{ opacity: 0, y: 30 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: 30 }}\n              transition={{ duration: 0.4 }}\n            >\n              {renderTraitDetails()}\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n      \n      {/* Instruction overlay that fades out */}\n      <motion.div \n        className={classes.instructionOverlay}\n        initial={{ opacity: 1 }}\n        animate={{ opacity: isLoaded ? 0 : 1 }}\n        transition={{ delay: 3, duration: 2 }}\n      >\n        <div className={classes.instructionContent}>\n          <div className={classes.instructionIcon}>⧍</div>\n          <p>Click on the central body shape or any trait to explore connections</p>\n        </div>\n      </motion.div>\n      \n      {/* Accessibility skip link */}\n      <a href=\"#content\" className={classes.skipLink}>\n        Skip to main content\n      </a>\n    </div>\n  );\n};\n\nexport default EvolutionSimulator;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}