{"ast":null,"code":"import React,{useRef}from'react';import{motion,useScroll,useTransform}from'framer-motion';import{createUseStyles}from'react-jss';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const useStyles=createUseStyles({animatedContainer:{position:'relative',width:'100%',textAlign:props=>props.textAlign||'center',margin:props=>props.margin||'0 0 3rem 0',zIndex:2},content:{width:'100%'},divider:props=>({width:props.dividerWidth||'150px',height:props.dividerHeight||'1px',background:props.dividerBackground||'linear-gradient(to right, rgba(160, 142, 97, 0), rgba(160, 142, 97, 0.6), rgba(160, 142, 97, 0))',margin:props.dividerMargin||'1rem auto',display:props.showDivider?'block':'none'})});/**\n * ScrollingTextAnimation Component\n * \n * A highly customizable component that creates a scroll-based animation\n * for text elements. The text can move and change opacity as the user scrolls.\n * \n * @param {Object} props - Component props\n * @param {ReactNode} props.children - Content to animate\n * @param {Object} [props.scrollConfig] - Scroll animation configuration\n * @param {number} [props.scrollConfig.startPosition=0] - Starting scroll position in pixels\n * @param {number} [props.scrollConfig.endPosition=300] - Ending scroll position in pixels\n * @param {number} [props.scrollConfig.initialY=-100] - Initial Y position (pixels above final position)\n * @param {number} [props.scrollConfig.finalY=0] - Final Y position (pixels)\n * @param {boolean} [props.scrollConfig.clampValues=true] - Whether to clamp transform values\n * @param {Array} [props.scrollConfig.opacityValues=[1, 0.95, 0.9]] - Opacity values at different scroll positions\n * @param {Array} [props.scrollConfig.opacityScrollPositions] - Scroll positions for opacity changes (computed by default)\n * @param {boolean} [props.scrollConfig.reverseDirection=false] - Whether to reverse the animation direction\n * @param {string} [props.textAlign='center'] - Text alignment\n * @param {string} [props.margin='0 0 3rem 0'] - Container margin\n * @param {boolean} [props.showDivider=true] - Whether to show a divider below the content\n * @param {string} [props.dividerWidth='150px'] - Width of the divider\n * @param {string} [props.dividerHeight='1px'] - Height of the divider\n * @param {string} [props.dividerBackground] - Background style for the divider\n * @param {string} [props.dividerMargin='1rem auto'] - Margin for the divider\n * @param {Object} [props.style] - Additional inline styles\n * @param {string} [props.className] - Additional CSS class\n */const ScrollingTextAnimation=_ref=>{let{children,scrollConfig={},textAlign='center',margin='0 0 3rem 0',showDivider=true,dividerWidth='150px',dividerHeight='1px',dividerBackground,dividerMargin='1rem auto',style={},className=''}=_ref;// Set default scroll configuration\nconst{startPosition=0,endPosition=300,initialY=-100,finalY=0,clampValues=true,opacityValues=[1,0.95,0.9],opacityScrollPositions=[startPosition,endPosition,endPosition+100],reverseDirection=false}=scrollConfig;// Calculate the actual Y values considering direction\nconst yInputRange=[startPosition,endPosition];const yOutputRange=reverseDirection?[finalY,initialY]:[initialY,finalY];// Set up scroll tracking\nconst{scrollY}=useScroll();const containerRef=useRef(null);// Create transform values based on scroll position\nconst translateY=useTransform(scrollY,yInputRange,yOutputRange,{clamp:clampValues});// Create opacity transform\nconst opacity=useTransform(scrollY,opacityScrollPositions,opacityValues,{clamp:clampValues});// Create styles for component\nconst styleProps={textAlign,margin,showDivider,dividerWidth,dividerHeight,dividerBackground,dividerMargin};const classes=useStyles(styleProps);return/*#__PURE__*/_jsxs(motion.div,{ref:containerRef,className:`${classes.animatedContainer} ${className}`,style:{...style,y:translateY,opacity:opacity},children:[/*#__PURE__*/_jsx(\"div\",{className:classes.content,children:children}),showDivider&&/*#__PURE__*/_jsx(\"div\",{className:classes.divider})]});};export default ScrollingTextAnimation;","map":{"version":3,"names":["React","useRef","motion","useScroll","useTransform","createUseStyles","jsx","_jsx","jsxs","_jsxs","useStyles","animatedContainer","position","width","textAlign","props","margin","zIndex","content","divider","dividerWidth","height","dividerHeight","background","dividerBackground","dividerMargin","display","showDivider","ScrollingTextAnimation","_ref","children","scrollConfig","style","className","startPosition","endPosition","initialY","finalY","clampValues","opacityValues","opacityScrollPositions","reverseDirection","yInputRange","yOutputRange","scrollY","containerRef","translateY","clamp","opacity","styleProps","classes","div","ref","y"],"sources":["/home/valeria/Documents/Crucible/frontend/src/components/core/effects/ScrollingTextAnimation.jsx"],"sourcesContent":["import React, { useRef } from 'react';\nimport { motion, useScroll, useTransform } from 'framer-motion';\nimport { createUseStyles } from 'react-jss';\n\nconst useStyles = createUseStyles({\n  animatedContainer: {\n    position: 'relative',\n    width: '100%',\n    textAlign: props => props.textAlign || 'center',\n    margin: props => props.margin || '0 0 3rem 0',\n    zIndex: 2\n  },\n  content: {\n    width: '100%'\n  },\n  divider: props => ({\n    width: props.dividerWidth || '150px',\n    height: props.dividerHeight || '1px',\n    background: props.dividerBackground || 'linear-gradient(to right, rgba(160, 142, 97, 0), rgba(160, 142, 97, 0.6), rgba(160, 142, 97, 0))',\n    margin: props.dividerMargin || '1rem auto',\n    display: props.showDivider ? 'block' : 'none'\n  })\n});\n\n/**\n * ScrollingTextAnimation Component\n * \n * A highly customizable component that creates a scroll-based animation\n * for text elements. The text can move and change opacity as the user scrolls.\n * \n * @param {Object} props - Component props\n * @param {ReactNode} props.children - Content to animate\n * @param {Object} [props.scrollConfig] - Scroll animation configuration\n * @param {number} [props.scrollConfig.startPosition=0] - Starting scroll position in pixels\n * @param {number} [props.scrollConfig.endPosition=300] - Ending scroll position in pixels\n * @param {number} [props.scrollConfig.initialY=-100] - Initial Y position (pixels above final position)\n * @param {number} [props.scrollConfig.finalY=0] - Final Y position (pixels)\n * @param {boolean} [props.scrollConfig.clampValues=true] - Whether to clamp transform values\n * @param {Array} [props.scrollConfig.opacityValues=[1, 0.95, 0.9]] - Opacity values at different scroll positions\n * @param {Array} [props.scrollConfig.opacityScrollPositions] - Scroll positions for opacity changes (computed by default)\n * @param {boolean} [props.scrollConfig.reverseDirection=false] - Whether to reverse the animation direction\n * @param {string} [props.textAlign='center'] - Text alignment\n * @param {string} [props.margin='0 0 3rem 0'] - Container margin\n * @param {boolean} [props.showDivider=true] - Whether to show a divider below the content\n * @param {string} [props.dividerWidth='150px'] - Width of the divider\n * @param {string} [props.dividerHeight='1px'] - Height of the divider\n * @param {string} [props.dividerBackground] - Background style for the divider\n * @param {string} [props.dividerMargin='1rem auto'] - Margin for the divider\n * @param {Object} [props.style] - Additional inline styles\n * @param {string} [props.className] - Additional CSS class\n */\nconst ScrollingTextAnimation = ({\n  children,\n  scrollConfig = {},\n  textAlign = 'center',\n  margin = '0 0 3rem 0',\n  showDivider = true,\n  dividerWidth = '150px',\n  dividerHeight = '1px',\n  dividerBackground,\n  dividerMargin = '1rem auto',\n  style = {},\n  className = ''\n}) => {\n  // Set default scroll configuration\n  const {\n    startPosition = 0,\n    endPosition = 300,\n    initialY = -100,\n    finalY = 0,\n    clampValues = true,\n    opacityValues = [1, 0.95, 0.9],\n    opacityScrollPositions = [startPosition, endPosition, endPosition + 100],\n    reverseDirection = false\n  } = scrollConfig;\n\n  // Calculate the actual Y values considering direction\n  const yInputRange = [startPosition, endPosition];\n  const yOutputRange = reverseDirection ? [finalY, initialY] : [initialY, finalY];\n  \n  // Set up scroll tracking\n  const { scrollY } = useScroll();\n  const containerRef = useRef(null);\n  \n  // Create transform values based on scroll position\n  const translateY = useTransform(\n    scrollY,\n    yInputRange,\n    yOutputRange,\n    { clamp: clampValues }\n  );\n  \n  // Create opacity transform\n  const opacity = useTransform(\n    scrollY,\n    opacityScrollPositions,\n    opacityValues,\n    { clamp: clampValues }\n  );\n  \n  // Create styles for component\n  const styleProps = {\n    textAlign,\n    margin,\n    showDivider,\n    dividerWidth,\n    dividerHeight,\n    dividerBackground,\n    dividerMargin\n  };\n  \n  const classes = useStyles(styleProps);\n  \n  return (\n    <motion.div \n      ref={containerRef}\n      className={`${classes.animatedContainer} ${className}`}\n      style={{ \n        ...style,\n        y: translateY, \n        opacity: opacity\n      }}\n    >\n      <div className={classes.content}>\n        {children}\n      </div>\n      {showDivider && <div className={classes.divider} />}\n    </motion.div>\n  );\n};\n\nexport default ScrollingTextAnimation;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}