{"ast":null,"code":"var _jsxFileName = \"/home/valeria/Documents/Crucible/frontend/src/components/core/Background.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useCallback, useMemo } from 'react';\n\n/**\n * Background Component\n * \n * Creates an animated starfield background with moving constellations\n * that work independently of cursor position.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Background = ({\n  // For backward compatibility\n  cursorPosition,\n  setCursorPosition,\n  // Configuration options\n  zIndex = -1,\n  active = true,\n  starCount = 150,\n  starMinSize = 0.5,\n  starMaxSize = 2.5,\n  starMinOpacity = 0.2,\n  starMaxOpacity = 0.8,\n  constellationCount = 8,\n  constellationDensity = 0.3,\n  constellationLineOpacity = 0.15,\n  constellationLineColor = 'rgba(160, 142, 97, 0.4)',\n  coreStarColor = 'rgba(255, 253, 227, 1)',\n  glowStarColor = 'rgba(191, 173, 127, 0.6)',\n  vertexEffectIntensity = 0.5,\n  backgroundMotionSpeed = 0.0005,\n  starPulseDuration = 3000,\n  stellarDriftSpeed = 0.02,\n  adaptiveQuality = true,\n  respectReducedMotion = true,\n  debugMode = false\n}) => {\n  _s();\n  // Console log to confirm component is rendering\n  console.log(\"Background component rendering\");\n\n  // Component state\n  const [dimensions, setDimensions] = useState({\n    width: 0,\n    height: 0\n  });\n  const [initialized, setInitialized] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Refs\n  const containerRef = useRef(null);\n  const canvasRef = useRef(null);\n  const ctxRef = useRef(null);\n  const starsRef = useRef([]);\n  const constellationsRef = useRef([]);\n  const animationFrameRef = useRef(null);\n  const lastFrameTimeRef = useRef(0);\n\n  // Setup canvas\n  useEffect(() => {\n    console.log(\"Background setup effect running\");\n    if (!containerRef.current) {\n      console.warn(\"Container ref not available\");\n      return;\n    }\n    try {\n      const canvas = canvasRef.current;\n      const container = containerRef.current;\n\n      // Log container dimensions to debug sizing issues\n      const rect = container.getBoundingClientRect();\n      console.log(\"Container dimensions:\", rect.width, rect.height);\n\n      // Set canvas size\n      const pixelRatio = window.devicePixelRatio || 1;\n      canvas.width = rect.width * pixelRatio;\n      canvas.height = rect.height * pixelRatio;\n\n      // Set CSS display size\n      canvas.style.width = `${rect.width}px`;\n      canvas.style.height = `${rect.height}px`;\n\n      // Get canvas context\n      const ctx = canvas.getContext('2d');\n      if (!ctx) {\n        throw new Error(\"Could not get canvas context\");\n      }\n\n      // Scale context for high-DPI displays\n      ctx.scale(pixelRatio, pixelRatio);\n      ctxRef.current = ctx;\n\n      // Update dimensions state\n      setDimensions({\n        width: rect.width,\n        height: rect.height\n      });\n      console.log(\"Canvas initialized:\", canvas.width, canvas.height);\n\n      // Draw a test shape to confirm canvas is working\n      ctx.fillStyle = 'rgba(160, 142, 97, 0.2)';\n      ctx.fillRect(0, 0, rect.width, rect.height);\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\n      ctx.fillRect(rect.width / 2 - 50, rect.height / 2 - 50, 100, 100);\n    } catch (err) {\n      console.error(\"Error setting up canvas:\", err);\n      setError(err.message);\n    }\n  }, []);\n\n  // Initialize stars when dimensions change\n  useEffect(() => {\n    if (!dimensions.width || !dimensions.height) return;\n    console.log(\"Initializing stars with dimensions:\", dimensions);\n    try {\n      // Create stars\n      const stars = [];\n      for (let i = 0; i < starCount; i++) {\n        const x = Math.random() * dimensions.width;\n        const y = Math.random() * dimensions.height;\n        const size = Math.random() * (starMaxSize - starMinSize) + starMinSize;\n        const opacity = Math.random() * (starMaxOpacity - starMinOpacity) + starMinOpacity;\n        stars.push({\n          x,\n          y,\n          size,\n          opacity,\n          originalX: x,\n          originalY: y,\n          pulsePhase: Math.random() * Math.PI * 2,\n          zDepth: Math.random() * 0.8 + 0.2\n        });\n      }\n      starsRef.current = stars;\n\n      // Create constellations\n      const constellations = [];\n      // Simplified constellation initialization for debugging\n      for (let i = 0; i < constellationCount; i++) {\n        const points = [];\n        const pointCount = Math.floor(Math.random() * 4) + 3; // 3-6 points\n\n        // Add random points\n        for (let j = 0; j < pointCount; j++) {\n          points.push({\n            x: Math.random() * dimensions.width,\n            y: Math.random() * dimensions.height\n          });\n        }\n        constellations.push({\n          points,\n          opacity: constellationLineOpacity,\n          rotation: (Math.random() * 0.0002 - 0.0001) * (Math.random() < 0.5 ? -1 : 1),\n          rotationCenter: {\n            x: dimensions.width / 2 + (Math.random() * 200 - 100),\n            y: dimensions.height / 2 + (Math.random() * 200 - 100)\n          }\n        });\n      }\n      constellationsRef.current = constellations;\n\n      // Mark initialization as complete\n      setInitialized(true);\n      console.log(\"Stars and constellations initialized\");\n    } catch (err) {\n      console.error(\"Error initializing stars:\", err);\n      setError(err.message);\n    }\n  }, [dimensions, starCount, starMinSize, starMaxSize, starMinOpacity, starMaxOpacity, constellationCount, constellationLineOpacity]);\n\n  // Animation function\n  const animate = useCallback(() => {\n    if (!ctxRef.current || !initialized) {\n      animationFrameRef.current = requestAnimationFrame(animate);\n      return;\n    }\n    const ctx = ctxRef.current;\n    const now = performance.now();\n    const {\n      width,\n      height\n    } = dimensions;\n\n    // Clear canvas\n    ctx.clearRect(0, 0, width, height);\n\n    // Draw test background to confirm rendering\n    if (debugMode) {\n      ctx.fillStyle = 'rgba(50, 50, 70, 0.1)';\n      ctx.fillRect(0, 0, width, height);\n    }\n\n    // Calculate global movement\n    const globalOffsetX = Math.sin(now * backgroundMotionSpeed) * width * 0.05;\n    const globalOffsetY = Math.cos(now * backgroundMotionSpeed) * height * 0.05;\n\n    // Draw stars\n    starsRef.current.forEach(star => {\n      const parallaxFactor = star.zDepth;\n\n      // Update position with smooth motion\n      const x = star.originalX + globalOffsetX * parallaxFactor;\n      const y = star.originalY + globalOffsetY * parallaxFactor;\n\n      // Pulse effect\n      const pulseValue = Math.sin(now * 0.001 + star.pulsePhase) * 0.2 + 0.8;\n      const currentSize = star.size * pulseValue;\n      const currentOpacity = star.opacity * pulseValue;\n\n      // Draw star\n      ctx.beginPath();\n      ctx.arc(x, y, currentSize, 0, Math.PI * 2);\n      ctx.fillStyle = `rgba(255, 253, 227, ${currentOpacity})`;\n      ctx.fill();\n    });\n\n    // Draw constellations\n    constellationsRef.current.forEach(constellation => {\n      if (constellation.points.length < 2) return;\n      ctx.beginPath();\n\n      // Move constellation center based on global movement\n      const centerX = constellation.rotationCenter.x + globalOffsetX * 0.2;\n      const centerY = constellation.rotationCenter.y + globalOffsetY * 0.2;\n\n      // Calculate rotation based on time\n      const rotationAmount = constellation.rotation * (now - lastFrameTimeRef.current);\n\n      // Get starting point\n      const firstPoint = constellation.points[0];\n      const fx = centerX + (firstPoint.x - centerX) * Math.cos(rotationAmount) - (firstPoint.y - centerY) * Math.sin(rotationAmount);\n      const fy = centerY + (firstPoint.x - centerX) * Math.sin(rotationAmount) + (firstPoint.y - centerY) * Math.cos(rotationAmount);\n      ctx.moveTo(fx, fy);\n\n      // Connect points\n      for (let i = 1; i < constellation.points.length; i++) {\n        const point = constellation.points[i];\n        const px = centerX + (point.x - centerX) * Math.cos(rotationAmount) - (point.y - centerY) * Math.sin(rotationAmount);\n        const py = centerY + (point.x - centerX) * Math.sin(rotationAmount) + (point.y - centerY) * Math.cos(rotationAmount);\n        ctx.lineTo(px, py);\n      }\n\n      // Draw constellation lines\n      ctx.strokeStyle = constellationLineColor;\n      ctx.lineWidth = 0.7;\n      ctx.stroke();\n    });\n\n    // Debug info\n    if (debugMode) {\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n      ctx.font = '12px monospace';\n      ctx.fillText(`Stars: ${starsRef.current.length}`, 10, 20);\n      ctx.fillText(`Constellations: ${constellationsRef.current.length}`, 10, 40);\n      ctx.fillText(`Dimensions: ${width}Ã—${height}`, 10, 60);\n      ctx.fillText(`Time: ${Math.floor(now)}`, 10, 80);\n    }\n\n    // Store time for next frame\n    lastFrameTimeRef.current = now;\n\n    // Request next frame\n    animationFrameRef.current = requestAnimationFrame(animate);\n  }, [dimensions, initialized, backgroundMotionSpeed, constellationLineColor, debugMode]);\n\n  // Start animation loop\n  useEffect(() => {\n    if (!initialized) return;\n    console.log(\"Starting animation loop\");\n    lastFrameTimeRef.current = performance.now();\n    animationFrameRef.current = requestAnimationFrame(animate);\n\n    // Add resize handler\n    const handleResize = () => {\n      if (!containerRef.current) return;\n      const rect = containerRef.current.getBoundingClientRect();\n      console.log(\"Window resized, new dimensions:\", rect.width, rect.height);\n      const canvas = canvasRef.current;\n      const pixelRatio = window.devicePixelRatio || 1;\n      canvas.width = rect.width * pixelRatio;\n      canvas.height = rect.height * pixelRatio;\n      canvas.style.width = `${rect.width}px`;\n      canvas.style.height = `${rect.height}px`;\n      if (ctxRef.current) {\n        ctxRef.current.scale(pixelRatio, pixelRatio);\n      }\n      setDimensions({\n        width: rect.width,\n        height: rect.height\n      });\n    };\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [initialized, animate]);\n\n  // Render component\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    style: {\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%',\n      overflow: 'hidden',\n      zIndex,\n      pointerEvents: 'none',\n      backgroundColor: error ? 'rgba(20, 20, 30, 0.8)' : 'transparent'\n    },\n    \"aria-hidden\": \"true\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        opacity: 1\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: '10px',\n        left: '10px',\n        color: 'white',\n        background: 'rgba(255, 0, 0, 0.7)',\n        padding: '10px',\n        zIndex: 1000\n      },\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 9\n    }, this), debugMode && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        bottom: '10px',\n        right: '10px',\n        color: 'white',\n        background: 'rgba(0, 0, 0, 0.5)',\n        padding: '5px',\n        zIndex: 1000,\n        fontFamily: 'monospace',\n        fontSize: '10px'\n      },\n      children: [\"Background v1.0 | Canvas: \", dimensions.width, \"\\xD7\", dimensions.height, \" | Stars: \", starsRef.current.length, \" | Constellations: \", constellationsRef.current.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 317,\n    columnNumber: 5\n  }, this);\n};\n_s(Background, \"FUWBnI+QWEOZTQ9TM1af6U08yEw=\");\n_c = Background;\nexport default Background;\nvar _c;\n$RefreshReg$(_c, \"Background\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useCallback","useMemo","jsxDEV","_jsxDEV","Background","cursorPosition","setCursorPosition","zIndex","active","starCount","starMinSize","starMaxSize","starMinOpacity","starMaxOpacity","constellationCount","constellationDensity","constellationLineOpacity","constellationLineColor","coreStarColor","glowStarColor","vertexEffectIntensity","backgroundMotionSpeed","starPulseDuration","stellarDriftSpeed","adaptiveQuality","respectReducedMotion","debugMode","_s","console","log","dimensions","setDimensions","width","height","initialized","setInitialized","error","setError","containerRef","canvasRef","ctxRef","starsRef","constellationsRef","animationFrameRef","lastFrameTimeRef","current","warn","canvas","container","rect","getBoundingClientRect","pixelRatio","window","devicePixelRatio","style","ctx","getContext","Error","scale","fillStyle","fillRect","err","message","stars","i","x","Math","random","y","size","opacity","push","originalX","originalY","pulsePhase","PI","zDepth","constellations","points","pointCount","floor","j","rotation","rotationCenter","animate","requestAnimationFrame","now","performance","clearRect","globalOffsetX","sin","globalOffsetY","cos","forEach","star","parallaxFactor","pulseValue","currentSize","currentOpacity","beginPath","arc","fill","constellation","length","centerX","centerY","rotationAmount","firstPoint","fx","fy","moveTo","point","px","py","lineTo","strokeStyle","lineWidth","stroke","font","fillText","handleResize","addEventListener","removeEventListener","cancelAnimationFrame","ref","position","top","left","overflow","pointerEvents","backgroundColor","children","fileName","_jsxFileName","lineNumber","columnNumber","color","background","padding","bottom","right","fontFamily","fontSize","_c","$RefreshReg$"],"sources":["/home/valeria/Documents/Crucible/frontend/src/components/core/Background.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect, useCallback, useMemo } from 'react';\n\n/**\n * Background Component\n * \n * Creates an animated starfield background with moving constellations\n * that work independently of cursor position.\n */\nconst Background = ({\n  // For backward compatibility\n  cursorPosition,\n  setCursorPosition,\n  \n  // Configuration options\n  zIndex = -1,\n  active = true,\n  starCount = 150,\n  starMinSize = 0.5,\n  starMaxSize = 2.5,\n  starMinOpacity = 0.2,\n  starMaxOpacity = 0.8,\n  constellationCount = 8,\n  constellationDensity = 0.3,\n  constellationLineOpacity = 0.15,\n  constellationLineColor = 'rgba(160, 142, 97, 0.4)',\n  coreStarColor = 'rgba(255, 253, 227, 1)',\n  glowStarColor = 'rgba(191, 173, 127, 0.6)',\n  vertexEffectIntensity = 0.5,\n  backgroundMotionSpeed = 0.0005,\n  starPulseDuration = 3000,\n  stellarDriftSpeed = 0.02,\n  adaptiveQuality = true,\n  respectReducedMotion = true,\n  debugMode = false\n}) => {\n  // Console log to confirm component is rendering\n  console.log(\"Background component rendering\");\n\n  // Component state\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });\n  const [initialized, setInitialized] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Refs\n  const containerRef = useRef(null);\n  const canvasRef = useRef(null);\n  const ctxRef = useRef(null);\n  const starsRef = useRef([]);\n  const constellationsRef = useRef([]);\n  const animationFrameRef = useRef(null);\n  const lastFrameTimeRef = useRef(0);\n\n  // Setup canvas\n  useEffect(() => {\n    console.log(\"Background setup effect running\");\n    \n    if (!containerRef.current) {\n      console.warn(\"Container ref not available\");\n      return;\n    }\n\n    try {\n      const canvas = canvasRef.current;\n      const container = containerRef.current;\n      \n      // Log container dimensions to debug sizing issues\n      const rect = container.getBoundingClientRect();\n      console.log(\"Container dimensions:\", rect.width, rect.height);\n      \n      // Set canvas size\n      const pixelRatio = window.devicePixelRatio || 1;\n      canvas.width = rect.width * pixelRatio;\n      canvas.height = rect.height * pixelRatio;\n      \n      // Set CSS display size\n      canvas.style.width = `${rect.width}px`;\n      canvas.style.height = `${rect.height}px`;\n      \n      // Get canvas context\n      const ctx = canvas.getContext('2d');\n      if (!ctx) {\n        throw new Error(\"Could not get canvas context\");\n      }\n      \n      // Scale context for high-DPI displays\n      ctx.scale(pixelRatio, pixelRatio);\n      ctxRef.current = ctx;\n      \n      // Update dimensions state\n      setDimensions({\n        width: rect.width,\n        height: rect.height\n      });\n      \n      console.log(\"Canvas initialized:\", canvas.width, canvas.height);\n      \n      // Draw a test shape to confirm canvas is working\n      ctx.fillStyle = 'rgba(160, 142, 97, 0.2)';\n      ctx.fillRect(0, 0, rect.width, rect.height);\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\n      ctx.fillRect(rect.width/2 - 50, rect.height/2 - 50, 100, 100);\n      \n    } catch (err) {\n      console.error(\"Error setting up canvas:\", err);\n      setError(err.message);\n    }\n  }, []);\n\n  // Initialize stars when dimensions change\n  useEffect(() => {\n    if (!dimensions.width || !dimensions.height) return;\n    \n    console.log(\"Initializing stars with dimensions:\", dimensions);\n    \n    try {\n      // Create stars\n      const stars = [];\n      for (let i = 0; i < starCount; i++) {\n        const x = Math.random() * dimensions.width;\n        const y = Math.random() * dimensions.height;\n        const size = Math.random() * (starMaxSize - starMinSize) + starMinSize;\n        const opacity = Math.random() * (starMaxOpacity - starMinOpacity) + starMinOpacity;\n        \n        stars.push({\n          x,\n          y,\n          size,\n          opacity,\n          originalX: x,\n          originalY: y,\n          pulsePhase: Math.random() * Math.PI * 2,\n          zDepth: Math.random() * 0.8 + 0.2\n        });\n      }\n      \n      starsRef.current = stars;\n      \n      // Create constellations\n      const constellations = [];\n      // Simplified constellation initialization for debugging\n      for (let i = 0; i < constellationCount; i++) {\n        const points = [];\n        const pointCount = Math.floor(Math.random() * 4) + 3; // 3-6 points\n        \n        // Add random points\n        for (let j = 0; j < pointCount; j++) {\n          points.push({\n            x: Math.random() * dimensions.width,\n            y: Math.random() * dimensions.height\n          });\n        }\n        \n        constellations.push({\n          points,\n          opacity: constellationLineOpacity,\n          rotation: (Math.random() * 0.0002 - 0.0001) * (Math.random() < 0.5 ? -1 : 1),\n          rotationCenter: { \n            x: dimensions.width / 2 + (Math.random() * 200 - 100),\n            y: dimensions.height / 2 + (Math.random() * 200 - 100)\n          }\n        });\n      }\n      \n      constellationsRef.current = constellations;\n      \n      // Mark initialization as complete\n      setInitialized(true);\n      console.log(\"Stars and constellations initialized\");\n      \n    } catch (err) {\n      console.error(\"Error initializing stars:\", err);\n      setError(err.message);\n    }\n  }, [dimensions, starCount, starMinSize, starMaxSize, starMinOpacity, starMaxOpacity, constellationCount, constellationLineOpacity]);\n\n  // Animation function\n  const animate = useCallback(() => {\n    if (!ctxRef.current || !initialized) {\n      animationFrameRef.current = requestAnimationFrame(animate);\n      return;\n    }\n    \n    const ctx = ctxRef.current;\n    const now = performance.now();\n    const { width, height } = dimensions;\n    \n    // Clear canvas\n    ctx.clearRect(0, 0, width, height);\n    \n    // Draw test background to confirm rendering\n    if (debugMode) {\n      ctx.fillStyle = 'rgba(50, 50, 70, 0.1)';\n      ctx.fillRect(0, 0, width, height);\n    }\n    \n    // Calculate global movement\n    const globalOffsetX = Math.sin(now * backgroundMotionSpeed) * width * 0.05;\n    const globalOffsetY = Math.cos(now * backgroundMotionSpeed) * height * 0.05;\n    \n    // Draw stars\n    starsRef.current.forEach(star => {\n      const parallaxFactor = star.zDepth;\n      \n      // Update position with smooth motion\n      const x = star.originalX + globalOffsetX * parallaxFactor;\n      const y = star.originalY + globalOffsetY * parallaxFactor;\n      \n      // Pulse effect\n      const pulseValue = Math.sin(now * 0.001 + star.pulsePhase) * 0.2 + 0.8;\n      const currentSize = star.size * pulseValue;\n      const currentOpacity = star.opacity * pulseValue;\n      \n      // Draw star\n      ctx.beginPath();\n      ctx.arc(x, y, currentSize, 0, Math.PI * 2);\n      ctx.fillStyle = `rgba(255, 253, 227, ${currentOpacity})`;\n      ctx.fill();\n    });\n    \n    // Draw constellations\n    constellationsRef.current.forEach(constellation => {\n      if (constellation.points.length < 2) return;\n      \n      ctx.beginPath();\n      \n      // Move constellation center based on global movement\n      const centerX = constellation.rotationCenter.x + globalOffsetX * 0.2;\n      const centerY = constellation.rotationCenter.y + globalOffsetY * 0.2;\n      \n      // Calculate rotation based on time\n      const rotationAmount = constellation.rotation * (now - lastFrameTimeRef.current);\n      \n      // Get starting point\n      const firstPoint = constellation.points[0];\n      const fx = centerX + (firstPoint.x - centerX) * Math.cos(rotationAmount) - (firstPoint.y - centerY) * Math.sin(rotationAmount);\n      const fy = centerY + (firstPoint.x - centerX) * Math.sin(rotationAmount) + (firstPoint.y - centerY) * Math.cos(rotationAmount);\n      \n      ctx.moveTo(fx, fy);\n      \n      // Connect points\n      for (let i = 1; i < constellation.points.length; i++) {\n        const point = constellation.points[i];\n        const px = centerX + (point.x - centerX) * Math.cos(rotationAmount) - (point.y - centerY) * Math.sin(rotationAmount);\n        const py = centerY + (point.x - centerX) * Math.sin(rotationAmount) + (point.y - centerY) * Math.cos(rotationAmount);\n        \n        ctx.lineTo(px, py);\n      }\n      \n      // Draw constellation lines\n      ctx.strokeStyle = constellationLineColor;\n      ctx.lineWidth = 0.7;\n      ctx.stroke();\n    });\n    \n    // Debug info\n    if (debugMode) {\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n      ctx.font = '12px monospace';\n      ctx.fillText(`Stars: ${starsRef.current.length}`, 10, 20);\n      ctx.fillText(`Constellations: ${constellationsRef.current.length}`, 10, 40);\n      ctx.fillText(`Dimensions: ${width}Ã—${height}`, 10, 60);\n      ctx.fillText(`Time: ${Math.floor(now)}`, 10, 80);\n    }\n    \n    // Store time for next frame\n    lastFrameTimeRef.current = now;\n    \n    // Request next frame\n    animationFrameRef.current = requestAnimationFrame(animate);\n  }, [dimensions, initialized, backgroundMotionSpeed, constellationLineColor, debugMode]);\n\n  // Start animation loop\n  useEffect(() => {\n    if (!initialized) return;\n    \n    console.log(\"Starting animation loop\");\n    lastFrameTimeRef.current = performance.now();\n    animationFrameRef.current = requestAnimationFrame(animate);\n    \n    // Add resize handler\n    const handleResize = () => {\n      if (!containerRef.current) return;\n      \n      const rect = containerRef.current.getBoundingClientRect();\n      console.log(\"Window resized, new dimensions:\", rect.width, rect.height);\n      \n      const canvas = canvasRef.current;\n      const pixelRatio = window.devicePixelRatio || 1;\n      \n      canvas.width = rect.width * pixelRatio;\n      canvas.height = rect.height * pixelRatio;\n      canvas.style.width = `${rect.width}px`;\n      canvas.style.height = `${rect.height}px`;\n      \n      if (ctxRef.current) {\n        ctxRef.current.scale(pixelRatio, pixelRatio);\n      }\n      \n      setDimensions({\n        width: rect.width,\n        height: rect.height\n      });\n    };\n    \n    window.addEventListener('resize', handleResize);\n    \n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [initialized, animate]);\n\n  // Render component\n  return (\n    <div\n      ref={containerRef}\n      style={{\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        overflow: 'hidden',\n        zIndex,\n        pointerEvents: 'none',\n        backgroundColor: error ? 'rgba(20, 20, 30, 0.8)' : 'transparent',\n      }}\n      aria-hidden=\"true\"\n    >\n      <canvas\n        ref={canvasRef}\n        style={{\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%',\n          height: '100%',\n          opacity: 1,\n        }}\n      />\n      \n      {/* Error message for debugging */}\n      {error && (\n        <div style={{ \n          position: 'absolute', \n          top: '10px', \n          left: '10px', \n          color: 'white', \n          background: 'rgba(255, 0, 0, 0.7)',\n          padding: '10px',\n          zIndex: 1000\n        }}>\n          Error: {error}\n        </div>\n      )}\n      \n      {/* Debug overlay with version information */}\n      {debugMode && (\n        <div style={{ \n          position: 'absolute', \n          bottom: '10px', \n          right: '10px', \n          color: 'white', \n          background: 'rgba(0, 0, 0, 0.5)',\n          padding: '5px',\n          zIndex: 1000,\n          fontFamily: 'monospace',\n          fontSize: '10px'\n        }}>\n          Background v1.0 | Canvas: {dimensions.width}Ã—{dimensions.height} | \n          Stars: {starsRef.current.length} | Constellations: {constellationsRef.current.length}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Background;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}