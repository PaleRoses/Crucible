{"ast":null,"code":"var _jsxFileName = \"/home/valeria/Documents/Crucible/frontend/src/components/sections/codex/creators/creatorshowcase/EvolutionSimulatorConceptShowcase.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport Background from '../../../../core/Background';\nimport ScrollingTextAnimation from '../../../../core/effects/ScrollingTextAnimation';\nimport { createUseStyles } from 'react-jss';\n\n// Custom styling hooks\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = createUseStyles({\n  evolutionSimulator: {\n    position: 'relative',\n    width: '100%',\n    height: '100vh',\n    overflow: 'hidden',\n    color: '#e0e0e0',\n    fontFamily: '\"Garamond\", \"Adobe Caslon Pro\", serif',\n    display: 'flex',\n    flexDirection: 'column',\n    padding: 0\n  },\n  // Header overlay\n  header: {\n    textAlign: 'center',\n    padding: '1.5rem 2rem 0.5rem',\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    zIndex: 30,\n    background: 'linear-gradient(to bottom, rgba(0,0,0,0.5) 0%, rgba(0,0,0,0) 100%)'\n  },\n  title: {\n    color: '#bfad7f',\n    fontSize: '2.5rem',\n    fontWeight: 300,\n    letterSpacing: '0.1em',\n    margin: '0 0 0.25rem',\n    textShadow: '0 2px 15px rgba(0, 0, 0, 0.7)'\n  },\n  subtitle: {\n    color: 'rgba(224, 224, 224, 0.8)',\n    fontSize: '1rem',\n    maxWidth: '700px',\n    margin: '0 auto',\n    fontWeight: 300,\n    lineHeight: 1.5,\n    fontStyle: 'italic',\n    textShadow: '0 1px 10px rgba(0, 0, 0, 0.9)',\n    padding: '0 1rem'\n  },\n  // Main visualization area\n  networkContainer: {\n    position: 'relative',\n    flex: 1,\n    display: 'flex',\n    zIndex: 10\n  },\n  // Left panel containing the visualization\n  visualizationPanel: {\n    flex: '1 1 70%',\n    position: 'relative',\n    overflow: 'hidden'\n  },\n  // Canvas for the network visualization\n  evolutionCanvas: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%'\n  },\n  // Right panel for controls and information\n  controlPanel: {\n    flex: '0 0 30%',\n    maxWidth: '450px',\n    padding: '2rem',\n    background: 'rgba(10, 10, 15, 0.6)',\n    backdropFilter: 'blur(10px)',\n    borderLeft: '1px solid rgba(191, 173, 127, 0.2)',\n    display: 'flex',\n    flexDirection: 'column',\n    overflowY: 'auto',\n    position: 'relative',\n    zIndex: 20\n  },\n  // Top navigation for body shapes\n  bodyShapeNav: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: '1rem 2rem',\n    gap: '1rem',\n    position: 'absolute',\n    top: '5rem',\n    left: '50%',\n    transform: 'translateX(-50%)',\n    zIndex: 40,\n    background: 'rgba(10, 10, 15, 0.75)',\n    backdropFilter: 'blur(10px)',\n    borderRadius: '8px',\n    boxShadow: '0 5px 20px rgba(0, 0, 0, 0.4)',\n    border: '1px solid rgba(191, 173, 127, 0.2)'\n  },\n  bodyShapeButton: {\n    background: 'none',\n    border: 'none',\n    color: 'rgba(224, 224, 224, 0.7)',\n    padding: '0.5rem 1rem',\n    font: 'inherit',\n    fontSize: '0.95rem',\n    cursor: 'pointer',\n    position: 'relative',\n    transition: 'color 0.3s ease',\n    '&:hover': {\n      color: '#bfad7f'\n    },\n    '&::after': {\n      content: '\"\"',\n      position: 'absolute',\n      bottom: '-4px',\n      left: '50%',\n      width: '0%',\n      height: '1px',\n      background: '#bfad7f',\n      transform: 'translateX(-50%)',\n      transition: 'width 0.3s ease'\n    },\n    '&:hover::after': {\n      width: '70%'\n    }\n  },\n  activeShapeButton: {\n    color: '#bfad7f',\n    '&::after': {\n      width: '70%'\n    }\n  },\n  // Filter controls\n  filterControls: {\n    display: 'flex',\n    gap: '0.5rem',\n    marginBottom: '2rem'\n  },\n  filterButton: {\n    background: 'rgba(25, 25, 35, 0.6)',\n    border: '1px solid rgba(191, 173, 127, 0.3)',\n    color: '#e0e0e0',\n    padding: '0.5rem 1rem',\n    borderRadius: '4px',\n    fontFamily: 'inherit',\n    fontSize: '0.9rem',\n    cursor: 'pointer',\n    transition: 'all 0.2s ease',\n    '&:hover': {\n      background: 'rgba(191, 173, 127, 0.2)',\n      borderColor: 'rgba(191, 173, 127, 0.6)'\n    }\n  },\n  activeFilter: {\n    background: 'rgba(191, 173, 127, 0.3)',\n    borderColor: 'rgba(191, 173, 127, 0.8)',\n    boxShadow: '0 0 10px rgba(191, 173, 127, 0.2)'\n  },\n  // Section styling\n  sectionTitle: {\n    color: '#bfad7f',\n    fontSize: '1.1rem',\n    fontWeight: 'normal',\n    borderBottom: '1px solid rgba(191, 173, 127, 0.3)',\n    paddingBottom: '0.5rem',\n    marginBottom: '1rem',\n    marginTop: '2rem'\n  },\n  // Environment controls\n  environmentControls: {\n    display: 'flex',\n    flexDirection: 'column',\n    gap: '1rem'\n  },\n  sliderContainer: {\n    width: '100%'\n  },\n  sliderLabel: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    marginBottom: '0.25rem',\n    fontSize: '0.85rem'\n  },\n  sliderValue: {\n    fontWeight: 'bold'\n  },\n  positive: {\n    color: '#5C9D8B'\n  },\n  negative: {\n    color: '#B54B4B'\n  },\n  slider: {\n    width: '100%',\n    height: '4px',\n    WebkitAppearance: 'none',\n    background: 'linear-gradient(to right, #3D1C22 0%, #3D1C22 50%, #1C3D32 50%, #1C3D32 100%)',\n    borderRadius: '2px',\n    outline: 'none',\n    position: 'relative',\n    '&::-webkit-slider-thumb': {\n      WebkitAppearance: 'none',\n      width: '12px',\n      height: '12px',\n      borderRadius: '3px',\n      transform: 'rotate(45deg)',\n      backgroundColor: '#bfad7f',\n      cursor: 'pointer'\n    }\n  },\n  // Results panel\n  resultsPanel: {\n    marginTop: '1rem',\n    background: 'rgba(20, 20, 25, 0.5)',\n    padding: '1rem',\n    borderRadius: '6px',\n    border: '1px solid rgba(191, 173, 127, 0.1)'\n  },\n  resultItem: {\n    display: 'flex',\n    flexDirection: 'column',\n    marginBottom: '0.75rem'\n  },\n  resultLabel: {\n    fontSize: '0.85rem',\n    marginBottom: '0.25rem'\n  },\n  progressBar: {\n    width: '100%',\n    height: '8px',\n    backgroundColor: 'rgba(30, 30, 30, 0.8)',\n    borderRadius: '4px',\n    overflow: 'hidden',\n    position: 'relative'\n  },\n  progressFill: {\n    height: '100%',\n    transition: 'width 0.5s ease, background-color 0.5s ease'\n  },\n  resultValue: {\n    position: 'absolute',\n    top: '50%',\n    right: '5px',\n    transform: 'translateY(-50%)',\n    fontSize: '0.7rem',\n    fontWeight: 'bold',\n    color: '#fff',\n    textShadow: '0 0 3px rgba(0, 0, 0, 0.8)'\n  },\n  // Trait details panel\n  traitPanel: {\n    marginTop: '1.5rem',\n    background: 'rgba(15, 15, 15, 0.7)',\n    border: '1px solid rgba(191, 173, 127, 0.2)',\n    borderRadius: '6px',\n    overflow: 'hidden'\n  },\n  traitHeader: {\n    padding: '1rem',\n    color: '#000',\n    fontWeight: 'normal'\n  },\n  traitName: {\n    margin: '0 0 0.25rem 0',\n    fontSize: '1.2rem'\n  },\n  traitCategory: {\n    fontSize: '0.85rem',\n    opacity: 0.7\n  },\n  traitContent: {\n    padding: '1rem'\n  },\n  traitDescription: {\n    fontSize: '0.95rem',\n    lineHeight: 1.6,\n    marginBottom: '1rem',\n    color: 'rgba(224, 224, 224, 0.9)'\n  },\n  traitStat: {\n    display: 'flex',\n    alignItems: 'center',\n    gap: '0.5rem',\n    marginBottom: '0.5rem'\n  },\n  traitStatLabel: {\n    fontSize: '0.85rem',\n    color: 'rgba(224, 224, 224, 0.7)',\n    flex: '0 0 40%'\n  },\n  traitStatValue: {\n    fontSize: '0.85rem',\n    fontWeight: 'bold'\n  },\n  // Category legend\n  legend: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    gap: '1rem',\n    marginTop: '1rem'\n  },\n  legendItem: {\n    display: 'flex',\n    alignItems: 'center',\n    gap: '0.5rem',\n    fontSize: '0.8rem'\n  },\n  legendColor: {\n    width: '12px',\n    height: '12px',\n    borderRadius: '50%',\n    border: '1px solid rgba(255, 255, 255, 0.2)'\n  },\n  // Body shape details\n  bodyShapeDetails: {\n    background: 'rgba(15, 15, 15, 0.7)',\n    border: '1px solid rgba(191, 173, 127, 0.2)',\n    borderRadius: '6px',\n    padding: '1rem',\n    marginTop: '1.5rem'\n  },\n  bodyShapeIcon: {\n    width: '40px',\n    height: '40px',\n    borderRadius: '50%',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    fontSize: '1.5rem',\n    margin: '0 auto 0.5rem'\n  },\n  bodyShapeName: {\n    textAlign: 'center',\n    fontSize: '1.2rem',\n    color: '#bfad7f',\n    margin: '0 0 0.5rem'\n  },\n  bodyShapeElement: {\n    textAlign: 'center',\n    fontSize: '0.9rem',\n    color: 'rgba(224, 224, 224, 0.6)',\n    marginBottom: '1rem'\n  },\n  bodyShapeDescription: {\n    fontSize: '0.95rem',\n    lineHeight: 1.6,\n    color: 'rgba(224, 224, 224, 0.8)'\n  },\n  // Loading and info overlays\n  loadingOverlay: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n    background: 'rgba(0, 0, 0, 0.8)',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    zIndex: 100,\n    color: '#bfad7f'\n  },\n  loadingIcon: {\n    fontSize: '2rem',\n    marginBottom: '1rem',\n    animation: '$spin 2s linear infinite'\n  },\n  '@keyframes spin': {\n    '0%': {\n      transform: 'rotate(0deg)'\n    },\n    '100%': {\n      transform: 'rotate(360deg)'\n    }\n  },\n  // Accessibility\n  skipLink: {\n    position: 'absolute',\n    top: '-40px',\n    left: 0,\n    backgroundColor: '#bfad7f',\n    color: '#000',\n    padding: '0.5rem',\n    zIndex: 1000,\n    transition: 'top 0.3s ease',\n    '&:focus': {\n      top: 0\n    }\n  },\n  // Responsive adjustments\n  '@media (max-width: 1200px)': {\n    controlPanel: {\n      flex: '0 0 35%'\n    }\n  },\n  '@media (max-width: 992px)': {\n    networkContainer: {\n      flexDirection: 'column'\n    },\n    visualizationPanel: {\n      minHeight: '60vh'\n    },\n    controlPanel: {\n      maxWidth: 'none',\n      flex: 'none',\n      borderLeft: 'none',\n      borderTop: '1px solid rgba(191, 173, 127, 0.2)'\n    }\n  },\n  '@media (max-width: 768px)': {\n    bodyShapeNav: {\n      padding: '0.75rem',\n      flexWrap: 'wrap'\n    },\n    bodyShapeButton: {\n      fontSize: '0.85rem',\n      padding: '0.3rem 0.5rem'\n    }\n  }\n});\nconst EvolutionSimulator = () => {\n  _s();\n  var _traitCategories$find, _traitCategories$find2;\n  const classes = useStyles();\n\n  // State management\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [cursorPosition, setCursorPosition] = useState({\n    x: 0,\n    y: 0\n  });\n  const [selectedBodyShape, setSelectedBodyShape] = useState('quadrupedal');\n  const [selectedTrait, setSelectedTrait] = useState(null);\n  const [filterMode, setFilterMode] = useState('all');\n  const [isSimulating, setIsSimulating] = useState(false);\n\n  // Environment state - default balanced values\n  const [environment, setEnvironment] = useState({\n    temperature: 0.2,\n    light_conditions: 0.3,\n    terrain_harshness: 0.4,\n    resource_scarcity: 0.2,\n    ether_density: 0.3,\n    pressure_gravity: 0.4\n  });\n\n  // Analysis results\n  const [evolutionResults, setEvolutionResults] = useState({\n    totalStress: 0.42,\n    adaptationProbability: 0.38\n  });\n\n  // Canvas and animation refs\n  const canvasRef = useRef(null);\n  const visualizationRef = useRef(null);\n  const animationFrameId = useRef(null);\n\n  // Body shape data with consistent colors and clear icons\n  const bodyShapes = [{\n    id: 'bipedal',\n    name: 'Bipedal',\n    element: 'Air',\n    color: '#7D6B9E',\n    icon: '⚡',\n    description: 'Upright forms with manipulative upper limbs, optimized for tool use and aerial adaptability.'\n  }, {\n    id: 'quadrupedal',\n    name: 'Quadrupedal',\n    element: 'Earth',\n    color: '#A67C52',\n    icon: '⛰️',\n    description: 'Four-limbed forms offering excellent stability across varied terrain with balanced strength and mobility.'\n  }, {\n    id: 'serpentine',\n    name: 'Serpentine',\n    element: 'Void',\n    color: '#5C9D8B',\n    icon: '∫',\n    description: 'Elongated, limbless forms specialized for flexibility, stealth, and confined space navigation.'\n  }, {\n    id: 'avian',\n    name: 'Avian',\n    element: 'Sky',\n    color: '#7D6B9E',\n    icon: '⩜',\n    description: 'Forms optimized for flight and aerial movement with hollow bones and efficient respiratory systems.'\n  }, {\n    id: 'aquatic',\n    name: 'Aquatic',\n    element: 'Water',\n    color: '#5C9D8B',\n    icon: '≈',\n    description: 'Forms specialized for water environments with streamlined bodies and specialized breathing apparatus.'\n  }];\n\n  // Trait categories with consistent colors\n  const traitCategories = [{\n    id: 'locomotion',\n    name: 'Locomotion',\n    color: '#7D6B9E'\n  }, {\n    id: 'metabolism',\n    name: 'Metabolism',\n    color: '#5C9D8B'\n  }, {\n    id: 'sensory',\n    name: 'Sensory Acuity',\n    color: '#C99846'\n  }, {\n    id: 'etheric',\n    name: 'Etheric Adaptation',\n    color: '#B54B4B'\n  }, {\n    id: 'thermal',\n    name: 'Thermal Regulation',\n    color: '#A67C52'\n  }];\n\n  // Sample trait for demonstration\n  const sampleTrait = {\n    id: 'enhanced_muscle',\n    name: 'Enhanced Musculature',\n    tier: 2,\n    category: 'locomotion',\n    affinities: {\n      terrain_harshness: 0.8,\n      pressure_gravity: 0.7,\n      resource_scarcity: -0.4,\n      temperature: 0.1,\n      light_conditions: 0,\n      ether_density: 0\n    },\n    description: 'Highly developed muscle structures with exceptional strength and endurance, allowing for superior force generation with minimal energy expenditure.',\n    connections: ['running', 'climbing', 'carnivore', 'acute_vision', 'thick_blubber'],\n    compatible: ['bipedal', 'quadrupedal', 'insectoid'],\n    synthesis: {\n      condition: 'apex_physical',\n      result: {\n        name: 'Force Multiplication Tissues',\n        description: 'Muscles that multiply applied force through micro-dimensional folding.'\n      }\n    }\n  };\n\n  // Handle mouse movement for background effect\n  const handleMouseMove = e => {\n    setCursorPosition({\n      x: e.clientX,\n      y: e.clientY\n    });\n  };\n\n  // Handle body shape selection\n  const handleBodyShapeSelect = shapeId => {\n    setSelectedBodyShape(shapeId);\n    setSelectedTrait(null);\n  };\n\n  // Handle filter mode change\n  const handleFilterChange = mode => {\n    setFilterMode(mode);\n  };\n\n  // Handle trait selection\n  const handleTraitSelect = traitData => {\n    setSelectedTrait(traitData);\n  };\n\n  // Update environment parameter\n  const handleEnvironmentChange = (parameter, value) => {\n    setEnvironment(prev => {\n      const newEnvironment = {\n        ...prev,\n        [parameter]: value\n      };\n\n      // In a real implementation, we would recalculate results here\n      // For demo, just update with slightly different values\n      setEvolutionResults({\n        totalStress: 0.3 + Math.random() * 0.3,\n        adaptationProbability: 0.2 + Math.random() * 0.5\n      });\n      return newEnvironment;\n    });\n  };\n\n  // Handle simulation button click\n  const handleSimulate = () => {\n    setIsSimulating(true);\n\n    // Simulate processing time\n    setTimeout(() => {\n      setEvolutionResults({\n        totalStress: 0.3 + Math.random() * 0.4,\n        adaptationProbability: 0.2 + Math.random() * 0.6\n      });\n      setIsSimulating(false);\n    }, 1500);\n  };\n\n  // Initialize canvas and start animation when component mounts\n  useEffect(() => {\n    if (!canvasRef.current) return;\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n\n    // Set canvas size\n    const updateCanvasSize = () => {\n      if (visualizationRef.current) {\n        const {\n          width,\n          height\n        } = visualizationRef.current.getBoundingClientRect();\n        canvas.width = width;\n        canvas.height = height;\n      }\n    };\n    updateCanvasSize();\n    window.addEventListener('resize', updateCanvasSize);\n\n    // Animation function for the network visualization\n    const render = () => {\n      if (!context) return;\n\n      // Clear canvas\n      context.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Get center coordinates\n      const centerX = canvas.width / 2;\n      const centerY = canvas.height / 2;\n\n      // Draw background gradient\n      const gradient = context.createRadialGradient(centerX, centerY, 50, centerX, centerY, Math.max(canvas.width, canvas.height) / 2);\n\n      // Get selected body shape color for background tint\n      const selectedShape = bodyShapes.find(shape => shape.id === selectedBodyShape);\n      const shapeColor = selectedShape ? selectedShape.color : '#191919';\n\n      // Convert hex to rgb for gradient\n      const hexToRgb = hex => {\n        const r = parseInt(hex.slice(1, 3), 16);\n        const g = parseInt(hex.slice(3, 5), 16);\n        const b = parseInt(hex.slice(5, 7), 16);\n        return {\n          r,\n          g,\n          b\n        };\n      };\n      const {\n        r,\n        g,\n        b\n      } = hexToRgb(shapeColor);\n      gradient.addColorStop(0, `rgba(${r * 0.25}, ${g * 0.25}, ${b * 0.25}, 0.8)`);\n      gradient.addColorStop(1, 'rgba(10, 10, 15, 0.9)');\n      context.fillStyle = gradient;\n      context.fillRect(0, 0, canvas.width, canvas.height);\n\n      // Draw central body shape\n      drawCentralNode(context, centerX, centerY, selectedShape);\n\n      // Draw trait network - simplified version that won't actually jerk around\n      drawTraitNetwork(context, centerX, centerY, selectedShape, filterMode);\n\n      // Continue animation loop\n      animationFrameId.current = requestAnimationFrame(render);\n    };\n\n    // Function to draw the central body shape node\n    const drawCentralNode = (ctx, x, y, bodyShape) => {\n      const nodeRadius = 80;\n\n      // Draw outer rings\n      for (let i = 0; i < 3; i++) {\n        ctx.beginPath();\n        ctx.arc(x, y, nodeRadius + 15 + i * 6, 0, Math.PI * 2);\n        ctx.strokeStyle = `rgba(191, 173, 127, ${0.15 - i * 0.04})`;\n        ctx.lineWidth = 1;\n        ctx.stroke();\n      }\n\n      // Draw glow effect\n      const glowGradient = ctx.createRadialGradient(x, y, nodeRadius * 0.7, x, y, nodeRadius * 1.5);\n      glowGradient.addColorStop(0, `rgba(${r}, ${g}, ${b}, 0.3)`);\n      glowGradient.addColorStop(1, 'rgba(0, 0, 0, 0)');\n      ctx.beginPath();\n      ctx.arc(x, y, nodeRadius * 1.5, 0, Math.PI * 2);\n      ctx.fillStyle = glowGradient;\n      ctx.fill();\n\n      // Draw main body shape circle\n      ctx.beginPath();\n      ctx.arc(x, y, nodeRadius, 0, Math.PI * 2);\n      const mainGradient = ctx.createRadialGradient(x - nodeRadius * 0.3, y - nodeRadius * 0.3, 0, x, y, nodeRadius);\n      mainGradient.addColorStop(0, bodyShape.color);\n      mainGradient.addColorStop(1, `rgba(${r * 0.7}, ${g * 0.7}, ${b * 0.7}, 1)`);\n      ctx.fillStyle = mainGradient;\n      ctx.fill();\n\n      // Draw border\n      ctx.beginPath();\n      ctx.arc(x, y, nodeRadius, 0, Math.PI * 2);\n      ctx.strokeStyle = 'rgba(191, 173, 127, 0.5)';\n      ctx.lineWidth = 2;\n      ctx.stroke();\n\n      // Draw icon and text\n      ctx.fillStyle = '#000';\n      ctx.font = 'bold 30px serif';\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(bodyShape.icon, x, y - 15);\n      ctx.font = 'bold 16px sans-serif';\n      ctx.fillText(bodyShape.name, x, y + 15);\n      ctx.font = '14px sans-serif';\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\n      ctx.fillText(bodyShape.element, x, y + 35);\n    };\n\n    // Function to draw the trait network\n    const drawTraitNetwork = (ctx, centerX, centerY, bodyShape, filterMode) => {\n      // We'll simulate traits with stable positions\n      const traitTiers = [1, 2, 3];\n      const traitAngles = {};\n\n      // Generate stable positions for traits within their categories\n      traitCategories.forEach((category, categoryIndex) => {\n        const categoryAngle = categoryIndex / traitCategories.length * Math.PI * 2;\n        const categoryArcWidth = Math.PI * 2 / traitCategories.length;\n\n        // Draw category sector\n        ctx.beginPath();\n        ctx.moveTo(centerX, centerY);\n        ctx.arc(centerX, centerY, 500, categoryAngle - categoryArcWidth / 2, categoryAngle + categoryArcWidth / 2);\n        ctx.lineTo(centerX, centerY);\n        ctx.fillStyle = `rgba(${parseInt(category.color.slice(1, 3), 16)}, \n                             ${parseInt(category.color.slice(3, 5), 16)}, \n                             ${parseInt(category.color.slice(5, 7), 16)}, 0.05)`;\n        ctx.fill();\n\n        // Draw category label at outer edge\n        const labelRadius = 500 * 1.08;\n        const labelX = centerX + Math.cos(categoryAngle) * labelRadius;\n        const labelY = centerY + Math.sin(categoryAngle) * labelRadius;\n        ctx.save();\n        ctx.translate(labelX, labelY);\n        ctx.rotate(categoryAngle + Math.PI / 2);\n        ctx.fillStyle = category.color;\n        ctx.font = 'bold 14px serif';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText(category.name.toUpperCase(), 0, 0);\n        ctx.restore();\n\n        // Simulate traits in this category\n        const traitCount = 2 + Math.floor(Math.random() * 3); // 2-4 traits per category\n\n        for (let i = 0; i < traitCount; i++) {\n          const tier = Math.min(3, 1 + Math.floor(i / 2)); // Distribute across tiers\n          const tierRadius = 150 + (tier - 1) * 100; // Increasing radius with tier\n\n          // Calculate position within category sector\n          const traitPosition = (i + 0.5) / traitCount;\n          const traitAngle = categoryAngle - categoryArcWidth * 0.4 + categoryArcWidth * 0.8 * traitPosition;\n\n          // Add slight randomness to radius for more natural look\n          const radiusVariation = tierRadius * 0.06 * (Math.sin(categoryIndex * 5 + i * 3) + 0.5);\n          const finalRadius = tierRadius + radiusVariation;\n          const x = centerX + Math.cos(traitAngle) * finalRadius;\n          const y = centerY + Math.sin(traitAngle) * finalRadius;\n\n          // Store the angle for connection drawing\n          const traitId = `trait_${categoryIndex}_${i}`;\n          traitAngles[traitId] = {\n            angle: traitAngle,\n            tier,\n            category: category.id\n          };\n\n          // Draw trait node\n          drawTraitNode(ctx, x, y, tier, category, traitId === 'trait_0_0');\n\n          // Draw connections to center for first tier\n          if (tier === 1) {\n            drawConnection(ctx, x, y, centerX, centerY, category.color, false);\n          }\n\n          // Draw connections between tiers\n          if (tier > 1) {\n            // Find a node in the previous tier to connect to\n            const parentTier = tier - 1;\n            const possibleParents = Object.entries(traitAngles).filter(([id, data]) => data.tier === parentTier && data.category === category.id && Math.abs(data.angle - traitAngle) < categoryArcWidth * 0.8);\n            if (possibleParents.length > 0) {\n              // Select the closest parent by angle\n              const parentId = possibleParents.reduce((closest, current) => {\n                const [currentId, currentData] = current;\n                const [closestId, closestData] = closest;\n                return Math.abs(currentData.angle - traitAngle) < Math.abs(closestData.angle - traitAngle) ? current : closest;\n              });\n              const parentAngle = parentId[1].angle;\n              const parentRadius = 150 + (parentId[1].tier - 1) * 100;\n              const parentX = centerX + Math.cos(parentAngle) * parentRadius;\n              const parentY = centerY + Math.sin(parentAngle) * parentRadius;\n\n              // Draw evolutionary connection\n              drawConnection(ctx, x, y, parentX, parentY, category.color, true);\n            }\n          }\n\n          // Draw cross-category connections for some traits\n          if (Math.random() > 0.7) {\n            // Find a node in another category\n            const otherCategories = Object.entries(traitAngles).filter(([id, data]) => data.category !== category.id && Math.abs(data.angle - traitAngle) > Math.PI * 0.25);\n            if (otherCategories.length > 0) {\n              const randomIndex = Math.floor(Math.random() * otherCategories.length);\n              const [targetId, targetData] = otherCategories[randomIndex];\n              const targetAngle = targetData.angle;\n              const targetRadius = 150 + (targetData.tier - 1) * 100;\n              const targetX = centerX + Math.cos(targetAngle) * targetRadius;\n              const targetY = centerY + Math.sin(targetAngle) * targetRadius;\n\n              // Get target category color\n              const targetCategory = traitCategories.find(c => c.id === targetData.category);\n\n              // Create gradient between categories\n              const gradient = ctx.createLinearGradient(x, y, targetX, targetY);\n              gradient.addColorStop(0, category.color);\n              gradient.addColorStop(1, targetCategory.color);\n\n              // Draw connection\n              drawConnection(ctx, x, y, targetX, targetY, gradient, false);\n            }\n          }\n        }\n      });\n    };\n\n    // Function to draw a trait node\n    const drawTraitNode = (ctx, x, y, tier, category, isHighlighted) => {\n      const nodeSize = 14 + (tier - 1) * 3;\n      const highlightBonus = isHighlighted ? 4 : 0;\n\n      // Draw glow for highlighted nodes\n      if (isHighlighted) {\n        ctx.beginPath();\n        ctx.arc(x, y, nodeSize + 10, 0, Math.PI * 2);\n        const glowGradient = ctx.createRadialGradient(x, y, nodeSize, x, y, nodeSize + 10);\n        glowGradient.addColorStop(0, `rgba(${parseInt(category.color.slice(1, 3), 16)}, \n                                         ${parseInt(category.color.slice(3, 5), 16)}, \n                                         ${parseInt(category.color.slice(5, 7), 16)}, 0.6)`);\n        glowGradient.addColorStop(1, 'rgba(0, 0, 0, 0)');\n        ctx.fillStyle = glowGradient;\n        ctx.fill();\n      }\n\n      // Draw main node\n      ctx.beginPath();\n      ctx.arc(x, y, nodeSize + highlightBonus, 0, Math.PI * 2);\n      const gradient = ctx.createRadialGradient(x - (nodeSize + highlightBonus) * 0.3, y - (nodeSize + highlightBonus) * 0.3, 0, x, y, nodeSize + highlightBonus);\n      gradient.addColorStop(0, category.color);\n      gradient.addColorStop(1, adjustColorBrightness(category.color, -30));\n      ctx.fillStyle = gradient;\n      ctx.fill();\n\n      // Draw border\n      ctx.beginPath();\n      ctx.arc(x, y, nodeSize + highlightBonus, 0, Math.PI * 2);\n      ctx.strokeStyle = isHighlighted ? '#FFFFFF' : adjustColorBrightness(category.color, 20);\n      ctx.lineWidth = isHighlighted ? 2 : 1;\n      ctx.stroke();\n\n      // Draw tier indicator in center for higher tiers\n      if (tier > 1) {\n        ctx.beginPath();\n        ctx.arc(x, y, (nodeSize + highlightBonus) * 0.4, 0, Math.PI * 2);\n        ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n        ctx.fill();\n\n        // Add tier number\n        ctx.fillStyle = category.color;\n        ctx.font = `bold ${(nodeSize + highlightBonus) * 0.5}px serif`;\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText(tier.toString(), x, y);\n      }\n    };\n\n    // Function to draw a connection between nodes\n    const drawConnection = (ctx, x1, y1, x2, y2, colorOrGradient, isEvolutionary) => {\n      // Create curved connection\n      ctx.beginPath();\n\n      // For connections to center, use direct line\n      if (x2 === centerX && y2 === centerY || !isEvolutionary) {\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n      } else {\n        // For evolutionary connections, use curves\n        const midX = (x1 + x2) / 2;\n        const midY = (y1 + y2) / 2;\n\n        // Pull toward center\n        const pullFactor = 0.25;\n        const controlX = midX + (centerX - midX) * pullFactor;\n        const controlY = midY + (centerY - midY) * pullFactor;\n\n        // Draw curve\n        ctx.moveTo(x1, y1);\n        ctx.quadraticCurveTo(controlX, controlY, x2, y2);\n      }\n\n      // Set line style\n      ctx.strokeStyle = colorOrGradient;\n      ctx.lineWidth = isEvolutionary ? 2 : 1;\n      if (isEvolutionary) {\n        ctx.setLineDash([3, 5]);\n      } else {\n        ctx.setLineDash([]);\n      }\n      ctx.globalAlpha = 0.6;\n      ctx.stroke();\n      ctx.globalAlpha = 1;\n      ctx.setLineDash([]);\n    };\n\n    // Helper function to adjust color brightness\n    const adjustColorBrightness = (hex, percent) => {\n      const r = parseInt(hex.slice(1, 3), 16);\n      const g = parseInt(hex.slice(3, 5), 16);\n      const b = parseInt(hex.slice(5, 7), 16);\n      const adjustedR = Math.max(0, Math.min(255, r + percent));\n      const adjustedG = Math.max(0, Math.min(255, g + percent));\n      const adjustedB = Math.max(0, Math.min(255, b + percent));\n      return `rgb(${Math.round(adjustedR)}, ${Math.round(adjustedG)}, ${Math.round(adjustedB)})`;\n    };\n\n    // Start rendering\n    render();\n\n    // Set loaded state after a short delay to simulate loading\n    const timer = setTimeout(() => {\n      setIsLoaded(true);\n    }, 1000);\n\n    // Clean up on unmount\n    return () => {\n      clearTimeout(timer);\n      window.removeEventListener('resize', updateCanvasSize);\n      if (animationFrameId.current) {\n        cancelAnimationFrame(animationFrameId.current);\n      }\n    };\n  }, [selectedBodyShape, filterMode, bodyShapes, traitCategories]);\n\n  // Get selected body shape\n  const getSelectedBodyShape = () => {\n    return bodyShapes.find(shape => shape.id === selectedBodyShape) || bodyShapes[0];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.evolutionSimulator,\n    onMouseMove: handleMouseMove,\n    children: [/*#__PURE__*/_jsxDEV(Background, {\n      cursorPosition: cursorPosition,\n      setCursorPosition: setCursorPosition\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1016,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n      className: classes.header,\n      children: /*#__PURE__*/_jsxDEV(ScrollingTextAnimation, {\n        scrollConfig: {\n          startPosition: 0,\n          endPosition: 300,\n          initialY: -30,\n          finalY: 0,\n          clampValues: true\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: classes.title,\n          children: \"Crescent Evolution System\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1029,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: classes.subtitle,\n          children: \"Explore the interconnected trait networks that drive evolution through Bayesian natural selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1030,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1020,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1019,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.bodyShapeNav,\n      children: bodyShapes.map(shape => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `${classes.bodyShapeButton} ${selectedBodyShape === shape.id ? classes.activeShapeButton : ''}`,\n        onClick: () => handleBodyShapeSelect(shape.id),\n        children: shape.name\n      }, shape.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1039,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1037,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.networkContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        ref: visualizationRef,\n        className: classes.visualizationPanel,\n        children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: canvasRef,\n          className: classes.evolutionCanvas\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1056,\n          columnNumber: 11\n        }, this), !isLoaded && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.loadingOverlay,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.loadingIcon,\n            children: \"\\u27F3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1064,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Initializing evolution matrix...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1065,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1063,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1052,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.controlPanel,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.filterControls,\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: `${classes.filterButton} ${filterMode === 'all' ? classes.activeFilter : ''}`,\n            onClick: () => handleFilterChange('all'),\n            children: \"All Traits\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1074,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `${classes.filterButton} ${filterMode === 'relevance' ? classes.activeFilter : ''}`,\n            onClick: () => handleFilterChange('relevance'),\n            children: \"By Relevance\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1080,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `${classes.filterButton} ${filterMode === 'category' ? classes.activeFilter : ''}`,\n            onClick: () => handleFilterChange('category'),\n            children: \"By Category\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1086,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1073,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.legend,\n          children: traitCategories.map(category => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.legendItem,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.legendColor,\n              style: {\n                backgroundColor: category.color\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1098,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: category.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1102,\n              columnNumber: 17\n            }, this)]\n          }, category.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1097,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1095,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.bodyShapeDetails,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.bodyShapeIcon,\n            style: {\n              backgroundColor: getSelectedBodyShape().color\n            },\n            children: getSelectedBodyShape().icon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1109,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: classes.bodyShapeName,\n            children: getSelectedBodyShape().name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1115,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.bodyShapeElement,\n            children: getSelectedBodyShape().element\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1116,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: classes.bodyShapeDescription,\n            children: getSelectedBodyShape().description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1117,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: classes.sectionTitle,\n          children: \"Environmental Stressors\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1123,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.environmentControls,\n          children: [Object.entries(environment).map(([param, value]) => {\n            const paramName = param.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.sliderContainer,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: classes.sliderLabel,\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  children: paramName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1133,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: `\n                      ${classes.sliderValue} \n                      ${value > 0.6 ? classes.positive : value < 0.3 ? classes.negative : ''}\n                    `,\n                  children: value.toFixed(1)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1134,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1132,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"range\",\n                min: -1,\n                max: 1,\n                step: 0.1,\n                value: value,\n                onChange: e => handleEnvironmentChange(param, parseFloat(e.target.value)),\n                className: classes.slider\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1141,\n                columnNumber: 19\n              }, this)]\n            }, param, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1131,\n              columnNumber: 17\n            }, this);\n          }), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: classes.filterButton,\n            onClick: handleSimulate,\n            disabled: isSimulating,\n            children: isSimulating ? 'Processing...' : 'Recalculate Evolution'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1154,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1124,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.resultsPanel,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.resultItem,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.resultLabel,\n              children: \"Total Effective Stress:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1166,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.progressBar,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: classes.progressFill,\n                style: {\n                  width: `${evolutionResults.totalStress * 100}%`,\n                  backgroundColor: evolutionResults.totalStress > 0.7 ? '#B54B4B' : evolutionResults.totalStress > 0.4 ? '#C99846' : '#5C9D8B'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1168,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: classes.resultValue,\n                children: evolutionResults.totalStress.toFixed(2)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1178,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1167,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1165,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.resultItem,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.resultLabel,\n              children: \"Adaptation Probability:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1185,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.progressBar,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: classes.progressFill,\n                style: {\n                  width: `${evolutionResults.adaptationProbability * 100}%`,\n                  backgroundColor: evolutionResults.adaptationProbability > 0.7 ? '#5C9D8B' : evolutionResults.adaptationProbability > 0.4 ? '#C99846' : '#B54B4B'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1187,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: classes.resultValue,\n                children: evolutionResults.adaptationProbability.toFixed(2)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1197,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1186,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1184,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1164,\n          columnNumber: 11\n        }, this), selectedTrait ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.traitPanel,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.traitHeader,\n            style: {\n              backgroundColor: (_traitCategories$find = traitCategories.find(c => c.id === selectedTrait.category)) === null || _traitCategories$find === void 0 ? void 0 : _traitCategories$find.color\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: classes.traitName,\n              children: selectedTrait.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1211,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.traitCategory,\n              children: [(_traitCategories$find2 = traitCategories.find(c => c.id === selectedTrait.category)) === null || _traitCategories$find2 === void 0 ? void 0 : _traitCategories$find2.name, \" \\u2022 Tier \", selectedTrait.tier]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1212,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1207,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.traitContent,\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: classes.traitDescription,\n              children: selectedTrait.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1218,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Environmental Affinities\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1222,\n              columnNumber: 17\n            }, this), Object.entries(selectedTrait.affinities).map(([factor, value]) => value !== 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.traitStat,\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: classes.traitStatLabel,\n                children: [factor.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' '), \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1226,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: `\n                        ${classes.traitStatValue}\n                        ${value > 0 ? classes.positive : classes.negative}\n                      `,\n                children: [value > 0 ? '+' : '', value.toFixed(1)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1229,\n                columnNumber: 23\n              }, this)]\n            }, factor, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1225,\n              columnNumber: 21\n            }, this)), selectedTrait.synthesis && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: \"Synthesis Potential\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1242,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: classes.traitDescription,\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: [selectedTrait.synthesis.result.name, \":\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1244,\n                  columnNumber: 23\n                }, this), \" \", selectedTrait.synthesis.result.description]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1243,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: classes.traitStat,\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: classes.traitStatLabel,\n                  children: \"Trigger Condition:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1247,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: classes.traitStatValue,\n                  children: selectedTrait.synthesis.condition.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1248,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1246,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1217,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1206,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.traitPanel,\n          style: {\n            textAlign: 'center',\n            padding: '1rem'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Select a trait node to view details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1260,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1259,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1071,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1050,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"#content\",\n      className: classes.skipLink,\n      children: \"Skip to main content\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1267,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1011,\n    columnNumber: 5\n  }, this);\n};\n_s(EvolutionSimulator, \"eg4Y51PduD80AlIvrll0Cz9n73s=\", false, function () {\n  return [useStyles];\n});\n_c = EvolutionSimulator;\nexport default EvolutionSimulator;\nvar _c;\n$RefreshReg$(_c, \"EvolutionSimulator\");","map":{"version":3,"names":["React","useState","useEffect","useRef","motion","AnimatePresence","Background","ScrollingTextAnimation","createUseStyles","jsxDEV","_jsxDEV","Fragment","_Fragment","useStyles","evolutionSimulator","position","width","height","overflow","color","fontFamily","display","flexDirection","padding","header","textAlign","top","left","right","zIndex","background","title","fontSize","fontWeight","letterSpacing","margin","textShadow","subtitle","maxWidth","lineHeight","fontStyle","networkContainer","flex","visualizationPanel","evolutionCanvas","controlPanel","backdropFilter","borderLeft","overflowY","bodyShapeNav","justifyContent","alignItems","gap","transform","borderRadius","boxShadow","border","bodyShapeButton","font","cursor","transition","content","bottom","activeShapeButton","filterControls","marginBottom","filterButton","borderColor","activeFilter","sectionTitle","borderBottom","paddingBottom","marginTop","environmentControls","sliderContainer","sliderLabel","sliderValue","positive","negative","slider","WebkitAppearance","outline","backgroundColor","resultsPanel","resultItem","resultLabel","progressBar","progressFill","resultValue","traitPanel","traitHeader","traitName","traitCategory","opacity","traitContent","traitDescription","traitStat","traitStatLabel","traitStatValue","legend","flexWrap","legendItem","legendColor","bodyShapeDetails","bodyShapeIcon","bodyShapeName","bodyShapeElement","bodyShapeDescription","loadingOverlay","loadingIcon","animation","skipLink","minHeight","borderTop","EvolutionSimulator","_s","_traitCategories$find","_traitCategories$find2","classes","isLoaded","setIsLoaded","cursorPosition","setCursorPosition","x","y","selectedBodyShape","setSelectedBodyShape","selectedTrait","setSelectedTrait","filterMode","setFilterMode","isSimulating","setIsSimulating","environment","setEnvironment","temperature","light_conditions","terrain_harshness","resource_scarcity","ether_density","pressure_gravity","evolutionResults","setEvolutionResults","totalStress","adaptationProbability","canvasRef","visualizationRef","animationFrameId","bodyShapes","id","name","element","icon","description","traitCategories","sampleTrait","tier","category","affinities","connections","compatible","synthesis","condition","result","handleMouseMove","e","clientX","clientY","handleBodyShapeSelect","shapeId","handleFilterChange","mode","handleTraitSelect","traitData","handleEnvironmentChange","parameter","value","prev","newEnvironment","Math","random","handleSimulate","setTimeout","current","canvas","context","getContext","updateCanvasSize","getBoundingClientRect","window","addEventListener","render","clearRect","centerX","centerY","gradient","createRadialGradient","max","selectedShape","find","shape","shapeColor","hexToRgb","hex","r","parseInt","slice","g","b","addColorStop","fillStyle","fillRect","drawCentralNode","drawTraitNetwork","requestAnimationFrame","ctx","bodyShape","nodeRadius","i","beginPath","arc","PI","strokeStyle","lineWidth","stroke","glowGradient","fill","mainGradient","textBaseline","fillText","traitTiers","traitAngles","forEach","categoryIndex","categoryAngle","length","categoryArcWidth","moveTo","lineTo","labelRadius","labelX","cos","labelY","sin","save","translate","rotate","toUpperCase","restore","traitCount","floor","min","tierRadius","traitPosition","traitAngle","radiusVariation","finalRadius","traitId","angle","drawTraitNode","drawConnection","parentTier","possibleParents","Object","entries","filter","data","abs","parentId","reduce","closest","currentId","currentData","closestId","closestData","parentAngle","parentRadius","parentX","parentY","otherCategories","randomIndex","targetId","targetData","targetAngle","targetRadius","targetX","targetY","targetCategory","c","createLinearGradient","isHighlighted","nodeSize","highlightBonus","adjustColorBrightness","toString","x1","y1","x2","y2","colorOrGradient","isEvolutionary","midX","midY","pullFactor","controlX","controlY","quadraticCurveTo","setLineDash","globalAlpha","percent","adjustedR","adjustedG","adjustedB","round","timer","clearTimeout","removeEventListener","cancelAnimationFrame","getSelectedBodyShape","className","onMouseMove","children","fileName","_jsxFileName","lineNumber","columnNumber","scrollConfig","startPosition","endPosition","initialY","finalY","clampValues","map","onClick","ref","style","param","paramName","split","word","charAt","join","toFixed","type","step","onChange","parseFloat","target","disabled","factor","href","_c","$RefreshReg$"],"sources":["/home/valeria/Documents/Crucible/frontend/src/components/sections/codex/creators/creatorshowcase/EvolutionSimulatorConceptShowcase.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport Background from '../../../../core/Background';\nimport ScrollingTextAnimation from '../../../../core/effects/ScrollingTextAnimation';\nimport { createUseStyles } from 'react-jss';\n\n// Custom styling hooks\nconst useStyles = createUseStyles({\n  evolutionSimulator: {\n    position: 'relative',\n    width: '100%',\n    height: '100vh',\n    overflow: 'hidden',\n    color: '#e0e0e0',\n    fontFamily: '\"Garamond\", \"Adobe Caslon Pro\", serif',\n    display: 'flex',\n    flexDirection: 'column',\n    padding: 0\n  },\n  \n  // Header overlay\n  header: {\n    textAlign: 'center',\n    padding: '1.5rem 2rem 0.5rem',\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    zIndex: 30,\n    background: 'linear-gradient(to bottom, rgba(0,0,0,0.5) 0%, rgba(0,0,0,0) 100%)'\n  },\n  title: {\n    color: '#bfad7f',\n    fontSize: '2.5rem',\n    fontWeight: 300,\n    letterSpacing: '0.1em',\n    margin: '0 0 0.25rem',\n    textShadow: '0 2px 15px rgba(0, 0, 0, 0.7)'\n  },\n  subtitle: {\n    color: 'rgba(224, 224, 224, 0.8)',\n    fontSize: '1rem',\n    maxWidth: '700px',\n    margin: '0 auto',\n    fontWeight: 300,\n    lineHeight: 1.5,\n    fontStyle: 'italic',\n    textShadow: '0 1px 10px rgba(0, 0, 0, 0.9)',\n    padding: '0 1rem'\n  },\n  \n  // Main visualization area\n  networkContainer: {\n    position: 'relative',\n    flex: 1,\n    display: 'flex',\n    zIndex: 10\n  },\n  \n  // Left panel containing the visualization\n  visualizationPanel: {\n    flex: '1 1 70%',\n    position: 'relative',\n    overflow: 'hidden'\n  },\n  \n  // Canvas for the network visualization\n  evolutionCanvas: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%'\n  },\n  \n  // Right panel for controls and information\n  controlPanel: {\n    flex: '0 0 30%',\n    maxWidth: '450px',\n    padding: '2rem',\n    background: 'rgba(10, 10, 15, 0.6)',\n    backdropFilter: 'blur(10px)',\n    borderLeft: '1px solid rgba(191, 173, 127, 0.2)',\n    display: 'flex',\n    flexDirection: 'column',\n    overflowY: 'auto',\n    position: 'relative',\n    zIndex: 20\n  },\n  \n  // Top navigation for body shapes\n  bodyShapeNav: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: '1rem 2rem',\n    gap: '1rem',\n    position: 'absolute',\n    top: '5rem',\n    left: '50%',\n    transform: 'translateX(-50%)',\n    zIndex: 40,\n    background: 'rgba(10, 10, 15, 0.75)',\n    backdropFilter: 'blur(10px)',\n    borderRadius: '8px',\n    boxShadow: '0 5px 20px rgba(0, 0, 0, 0.4)',\n    border: '1px solid rgba(191, 173, 127, 0.2)'\n  },\n  bodyShapeButton: {\n    background: 'none',\n    border: 'none',\n    color: 'rgba(224, 224, 224, 0.7)',\n    padding: '0.5rem 1rem',\n    font: 'inherit',\n    fontSize: '0.95rem',\n    cursor: 'pointer',\n    position: 'relative',\n    transition: 'color 0.3s ease',\n    '&:hover': {\n      color: '#bfad7f'\n    },\n    '&::after': {\n      content: '\"\"',\n      position: 'absolute',\n      bottom: '-4px',\n      left: '50%',\n      width: '0%',\n      height: '1px',\n      background: '#bfad7f',\n      transform: 'translateX(-50%)',\n      transition: 'width 0.3s ease'\n    },\n    '&:hover::after': {\n      width: '70%'\n    }\n  },\n  activeShapeButton: {\n    color: '#bfad7f',\n    '&::after': {\n      width: '70%'\n    }\n  },\n  \n  // Filter controls\n  filterControls: {\n    display: 'flex',\n    gap: '0.5rem',\n    marginBottom: '2rem'\n  },\n  filterButton: {\n    background: 'rgba(25, 25, 35, 0.6)',\n    border: '1px solid rgba(191, 173, 127, 0.3)',\n    color: '#e0e0e0',\n    padding: '0.5rem 1rem',\n    borderRadius: '4px',\n    fontFamily: 'inherit',\n    fontSize: '0.9rem',\n    cursor: 'pointer',\n    transition: 'all 0.2s ease',\n    '&:hover': {\n      background: 'rgba(191, 173, 127, 0.2)',\n      borderColor: 'rgba(191, 173, 127, 0.6)'\n    }\n  },\n  activeFilter: {\n    background: 'rgba(191, 173, 127, 0.3)',\n    borderColor: 'rgba(191, 173, 127, 0.8)',\n    boxShadow: '0 0 10px rgba(191, 173, 127, 0.2)'\n  },\n  \n  // Section styling\n  sectionTitle: {\n    color: '#bfad7f',\n    fontSize: '1.1rem',\n    fontWeight: 'normal',\n    borderBottom: '1px solid rgba(191, 173, 127, 0.3)',\n    paddingBottom: '0.5rem',\n    marginBottom: '1rem',\n    marginTop: '2rem'\n  },\n  \n  // Environment controls\n  environmentControls: {\n    display: 'flex',\n    flexDirection: 'column',\n    gap: '1rem'\n  },\n  sliderContainer: {\n    width: '100%'\n  },\n  sliderLabel: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    marginBottom: '0.25rem',\n    fontSize: '0.85rem'\n  },\n  sliderValue: {\n    fontWeight: 'bold'\n  },\n  positive: {\n    color: '#5C9D8B'\n  },\n  negative: {\n    color: '#B54B4B'\n  },\n  slider: {\n    width: '100%',\n    height: '4px',\n    WebkitAppearance: 'none',\n    background: 'linear-gradient(to right, #3D1C22 0%, #3D1C22 50%, #1C3D32 50%, #1C3D32 100%)',\n    borderRadius: '2px',\n    outline: 'none',\n    position: 'relative',\n    '&::-webkit-slider-thumb': {\n      WebkitAppearance: 'none',\n      width: '12px',\n      height: '12px',\n      borderRadius: '3px',\n      transform: 'rotate(45deg)',\n      backgroundColor: '#bfad7f',\n      cursor: 'pointer'\n    }\n  },\n  \n  // Results panel\n  resultsPanel: {\n    marginTop: '1rem',\n    background: 'rgba(20, 20, 25, 0.5)',\n    padding: '1rem',\n    borderRadius: '6px',\n    border: '1px solid rgba(191, 173, 127, 0.1)'\n  },\n  resultItem: {\n    display: 'flex',\n    flexDirection: 'column',\n    marginBottom: '0.75rem'\n  },\n  resultLabel: {\n    fontSize: '0.85rem',\n    marginBottom: '0.25rem'\n  },\n  progressBar: {\n    width: '100%',\n    height: '8px',\n    backgroundColor: 'rgba(30, 30, 30, 0.8)',\n    borderRadius: '4px',\n    overflow: 'hidden',\n    position: 'relative'\n  },\n  progressFill: {\n    height: '100%',\n    transition: 'width 0.5s ease, background-color 0.5s ease'\n  },\n  resultValue: {\n    position: 'absolute',\n    top: '50%',\n    right: '5px',\n    transform: 'translateY(-50%)',\n    fontSize: '0.7rem',\n    fontWeight: 'bold',\n    color: '#fff',\n    textShadow: '0 0 3px rgba(0, 0, 0, 0.8)'\n  },\n  \n  // Trait details panel\n  traitPanel: {\n    marginTop: '1.5rem',\n    background: 'rgba(15, 15, 15, 0.7)',\n    border: '1px solid rgba(191, 173, 127, 0.2)',\n    borderRadius: '6px',\n    overflow: 'hidden'\n  },\n  traitHeader: {\n    padding: '1rem',\n    color: '#000',\n    fontWeight: 'normal'\n  },\n  traitName: {\n    margin: '0 0 0.25rem 0',\n    fontSize: '1.2rem'\n  },\n  traitCategory: {\n    fontSize: '0.85rem',\n    opacity: 0.7\n  },\n  traitContent: {\n    padding: '1rem'\n  },\n  traitDescription: {\n    fontSize: '0.95rem',\n    lineHeight: 1.6,\n    marginBottom: '1rem',\n    color: 'rgba(224, 224, 224, 0.9)'\n  },\n  traitStat: {\n    display: 'flex',\n    alignItems: 'center',\n    gap: '0.5rem',\n    marginBottom: '0.5rem'\n  },\n  traitStatLabel: {\n    fontSize: '0.85rem',\n    color: 'rgba(224, 224, 224, 0.7)',\n    flex: '0 0 40%'\n  },\n  traitStatValue: {\n    fontSize: '0.85rem',\n    fontWeight: 'bold'\n  },\n  \n  // Category legend\n  legend: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    gap: '1rem',\n    marginTop: '1rem'\n  },\n  legendItem: {\n    display: 'flex',\n    alignItems: 'center',\n    gap: '0.5rem',\n    fontSize: '0.8rem'\n  },\n  legendColor: {\n    width: '12px',\n    height: '12px',\n    borderRadius: '50%',\n    border: '1px solid rgba(255, 255, 255, 0.2)'\n  },\n  \n  // Body shape details\n  bodyShapeDetails: {\n    background: 'rgba(15, 15, 15, 0.7)',\n    border: '1px solid rgba(191, 173, 127, 0.2)',\n    borderRadius: '6px',\n    padding: '1rem',\n    marginTop: '1.5rem'\n  },\n  bodyShapeIcon: {\n    width: '40px',\n    height: '40px',\n    borderRadius: '50%',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    fontSize: '1.5rem',\n    margin: '0 auto 0.5rem'\n  },\n  bodyShapeName: {\n    textAlign: 'center',\n    fontSize: '1.2rem',\n    color: '#bfad7f',\n    margin: '0 0 0.5rem'\n  },\n  bodyShapeElement: {\n    textAlign: 'center',\n    fontSize: '0.9rem',\n    color: 'rgba(224, 224, 224, 0.6)',\n    marginBottom: '1rem'\n  },\n  bodyShapeDescription: {\n    fontSize: '0.95rem',\n    lineHeight: 1.6,\n    color: 'rgba(224, 224, 224, 0.8)'\n  },\n  \n  // Loading and info overlays\n  loadingOverlay: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n    background: 'rgba(0, 0, 0, 0.8)',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    zIndex: 100,\n    color: '#bfad7f'\n  },\n  loadingIcon: {\n    fontSize: '2rem',\n    marginBottom: '1rem',\n    animation: '$spin 2s linear infinite'\n  },\n  '@keyframes spin': {\n    '0%': { transform: 'rotate(0deg)' },\n    '100%': { transform: 'rotate(360deg)' }\n  },\n  \n  // Accessibility\n  skipLink: {\n    position: 'absolute',\n    top: '-40px',\n    left: 0,\n    backgroundColor: '#bfad7f',\n    color: '#000',\n    padding: '0.5rem',\n    zIndex: 1000,\n    transition: 'top 0.3s ease',\n    '&:focus': {\n      top: 0\n    }\n  },\n  \n  // Responsive adjustments\n  '@media (max-width: 1200px)': {\n    controlPanel: {\n      flex: '0 0 35%'\n    }\n  },\n  '@media (max-width: 992px)': {\n    networkContainer: {\n      flexDirection: 'column'\n    },\n    visualizationPanel: {\n      minHeight: '60vh'\n    },\n    controlPanel: {\n      maxWidth: 'none',\n      flex: 'none',\n      borderLeft: 'none',\n      borderTop: '1px solid rgba(191, 173, 127, 0.2)'\n    }\n  },\n  '@media (max-width: 768px)': {\n    bodyShapeNav: {\n      padding: '0.75rem',\n      flexWrap: 'wrap'\n    },\n    bodyShapeButton: {\n      fontSize: '0.85rem',\n      padding: '0.3rem 0.5rem'\n    }\n  }\n});\n\nconst EvolutionSimulator = () => {\n  const classes = useStyles();\n  \n  // State management\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [cursorPosition, setCursorPosition] = useState({ x: 0, y: 0 });\n  const [selectedBodyShape, setSelectedBodyShape] = useState('quadrupedal');\n  const [selectedTrait, setSelectedTrait] = useState(null);\n  const [filterMode, setFilterMode] = useState('all');\n  const [isSimulating, setIsSimulating] = useState(false);\n  \n  // Environment state - default balanced values\n  const [environment, setEnvironment] = useState({\n    temperature: 0.2,\n    light_conditions: 0.3,\n    terrain_harshness: 0.4,\n    resource_scarcity: 0.2,\n    ether_density: 0.3,\n    pressure_gravity: 0.4\n  });\n  \n  // Analysis results\n  const [evolutionResults, setEvolutionResults] = useState({\n    totalStress: 0.42,\n    adaptationProbability: 0.38\n  });\n  \n  // Canvas and animation refs\n  const canvasRef = useRef(null);\n  const visualizationRef = useRef(null);\n  const animationFrameId = useRef(null);\n  \n  // Body shape data with consistent colors and clear icons\n  const bodyShapes = [\n    { \n      id: 'bipedal', \n      name: 'Bipedal', \n      element: 'Air',\n      color: '#7D6B9E',\n      icon: '⚡',\n      description: 'Upright forms with manipulative upper limbs, optimized for tool use and aerial adaptability.'\n    },\n    { \n      id: 'quadrupedal', \n      name: 'Quadrupedal', \n      element: 'Earth',\n      color: '#A67C52',\n      icon: '⛰️',\n      description: 'Four-limbed forms offering excellent stability across varied terrain with balanced strength and mobility.'\n    },\n    { \n      id: 'serpentine', \n      name: 'Serpentine', \n      element: 'Void',\n      color: '#5C9D8B',\n      icon: '∫',\n      description: 'Elongated, limbless forms specialized for flexibility, stealth, and confined space navigation.'\n    },\n    { \n      id: 'avian', \n      name: 'Avian', \n      element: 'Sky',\n      color: '#7D6B9E',\n      icon: '⩜',\n      description: 'Forms optimized for flight and aerial movement with hollow bones and efficient respiratory systems.'\n    },\n    { \n      id: 'aquatic', \n      name: 'Aquatic', \n      element: 'Water',\n      color: '#5C9D8B',\n      icon: '≈',\n      description: 'Forms specialized for water environments with streamlined bodies and specialized breathing apparatus.'\n    }\n  ];\n  \n  // Trait categories with consistent colors\n  const traitCategories = [\n    { id: 'locomotion', name: 'Locomotion', color: '#7D6B9E' },\n    { id: 'metabolism', name: 'Metabolism', color: '#5C9D8B' },\n    { id: 'sensory', name: 'Sensory Acuity', color: '#C99846' },\n    { id: 'etheric', name: 'Etheric Adaptation', color: '#B54B4B' },\n    { id: 'thermal', name: 'Thermal Regulation', color: '#A67C52' }\n  ];\n  \n  // Sample trait for demonstration\n  const sampleTrait = {\n    id: 'enhanced_muscle',\n    name: 'Enhanced Musculature',\n    tier: 2,\n    category: 'locomotion',\n    affinities: {\n      terrain_harshness: 0.8,\n      pressure_gravity: 0.7,\n      resource_scarcity: -0.4,\n      temperature: 0.1,\n      light_conditions: 0,\n      ether_density: 0\n    },\n    description: 'Highly developed muscle structures with exceptional strength and endurance, allowing for superior force generation with minimal energy expenditure.',\n    connections: ['running', 'climbing', 'carnivore', 'acute_vision', 'thick_blubber'],\n    compatible: ['bipedal', 'quadrupedal', 'insectoid'],\n    synthesis: {\n      condition: 'apex_physical',\n      result: {\n        name: 'Force Multiplication Tissues',\n        description: 'Muscles that multiply applied force through micro-dimensional folding.'\n      }\n    }\n  };\n  \n  // Handle mouse movement for background effect\n  const handleMouseMove = (e) => {\n    setCursorPosition({ x: e.clientX, y: e.clientY });\n  };\n  \n  // Handle body shape selection\n  const handleBodyShapeSelect = (shapeId) => {\n    setSelectedBodyShape(shapeId);\n    setSelectedTrait(null);\n  };\n  \n  // Handle filter mode change\n  const handleFilterChange = (mode) => {\n    setFilterMode(mode);\n  };\n  \n  // Handle trait selection\n  const handleTraitSelect = (traitData) => {\n    setSelectedTrait(traitData);\n  };\n  \n  // Update environment parameter\n  const handleEnvironmentChange = (parameter, value) => {\n    setEnvironment(prev => {\n      const newEnvironment = {\n        ...prev,\n        [parameter]: value\n      };\n      \n      // In a real implementation, we would recalculate results here\n      // For demo, just update with slightly different values\n      setEvolutionResults({\n        totalStress: 0.3 + Math.random() * 0.3,\n        adaptationProbability: 0.2 + Math.random() * 0.5\n      });\n      \n      return newEnvironment;\n    });\n  };\n  \n  // Handle simulation button click\n  const handleSimulate = () => {\n    setIsSimulating(true);\n    \n    // Simulate processing time\n    setTimeout(() => {\n      setEvolutionResults({\n        totalStress: 0.3 + Math.random() * 0.4,\n        adaptationProbability: 0.2 + Math.random() * 0.6\n      });\n      setIsSimulating(false);\n    }, 1500);\n  };\n  \n  // Initialize canvas and start animation when component mounts\n  useEffect(() => {\n    if (!canvasRef.current) return;\n    \n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    \n    // Set canvas size\n    const updateCanvasSize = () => {\n      if (visualizationRef.current) {\n        const { width, height } = visualizationRef.current.getBoundingClientRect();\n        canvas.width = width;\n        canvas.height = height;\n      }\n    };\n    \n    updateCanvasSize();\n    window.addEventListener('resize', updateCanvasSize);\n    \n    // Animation function for the network visualization\n    const render = () => {\n      if (!context) return;\n      \n      // Clear canvas\n      context.clearRect(0, 0, canvas.width, canvas.height);\n      \n      // Get center coordinates\n      const centerX = canvas.width / 2;\n      const centerY = canvas.height / 2;\n      \n      // Draw background gradient\n      const gradient = context.createRadialGradient(\n        centerX, centerY, 50,\n        centerX, centerY, Math.max(canvas.width, canvas.height) / 2\n      );\n      \n      // Get selected body shape color for background tint\n      const selectedShape = bodyShapes.find(shape => shape.id === selectedBodyShape);\n      const shapeColor = selectedShape ? selectedShape.color : '#191919';\n      \n      // Convert hex to rgb for gradient\n      const hexToRgb = (hex) => {\n        const r = parseInt(hex.slice(1, 3), 16);\n        const g = parseInt(hex.slice(3, 5), 16);\n        const b = parseInt(hex.slice(5, 7), 16);\n        return { r, g, b };\n      };\n      \n      const { r, g, b } = hexToRgb(shapeColor);\n      \n      gradient.addColorStop(0, `rgba(${r * 0.25}, ${g * 0.25}, ${b * 0.25}, 0.8)`);\n      gradient.addColorStop(1, 'rgba(10, 10, 15, 0.9)');\n      \n      context.fillStyle = gradient;\n      context.fillRect(0, 0, canvas.width, canvas.height);\n      \n      // Draw central body shape\n      drawCentralNode(context, centerX, centerY, selectedShape);\n      \n      // Draw trait network - simplified version that won't actually jerk around\n      drawTraitNetwork(context, centerX, centerY, selectedShape, filterMode);\n      \n      // Continue animation loop\n      animationFrameId.current = requestAnimationFrame(render);\n    };\n    \n    // Function to draw the central body shape node\n    const drawCentralNode = (ctx, x, y, bodyShape) => {\n      const nodeRadius = 80;\n      \n      // Draw outer rings\n      for (let i = 0; i < 3; i++) {\n        ctx.beginPath();\n        ctx.arc(x, y, nodeRadius + 15 + i * 6, 0, Math.PI * 2);\n        ctx.strokeStyle = `rgba(191, 173, 127, ${0.15 - i * 0.04})`;\n        ctx.lineWidth = 1;\n        ctx.stroke();\n      }\n      \n      // Draw glow effect\n      const glowGradient = ctx.createRadialGradient(\n        x, y, nodeRadius * 0.7,\n        x, y, nodeRadius * 1.5\n      );\n      \n      glowGradient.addColorStop(0, `rgba(${r}, ${g}, ${b}, 0.3)`);\n      glowGradient.addColorStop(1, 'rgba(0, 0, 0, 0)');\n      \n      ctx.beginPath();\n      ctx.arc(x, y, nodeRadius * 1.5, 0, Math.PI * 2);\n      ctx.fillStyle = glowGradient;\n      ctx.fill();\n      \n      // Draw main body shape circle\n      ctx.beginPath();\n      ctx.arc(x, y, nodeRadius, 0, Math.PI * 2);\n      \n      const mainGradient = ctx.createRadialGradient(\n        x - nodeRadius * 0.3, y - nodeRadius * 0.3, 0,\n        x, y, nodeRadius\n      );\n      \n      mainGradient.addColorStop(0, bodyShape.color);\n      mainGradient.addColorStop(1, `rgba(${r * 0.7}, ${g * 0.7}, ${b * 0.7}, 1)`);\n      \n      ctx.fillStyle = mainGradient;\n      ctx.fill();\n      \n      // Draw border\n      ctx.beginPath();\n      ctx.arc(x, y, nodeRadius, 0, Math.PI * 2);\n      ctx.strokeStyle = 'rgba(191, 173, 127, 0.5)';\n      ctx.lineWidth = 2;\n      ctx.stroke();\n      \n      // Draw icon and text\n      ctx.fillStyle = '#000';\n      ctx.font = 'bold 30px serif';\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(bodyShape.icon, x, y - 15);\n      \n      ctx.font = 'bold 16px sans-serif';\n      ctx.fillText(bodyShape.name, x, y + 15);\n      \n      ctx.font = '14px sans-serif';\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\n      ctx.fillText(bodyShape.element, x, y + 35);\n    };\n    \n    // Function to draw the trait network\n    const drawTraitNetwork = (ctx, centerX, centerY, bodyShape, filterMode) => {\n      // We'll simulate traits with stable positions\n      const traitTiers = [1, 2, 3];\n      const traitAngles = {};\n      \n      // Generate stable positions for traits within their categories\n      traitCategories.forEach((category, categoryIndex) => {\n        const categoryAngle = (categoryIndex / traitCategories.length) * Math.PI * 2;\n        const categoryArcWidth = (Math.PI * 2) / traitCategories.length;\n        \n        // Draw category sector\n        ctx.beginPath();\n        ctx.moveTo(centerX, centerY);\n        ctx.arc(centerX, centerY, 500, \n                categoryAngle - categoryArcWidth/2, \n                categoryAngle + categoryArcWidth/2);\n        ctx.lineTo(centerX, centerY);\n        ctx.fillStyle = `rgba(${parseInt(category.color.slice(1, 3), 16)}, \n                             ${parseInt(category.color.slice(3, 5), 16)}, \n                             ${parseInt(category.color.slice(5, 7), 16)}, 0.05)`;\n        ctx.fill();\n        \n        // Draw category label at outer edge\n        const labelRadius = 500 * 1.08;\n        const labelX = centerX + Math.cos(categoryAngle) * labelRadius;\n        const labelY = centerY + Math.sin(categoryAngle) * labelRadius;\n        \n        ctx.save();\n        ctx.translate(labelX, labelY);\n        ctx.rotate(categoryAngle + Math.PI/2);\n        \n        ctx.fillStyle = category.color;\n        ctx.font = 'bold 14px serif';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText(category.name.toUpperCase(), 0, 0);\n        \n        ctx.restore();\n        \n        // Simulate traits in this category\n        const traitCount = 2 + Math.floor(Math.random() * 3); // 2-4 traits per category\n        \n        for (let i = 0; i < traitCount; i++) {\n          const tier = Math.min(3, 1 + Math.floor(i / 2)); // Distribute across tiers\n          const tierRadius = 150 + (tier - 1) * 100; // Increasing radius with tier\n          \n          // Calculate position within category sector\n          const traitPosition = (i + 0.5) / traitCount;\n          const traitAngle = categoryAngle - (categoryArcWidth * 0.4) + \n                            (categoryArcWidth * 0.8 * traitPosition);\n          \n          // Add slight randomness to radius for more natural look\n          const radiusVariation = tierRadius * 0.06 * (Math.sin(categoryIndex * 5 + i * 3) + 0.5);\n          const finalRadius = tierRadius + radiusVariation;\n          \n          const x = centerX + Math.cos(traitAngle) * finalRadius;\n          const y = centerY + Math.sin(traitAngle) * finalRadius;\n          \n          // Store the angle for connection drawing\n          const traitId = `trait_${categoryIndex}_${i}`;\n          traitAngles[traitId] = { angle: traitAngle, tier, category: category.id };\n          \n          // Draw trait node\n          drawTraitNode(ctx, x, y, tier, category, traitId === 'trait_0_0');\n          \n          // Draw connections to center for first tier\n          if (tier === 1) {\n            drawConnection(ctx, x, y, centerX, centerY, category.color, false);\n          }\n          \n          // Draw connections between tiers\n          if (tier > 1) {\n            // Find a node in the previous tier to connect to\n            const parentTier = tier - 1;\n            const possibleParents = Object.entries(traitAngles)\n              .filter(([id, data]) => \n                data.tier === parentTier && \n                data.category === category.id &&\n                Math.abs(data.angle - traitAngle) < categoryArcWidth * 0.8\n              );\n            \n            if (possibleParents.length > 0) {\n              // Select the closest parent by angle\n              const parentId = possibleParents.reduce((closest, current) => {\n                const [currentId, currentData] = current;\n                const [closestId, closestData] = closest;\n                \n                return Math.abs(currentData.angle - traitAngle) < \n                      Math.abs(closestData.angle - traitAngle) ? \n                      current : closest;\n              });\n              \n              const parentAngle = parentId[1].angle;\n              const parentRadius = 150 + (parentId[1].tier - 1) * 100;\n              \n              const parentX = centerX + Math.cos(parentAngle) * parentRadius;\n              const parentY = centerY + Math.sin(parentAngle) * parentRadius;\n              \n              // Draw evolutionary connection\n              drawConnection(ctx, x, y, parentX, parentY, category.color, true);\n            }\n          }\n          \n          // Draw cross-category connections for some traits\n          if (Math.random() > 0.7) {\n            // Find a node in another category\n            const otherCategories = Object.entries(traitAngles)\n              .filter(([id, data]) => \n                data.category !== category.id && \n                Math.abs(data.angle - traitAngle) > Math.PI * 0.25\n              );\n            \n            if (otherCategories.length > 0) {\n              const randomIndex = Math.floor(Math.random() * otherCategories.length);\n              const [targetId, targetData] = otherCategories[randomIndex];\n              \n              const targetAngle = targetData.angle;\n              const targetRadius = 150 + (targetData.tier - 1) * 100;\n              \n              const targetX = centerX + Math.cos(targetAngle) * targetRadius;\n              const targetY = centerY + Math.sin(targetAngle) * targetRadius;\n              \n              // Get target category color\n              const targetCategory = traitCategories.find(c => c.id === targetData.category);\n              \n              // Create gradient between categories\n              const gradient = ctx.createLinearGradient(x, y, targetX, targetY);\n              gradient.addColorStop(0, category.color);\n              gradient.addColorStop(1, targetCategory.color);\n              \n              // Draw connection\n              drawConnection(ctx, x, y, targetX, targetY, gradient, false);\n            }\n          }\n        }\n      });\n    };\n    \n    // Function to draw a trait node\n    const drawTraitNode = (ctx, x, y, tier, category, isHighlighted) => {\n      const nodeSize = 14 + (tier - 1) * 3;\n      const highlightBonus = isHighlighted ? 4 : 0;\n      \n      // Draw glow for highlighted nodes\n      if (isHighlighted) {\n        ctx.beginPath();\n        ctx.arc(x, y, nodeSize + 10, 0, Math.PI * 2);\n        const glowGradient = ctx.createRadialGradient(\n          x, y, nodeSize,\n          x, y, nodeSize + 10\n        );\n        glowGradient.addColorStop(0, `rgba(${parseInt(category.color.slice(1, 3), 16)}, \n                                         ${parseInt(category.color.slice(3, 5), 16)}, \n                                         ${parseInt(category.color.slice(5, 7), 16)}, 0.6)`);\n        glowGradient.addColorStop(1, 'rgba(0, 0, 0, 0)');\n        ctx.fillStyle = glowGradient;\n        ctx.fill();\n      }\n      \n      // Draw main node\n      ctx.beginPath();\n      ctx.arc(x, y, nodeSize + highlightBonus, 0, Math.PI * 2);\n      \n      const gradient = ctx.createRadialGradient(\n        x - (nodeSize + highlightBonus) * 0.3, \n        y - (nodeSize + highlightBonus) * 0.3, \n        0,\n        x, y, nodeSize + highlightBonus\n      );\n      \n      gradient.addColorStop(0, category.color);\n      gradient.addColorStop(1, adjustColorBrightness(category.color, -30));\n      \n      ctx.fillStyle = gradient;\n      ctx.fill();\n      \n      // Draw border\n      ctx.beginPath();\n      ctx.arc(x, y, nodeSize + highlightBonus, 0, Math.PI * 2);\n      ctx.strokeStyle = isHighlighted ? '#FFFFFF' : adjustColorBrightness(category.color, 20);\n      ctx.lineWidth = isHighlighted ? 2 : 1;\n      ctx.stroke();\n      \n      // Draw tier indicator in center for higher tiers\n      if (tier > 1) {\n        ctx.beginPath();\n        ctx.arc(x, y, (nodeSize + highlightBonus) * 0.4, 0, Math.PI * 2);\n        ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n        ctx.fill();\n        \n        // Add tier number\n        ctx.fillStyle = category.color;\n        ctx.font = `bold ${(nodeSize + highlightBonus) * 0.5}px serif`;\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText(tier.toString(), x, y);\n      }\n    };\n    \n    // Function to draw a connection between nodes\n    const drawConnection = (ctx, x1, y1, x2, y2, colorOrGradient, isEvolutionary) => {\n      // Create curved connection\n      ctx.beginPath();\n      \n      // For connections to center, use direct line\n      if ((x2 === centerX && y2 === centerY) || !isEvolutionary) {\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n      } else {\n        // For evolutionary connections, use curves\n        const midX = (x1 + x2) / 2;\n        const midY = (y1 + y2) / 2;\n        \n        // Pull toward center\n        const pullFactor = 0.25;\n        const controlX = midX + (centerX - midX) * pullFactor;\n        const controlY = midY + (centerY - midY) * pullFactor;\n        \n        // Draw curve\n        ctx.moveTo(x1, y1);\n        ctx.quadraticCurveTo(controlX, controlY, x2, y2);\n      }\n      \n      // Set line style\n      ctx.strokeStyle = colorOrGradient;\n      ctx.lineWidth = isEvolutionary ? 2 : 1;\n      \n      if (isEvolutionary) {\n        ctx.setLineDash([3, 5]);\n      } else {\n        ctx.setLineDash([]);\n      }\n      \n      ctx.globalAlpha = 0.6;\n      ctx.stroke();\n      ctx.globalAlpha = 1;\n      ctx.setLineDash([]);\n    };\n    \n    // Helper function to adjust color brightness\n    const adjustColorBrightness = (hex, percent) => {\n      const r = parseInt(hex.slice(1, 3), 16);\n      const g = parseInt(hex.slice(3, 5), 16);\n      const b = parseInt(hex.slice(5, 7), 16);\n      \n      const adjustedR = Math.max(0, Math.min(255, r + percent));\n      const adjustedG = Math.max(0, Math.min(255, g + percent));\n      const adjustedB = Math.max(0, Math.min(255, b + percent));\n      \n      return `rgb(${Math.round(adjustedR)}, ${Math.round(adjustedG)}, ${Math.round(adjustedB)})`;\n    };\n    \n    // Start rendering\n    render();\n    \n    // Set loaded state after a short delay to simulate loading\n    const timer = setTimeout(() => {\n      setIsLoaded(true);\n    }, 1000);\n    \n    // Clean up on unmount\n    return () => {\n      clearTimeout(timer);\n      window.removeEventListener('resize', updateCanvasSize);\n      if (animationFrameId.current) {\n        cancelAnimationFrame(animationFrameId.current);\n      }\n    };\n  }, [selectedBodyShape, filterMode, bodyShapes, traitCategories]);\n  \n  // Get selected body shape\n  const getSelectedBodyShape = () => {\n    return bodyShapes.find(shape => shape.id === selectedBodyShape) || bodyShapes[0];\n  };\n  \n  return (\n    <div \n      className={classes.evolutionSimulator}\n      onMouseMove={handleMouseMove}\n    >\n      {/* Background with stars */}\n      <Background cursorPosition={cursorPosition} setCursorPosition={setCursorPosition} />\n      \n      {/* Header with scrollable title */}\n      <header className={classes.header}>\n        <ScrollingTextAnimation\n          scrollConfig={{\n            startPosition: 0,\n            endPosition: 300,\n            initialY: -30,\n            finalY: 0,\n            clampValues: true\n          }}\n        >\n          <h1 className={classes.title}>Crescent Evolution System</h1>\n          <p className={classes.subtitle}>\n            Explore the interconnected trait networks that drive evolution through Bayesian natural selection\n          </p>\n        </ScrollingTextAnimation>\n      </header>\n      \n      {/* Body shape navigation */}\n      <div className={classes.bodyShapeNav}>\n        {bodyShapes.map(shape => (\n          <button\n            key={shape.id}\n            className={`${classes.bodyShapeButton} ${selectedBodyShape === shape.id ? classes.activeShapeButton : ''}`}\n            onClick={() => handleBodyShapeSelect(shape.id)}\n          >\n            {shape.name}\n          </button>\n        ))}\n      </div>\n      \n      {/* Main content container */}\n      <div className={classes.networkContainer}>\n        {/* Visualization panel */}\n        <div \n          ref={visualizationRef}\n          className={classes.visualizationPanel}\n        >\n          <canvas \n            ref={canvasRef}\n            className={classes.evolutionCanvas}\n          />\n          \n          {/* Loading overlay */}\n          {!isLoaded && (\n            <div className={classes.loadingOverlay}>\n              <div className={classes.loadingIcon}>⟳</div>\n              <p>Initializing evolution matrix...</p>\n            </div>\n          )}\n        </div>\n        \n        {/* Control panel */}\n        <div className={classes.controlPanel}>\n          {/* Filter controls */}\n          <div className={classes.filterControls}>\n            <button \n              className={`${classes.filterButton} ${filterMode === 'all' ? classes.activeFilter : ''}`}\n              onClick={() => handleFilterChange('all')}\n            >\n              All Traits\n            </button>\n            <button \n              className={`${classes.filterButton} ${filterMode === 'relevance' ? classes.activeFilter : ''}`}\n              onClick={() => handleFilterChange('relevance')}\n            >\n              By Relevance\n            </button>\n            <button \n              className={`${classes.filterButton} ${filterMode === 'category' ? classes.activeFilter : ''}`}\n              onClick={() => handleFilterChange('category')}\n            >\n              By Category\n            </button>\n          </div>\n          \n          {/* Legend */}\n          <div className={classes.legend}>\n            {traitCategories.map(category => (\n              <div key={category.id} className={classes.legendItem}>\n                <div \n                  className={classes.legendColor}\n                  style={{ backgroundColor: category.color }}\n                />\n                <span>{category.name}</span>\n              </div>\n            ))}\n          </div>\n          \n          {/* Body shape details */}\n          <div className={classes.bodyShapeDetails}>\n            <div \n              className={classes.bodyShapeIcon}\n              style={{ backgroundColor: getSelectedBodyShape().color }}\n            >\n              {getSelectedBodyShape().icon}\n            </div>\n            <h3 className={classes.bodyShapeName}>{getSelectedBodyShape().name}</h3>\n            <div className={classes.bodyShapeElement}>{getSelectedBodyShape().element}</div>\n            <p className={classes.bodyShapeDescription}>\n              {getSelectedBodyShape().description}\n            </p>\n          </div>\n          \n          {/* Environment controls */}\n          <h3 className={classes.sectionTitle}>Environmental Stressors</h3>\n          <div className={classes.environmentControls}>\n            {Object.entries(environment).map(([param, value]) => {\n              const paramName = param.split('_').map(word => \n                word.charAt(0).toUpperCase() + word.slice(1)\n              ).join(' ');\n              \n              return (\n                <div key={param} className={classes.sliderContainer}>\n                  <div className={classes.sliderLabel}>\n                    <span>{paramName}</span>\n                    <span className={`\n                      ${classes.sliderValue} \n                      ${value > 0.6 ? classes.positive : value < 0.3 ? classes.negative : ''}\n                    `}>\n                      {value.toFixed(1)}\n                    </span>\n                  </div>\n                  <input\n                    type=\"range\"\n                    min={-1}\n                    max={1}\n                    step={0.1}\n                    value={value}\n                    onChange={(e) => handleEnvironmentChange(param, parseFloat(e.target.value))}\n                    className={classes.slider}\n                  />\n                </div>\n              );\n            })}\n            \n            <button \n              className={classes.filterButton}\n              onClick={handleSimulate}\n              disabled={isSimulating}\n            >\n              {isSimulating ? 'Processing...' : 'Recalculate Evolution'}\n            </button>\n          </div>\n          \n          {/* Results panel */}\n          <div className={classes.resultsPanel}>\n            <div className={classes.resultItem}>\n              <div className={classes.resultLabel}>Total Effective Stress:</div>\n              <div className={classes.progressBar}>\n                <div \n                  className={classes.progressFill} \n                  style={{ \n                    width: `${evolutionResults.totalStress * 100}%`,\n                    backgroundColor: \n                      evolutionResults.totalStress > 0.7 ? '#B54B4B' : \n                      evolutionResults.totalStress > 0.4 ? '#C99846' : \n                      '#5C9D8B'\n                  }}\n                />\n                <span className={classes.resultValue}>\n                  {evolutionResults.totalStress.toFixed(2)}\n                </span>\n              </div>\n            </div>\n            \n            <div className={classes.resultItem}>\n              <div className={classes.resultLabel}>Adaptation Probability:</div>\n              <div className={classes.progressBar}>\n                <div \n                  className={classes.progressFill}\n                  style={{ \n                    width: `${evolutionResults.adaptationProbability * 100}%`,\n                    backgroundColor: \n                      evolutionResults.adaptationProbability > 0.7 ? '#5C9D8B' : \n                      evolutionResults.adaptationProbability > 0.4 ? '#C99846' : \n                      '#B54B4B'\n                  }}\n                />\n                <span className={classes.resultValue}>\n                  {evolutionResults.adaptationProbability.toFixed(2)}\n                </span>\n              </div>\n            </div>\n          </div>\n          \n          {/* Selected trait details */}\n          {selectedTrait ? (\n            <div className={classes.traitPanel}>\n              <div \n                className={classes.traitHeader}\n                style={{ backgroundColor: traitCategories.find(c => c.id === selectedTrait.category)?.color }}\n              >\n                <h3 className={classes.traitName}>{selectedTrait.name}</h3>\n                <div className={classes.traitCategory}>\n                  {traitCategories.find(c => c.id === selectedTrait.category)?.name} • Tier {selectedTrait.tier}\n                </div>\n              </div>\n              \n              <div className={classes.traitContent}>\n                <p className={classes.traitDescription}>\n                  {selectedTrait.description}\n                </p>\n                \n                <h4>Environmental Affinities</h4>\n                {Object.entries(selectedTrait.affinities).map(([factor, value]) => (\n                  value !== 0 && (\n                    <div key={factor} className={classes.traitStat}>\n                      <span className={classes.traitStatLabel}>\n                        {factor.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')}:\n                      </span>\n                      <span className={`\n                        ${classes.traitStatValue}\n                        ${value > 0 ? classes.positive : classes.negative}\n                      `}>\n                        {value > 0 ? '+' : ''}{value.toFixed(1)}\n                      </span>\n                    </div>\n                  )\n                ))}\n                \n                {/* Synthesis information */}\n                {selectedTrait.synthesis && (\n                  <>\n                    <h4>Synthesis Potential</h4>\n                    <p className={classes.traitDescription}>\n                      <strong>{selectedTrait.synthesis.result.name}:</strong> {selectedTrait.synthesis.result.description}\n                    </p>\n                    <div className={classes.traitStat}>\n                      <span className={classes.traitStatLabel}>Trigger Condition:</span>\n                      <span className={classes.traitStatValue}>\n                        {selectedTrait.synthesis.condition.split('_').map(word => \n                          word.charAt(0).toUpperCase() + word.slice(1)\n                        ).join(' ')}\n                      </span>\n                    </div>\n                  </>\n                )}\n              </div>\n            </div>\n          ) : (\n            <div className={classes.traitPanel} style={{ textAlign: 'center', padding: '1rem' }}>\n              <p>Select a trait node to view details</p>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {/* Accessibility skip link */}\n      <a href=\"#content\" className={classes.skipLink}>\n        Skip to main content\n      </a>\n    </div>\n  );\n};\n\nexport default EvolutionSimulator;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}