{"ast":null,"code":"var _jsxFileName = \"/home/valeria/Documents/Crucible/frontend/src/components/core/Background.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect, useCallback, useMemo } from 'react';\n\n/**\n * Background Component - Enterprise Performance Optimized\n * \n * Creates a beautiful, subtle animated stellar background with constellations\n * and star particles that provide depth without distracting from content.\n * \n * Features:\n * - Performant canvas-based rendering with adaptive quality\n * - Subtle constellation animations with occasional pulsing\n * - Independent motion not tied to cursor position\n * - Memory-efficient rendering with object pooling\n * - Accessibility compliance with reduced motion support\n * - Hardware acceleration and high-DPI display support\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Background = () => {\n  _s();\n  // Refs for DOM elements and animation state\n  const containerRef = useRef(null);\n  const canvasRef = useRef(null);\n  const ctxRef = useRef(null);\n  const starsRef = useRef([]);\n  const constellationsRef = useRef([]);\n  const animationFrameRef = useRef(null);\n  const resizeObserverRef = useRef(null);\n  const visibilityObserverRef = useRef(null);\n  const lastTimestampRef = useRef(0);\n  const fpsTimestampRef = useRef(0);\n  const frameCountRef = useRef(0);\n  const currentFpsRef = useRef(60);\n  const timeFactorRef = useRef(0);\n  const pulseTimeRef = useRef(0);\n\n  // Component state\n  const [dimensions, setDimensions] = useState({\n    width: 0,\n    height: 0,\n    pixelRatio: 1\n  });\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [isVisible, setIsVisible] = useState(true);\n  const [prefersReducedMotion, setPrefersReducedMotion] = useState(false);\n  const [deviceCapabilities, setDeviceCapabilities] = useState({\n    memory: 4,\n    cores: 4,\n    isMobile: false,\n    batteryLevel: 1\n  });\n  const [qualityFactor, setQualityFactor] = useState(1);\n\n  // Configuration constants with adaptive quality\n  const CONFIG = useMemo(() => {\n    // Base configuration\n    const baseConfig = {\n      // Star parameters\n      starCount: 120,\n      starSizeMin: 1,\n      starSizeMax: 3,\n      starOpacityMin: 0.15,\n      starOpacityMax: 0.85,\n      starColorVariation: 0.12,\n      // Motion and animation\n      baseMovementSpeed: 0.0008,\n      pulseFrequency: 0.00012,\n      pulseIntensity: 0.4,\n      // Constellation parameters\n      constellationCount: 5,\n      verticesMin: 4,\n      verticesMax: 8,\n      lineOpacity: 0.1,\n      lineWidth: 0.5,\n      // Performance parameters\n      maxFPS: 30,\n      useHighQualityRendering: true,\n      useGlow: true\n    };\n\n    // Apply quality adjustments\n    if (qualityFactor < 1) {\n      return {\n        ...baseConfig,\n        starCount: Math.floor(baseConfig.starCount * qualityFactor),\n        constellationCount: Math.floor(baseConfig.constellationCount * qualityFactor),\n        useHighQualityRendering: qualityFactor > 0.7,\n        useGlow: qualityFactor > 0.5,\n        maxFPS: qualityFactor > 0.5 ? 30 : 24\n      };\n    }\n    return baseConfig;\n  }, [qualityFactor]);\n\n  // Color configurations with pre-defined palette\n  const COLORS = useMemo(() => ({\n    // Main star colors\n    stars: ['rgba(224, 224, 255, alpha)',\n    // Cool white\n    'rgba(240, 240, 255, alpha)',\n    // Bright white\n    'rgba(213, 224, 255, alpha)',\n    // Slightly blue\n    'rgba(255, 225, 205, alpha)',\n    // Warm white (slight orange)\n    'rgba(197, 214, 255, alpha)' // Pale blue\n    ],\n    // Constellation effect colors\n    constellations: {\n      lines: 'rgba(160, 142, 97, alpha)',\n      pulseColor: 'rgba(191, 173, 127, alpha)',\n      vertexColor: 'rgba(191, 173, 127, alpha)'\n    },\n    // Background gradient colors\n    background: {\n      topColor: 'rgb(8, 8, 12)',\n      bottomColor: 'rgb(15, 15, 20)'\n    }\n  }), []);\n\n  // Pre-allocate objects to avoid garbage collection during animation\n  const pointCache = useRef({\n    temp: {\n      x: 0,\n      y: 0\n    }\n  }).current;\n\n  // Cached color variants to avoid string operations during animation\n  const colorCacheRef = useRef(new Map());\n\n  // Object pools for efficient memory usage\n  const objectPoolsRef = useRef({\n    stars: [],\n    vertices: [],\n    lines: []\n  });\n\n  // Get cached color with opacity\n  const getCachedColor = useCallback((baseColor, opacity) => {\n    // Ensure opacity is valid to prevent rendering glitches\n    const safeOpacity = Math.max(0, Math.min(1, opacity || 0));\n\n    // Round opacity to reduce cache size while maintaining visual quality\n    const roundedOpacity = Math.round(safeOpacity * 100) / 100;\n    const key = `${baseColor}-${roundedOpacity}`;\n    if (!colorCacheRef.current.has(key)) {\n      const newColor = baseColor.replace(/alpha\\)$/, `${roundedOpacity})`);\n      colorCacheRef.current.set(key, newColor);\n    }\n    return colorCacheRef.current.get(key);\n  }, []);\n\n  // Detect device capabilities and set up optimization strategies\n  const detectCapabilities = useCallback(() => {\n    // Device detection\n    const memory = navigator.deviceMemory || 4;\n    const cores = navigator.hardwareConcurrency || 4;\n    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n\n    // Get battery info if available\n    if (navigator.getBattery) {\n      navigator.getBattery().then(battery => {\n        setDeviceCapabilities(prev => ({\n          ...prev,\n          batteryLevel: battery.level,\n          isCharging: battery.charging\n        }));\n\n        // Reduce quality if on battery and below 30%\n        if (!battery.charging && battery.level < 0.3) {\n          setQualityFactor(prev => Math.min(prev, 0.6));\n        }\n      }).catch(() => {\n        // Fallback if battery API is not available\n        setDeviceCapabilities(prev => ({\n          ...prev,\n          batteryLevel: 1,\n          isCharging: true\n        }));\n      });\n    }\n\n    // Set device capabilities state\n    setDeviceCapabilities({\n      memory,\n      cores,\n      batteryLevel: 1,\n      isCharging: true,\n      isMobile\n    });\n\n    // Calculate quality factor based on capabilities\n    const performanceScore = memory * cores / (isMobile ? 2 : 1);\n\n    // Scale quality based on performance score\n    let quality = 1;\n    if (performanceScore > 16) {\n      quality = 1; // High-end devices\n    } else if (performanceScore > 8) {\n      quality = 0.8; // Mid-range devices\n    } else if (performanceScore > 4) {\n      quality = 0.6; // Low-end devices\n    } else {\n      quality = 0.4; // Very low-end devices\n    }\n    setQualityFactor(quality);\n  }, []);\n\n  // Initialize canvas with proper resolution\n  const setupCanvas = useCallback(() => {\n    if (!canvasRef.current || !containerRef.current) return false;\n    const canvas = canvasRef.current;\n    const container = containerRef.current;\n    const rect = container.getBoundingClientRect();\n    const pixelRatio = window.devicePixelRatio || 1;\n\n    // Calculate dimensions - ensuring valid integers\n    const displayWidth = Math.floor(rect.width);\n    const displayHeight = Math.floor(rect.height);\n\n    // Set canvas size accounting for pixel ratio\n    canvas.width = displayWidth * pixelRatio;\n    canvas.height = displayHeight * pixelRatio;\n    canvas.style.width = `${displayWidth}px`;\n    canvas.style.height = `${displayHeight}px`;\n\n    // Get 2D context\n    const ctx = canvas.getContext('2d', {\n      alpha: true,\n      desynchronized: true,\n      willReadFrequently: false\n    });\n    if (!ctx) return false;\n\n    // Scale context for high-DPI displays\n    ctx.scale(pixelRatio, pixelRatio);\n\n    // Configure context for quality rendering\n    if (CONFIG.useHighQualityRendering) {\n      ctx.imageSmoothingEnabled = true;\n      ctx.imageSmoothingQuality = 'high';\n    }\n    ctxRef.current = ctx;\n\n    // Update dimensions state\n    setDimensions({\n      width: displayWidth,\n      height: displayHeight,\n      pixelRatio\n    });\n    return true;\n  }, [CONFIG.useHighQualityRendering]);\n\n  // Setup canvas resize observer\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    // Create ResizeObserver to detect container size changes\n    const resizeObserver = new ResizeObserver(entries => {\n      // Debounce resize operations\n      if (resizeObserverRef.current.timeout) {\n        clearTimeout(resizeObserverRef.current.timeout);\n      }\n      resizeObserverRef.current.timeout = setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (setupCanvas()) {\n            // Reinitialize stars and constellations after resize\n            initializeStars();\n            initializeConstellations();\n            setIsInitialized(true);\n          }\n        });\n      }, 100); // 100ms debounce\n    });\n\n    // Store references for cleanup\n    const currentContainer = containerRef.current;\n\n    // Start observing\n    resizeObserver.observe(currentContainer);\n    resizeObserverRef.current = {\n      observer: resizeObserver\n    };\n\n    // Initial setup\n    setupCanvas();\n    return () => {\n      if (resizeObserverRef.current.observer) {\n        resizeObserverRef.current.observer.disconnect();\n      }\n      if (resizeObserverRef.current.timeout) {\n        clearTimeout(resizeObserverRef.current.timeout);\n      }\n    };\n  }, [setupCanvas]);\n\n  // Setup intersection observer to only animate when visible\n  useEffect(() => {\n    if (!containerRef.current) return;\n    const observer = new IntersectionObserver(entries => {\n      setIsVisible(entries[0].isIntersecting);\n    }, {\n      threshold: 0.01,\n      rootMargin: '100px'\n    });\n    const currentContainer = containerRef.current;\n    observer.observe(currentContainer);\n    visibilityObserverRef.current = observer;\n    return () => {\n      if (visibilityObserverRef.current) {\n        visibilityObserverRef.current.disconnect();\n      }\n    };\n  }, []);\n\n  // Detect reduced motion preference\n  useEffect(() => {\n    const reducedMotionQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\n    setPrefersReducedMotion(reducedMotionQuery.matches);\n    const handleReducedMotionChange = e => {\n      setPrefersReducedMotion(e.matches);\n    };\n    reducedMotionQuery.addEventListener('change', handleReducedMotionChange);\n\n    // Detect device capabilities\n    detectCapabilities();\n\n    // Setup visibility change detection\n    const handleVisibilityChange = () => {\n      if (document.hidden) {\n        // Pause when tab is inactive\n        if (animationFrameRef.current) {\n          cancelAnimationFrame(animationFrameRef.current);\n          animationFrameRef.current = null;\n        }\n      } else {\n        // Resume animation when tab becomes active\n        if (!animationFrameRef.current && isInitialized) {\n          lastTimestampRef.current = 0;\n          animationFrameRef.current = requestAnimationFrame(animate);\n        }\n      }\n    };\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    return () => {\n      reducedMotionQuery.removeEventListener('change', handleReducedMotionChange);\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n\n      // Clean up animation frame\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [detectCapabilities, isInitialized]);\n\n  // Initialize stars with proper properties\n  const initializeStars = useCallback(() => {\n    if (!dimensions.width || !dimensions.height) return;\n\n    // Clear existing stars\n    starsRef.current = [];\n\n    // Create stars\n    for (let i = 0; i < CONFIG.starCount; i++) {\n      const star = objectPoolsRef.current.stars.pop() || {};\n\n      // Position\n      star.x = Math.random() * dimensions.width;\n      star.y = Math.random() * dimensions.height;\n      star.z = Math.random() * 0.8 + 0.1; // Depth (0.1 to 0.9)\n\n      // Visual properties\n      star.size = (Math.random() * (CONFIG.starSizeMax - CONFIG.starSizeMin) + CONFIG.starSizeMin) * star.z;\n      star.baseOpacity = Math.random() * (CONFIG.starOpacityMax - CONFIG.starOpacityMin) + CONFIG.starOpacityMin;\n      star.opacity = star.baseOpacity;\n\n      // Animation properties\n      star.pulsePhase = Math.random() * Math.PI * 2;\n      star.pulseSpeed = Math.random() * 0.002 + 0.001;\n      star.movementSpeed = (Math.random() * 0.2 + 0.9) * CONFIG.baseMovementSpeed * (1.1 - star.z);\n\n      // Color variation\n      const colorIndex = Math.floor(Math.random() * COLORS.stars.length);\n      star.color = COLORS.stars[colorIndex];\n\n      // Store in ref\n      starsRef.current.push(star);\n    }\n  }, [dimensions, CONFIG, COLORS.stars]);\n\n  // Create a constellation with vertices and connections\n  const initializeConstellations = useCallback(() => {\n    if (!dimensions.width || !dimensions.height) return;\n\n    // Clear existing constellations\n    constellationsRef.current = [];\n\n    // Create constellations\n    for (let i = 0; i < CONFIG.constellationCount; i++) {\n      const constellation = {\n        vertices: [],\n        connections: [],\n        // Add pulse and movement properties\n        pulseFrequency: Math.random() * 0.00008 + 0.00004,\n        pulsePhase: Math.random() * Math.PI * 2,\n        movementSpeed: {\n          x: (Math.random() * 2 - 1) * CONFIG.baseMovementSpeed * 0.3,\n          y: (Math.random() * 2 - 1) * CONFIG.baseMovementSpeed * 0.3\n        },\n        lastPulseTime: 0,\n        isPulsing: false,\n        pulseProgress: 0,\n        nextPulseTime: Math.random() * 60000 + 15000 // 15-75 seconds\n      };\n\n      // Determine the number of vertices\n      const vertexCount = Math.floor(Math.random() * (CONFIG.verticesMax - CONFIG.verticesMin + 1)) + CONFIG.verticesMin;\n\n      // Position constellation in a subsection of the screen\n      const sectionWidth = dimensions.width * 0.8;\n      const sectionHeight = dimensions.height * 0.8;\n      const offsetX = dimensions.width * 0.1;\n      const offsetY = dimensions.height * 0.1;\n      const centerX = offsetX + Math.random() * sectionWidth;\n      const centerY = offsetY + Math.random() * sectionHeight;\n      const radius = Math.min(dimensions.width, dimensions.height) * (Math.random() * 0.1 + 0.05);\n\n      // Create vertices\n      for (let j = 0; j < vertexCount; j++) {\n        // Use polar coordinates for more natural constellation shapes\n        const angle = j / vertexCount * Math.PI * 2 + Math.random() * 0.5;\n        const distance = radius * (Math.random() * 0.5 + 0.5);\n        const vertex = objectPoolsRef.current.vertices.pop() || {};\n        vertex.x = centerX + Math.cos(angle) * distance;\n        vertex.y = centerY + Math.sin(angle) * distance;\n        vertex.size = Math.random() * 0.8 + 1.2;\n        vertex.baseOpacity = Math.random() * 0.3 + 0.2;\n        vertex.opacity = vertex.baseOpacity;\n        vertex.pulsePhase = Math.random() * Math.PI * 2;\n        constellation.vertices.push(vertex);\n      }\n\n      // Create connections (optimized approach to mimic constellations)\n      const kdTree = buildSimpleKdTree(constellation.vertices);\n      for (let j = 0; j < constellation.vertices.length; j++) {\n        const vertex = constellation.vertices[j];\n        const nearestNeighbors = findNearestNeighbors(kdTree, vertex, 2);\n        for (const neighbor of nearestNeighbors) {\n          if (neighbor !== vertex) {\n            const connection = objectPoolsRef.current.lines.pop() || {};\n            connection.from = vertex;\n            connection.to = neighbor;\n            connection.opacity = CONFIG.lineOpacity;\n            connection.baseOpacity = CONFIG.lineOpacity;\n            connection.width = CONFIG.lineWidth;\n\n            // Add connection if it doesn't already exist\n            const existingConnection = constellation.connections.find(c => c.from === vertex && c.to === neighbor || c.from === neighbor && c.to === vertex);\n            if (!existingConnection) {\n              constellation.connections.push(connection);\n            } else {\n              // Return unused connection to pool\n              objectPoolsRef.current.lines.push(connection);\n            }\n          }\n        }\n      }\n      constellationsRef.current.push(constellation);\n    }\n  }, [dimensions, CONFIG]);\n\n  // Simple KD-tree implementation for nearest neighbor search\n  const buildSimpleKdTree = useCallback(points => {\n    if (!points || points.length === 0) return null;\n    const tree = {\n      points: points,\n      dimensions: ['x', 'y']\n    };\n    return tree;\n  }, []);\n\n  // Find nearest neighbors using simple distance calculation\n  const findNearestNeighbors = useCallback((tree, point, count) => {\n    if (!tree || !tree.points || tree.points.length === 0) return [];\n    const distanceMap = tree.points.map(p => ({\n      point: p,\n      distance: Math.sqrt(Math.pow(p.x - point.x, 2) + Math.pow(p.y - point.y, 2))\n    }));\n    distanceMap.sort((a, b) => a.distance - b.distance);\n    return distanceMap.slice(0, count + 1).map(item => item.point);\n  }, []);\n\n  // Update star positions and properties\n  const updateStars = useCallback(deltaTime => {\n    // Skip if reduced motion is preferred\n    const motionFactor = prefersReducedMotion ? 0.2 : 1;\n\n    // Update global time factors\n    timeFactorRef.current += deltaTime * 0.001;\n    pulseTimeRef.current += deltaTime * CONFIG.pulseFrequency * motionFactor;\n\n    // Update stars\n    for (let i = 0; i < starsRef.current.length; i++) {\n      const star = starsRef.current[i];\n\n      // Update position (subtle movement)\n      star.x += Math.sin(timeFactorRef.current * 0.5 + star.pulsePhase) * star.movementSpeed * deltaTime * motionFactor;\n      star.y += Math.cos(timeFactorRef.current * 0.7 + star.pulsePhase * 1.3) * star.movementSpeed * deltaTime * motionFactor;\n\n      // Wrap around screen edges\n      if (star.x < -20) star.x = dimensions.width + 20;\n      if (star.x > dimensions.width + 20) star.x = -20;\n      if (star.y < -20) star.y = dimensions.height + 20;\n      if (star.y > dimensions.height + 20) star.y = -20;\n\n      // Apply pulsing effect (subtle brightness changes)\n      const pulseFactor = Math.sin(pulseTimeRef.current + star.pulsePhase) * 0.15 + 0.85;\n      star.opacity = star.baseOpacity * pulseFactor;\n    }\n  }, [dimensions, prefersReducedMotion, CONFIG.pulseFrequency]);\n\n  // Update constellation positions and pulsing effects\n  const updateConstellations = useCallback((deltaTime, timestamp) => {\n    // Skip if reduced motion is preferred\n    const motionFactor = prefersReducedMotion ? 0.2 : 1;\n    for (let i = 0; i < constellationsRef.current.length; i++) {\n      const constellation = constellationsRef.current[i];\n\n      // Check if it's time for a pulse\n      if (!constellation.isPulsing && timestamp > constellation.nextPulseTime) {\n        constellation.isPulsing = true;\n        constellation.pulseProgress = 0;\n        constellation.lastPulseTime = timestamp;\n      }\n\n      // Update pulse progress\n      if (constellation.isPulsing) {\n        constellation.pulseProgress += deltaTime * 0.001; // Convert to seconds\n\n        // Complete pulse after 1.5 seconds\n        if (constellation.pulseProgress >= 1.5) {\n          constellation.isPulsing = false;\n          constellation.pulseProgress = 0;\n          constellation.nextPulseTime = timestamp + Math.random() * 30000 + 15000; // 15-45 sec\n        }\n      }\n\n      // Calculate pulse effect - bell curve for smooth rise and fall\n      let pulseIntensity = 0;\n      if (constellation.isPulsing) {\n        // Normalized pulse progress (0-1)\n        const normalizedProgress = Math.min(1, constellation.pulseProgress / 1.5);\n\n        // Bell curve: rises then falls (4 * (x - 0.5)^2 flipped)\n        pulseIntensity = CONFIG.pulseIntensity * (1 - 4 * Math.pow(normalizedProgress - 0.5, 2));\n      }\n\n      // Update vertex positions with very subtle movement\n      for (let j = 0; j < constellation.vertices.length; j++) {\n        const vertex = constellation.vertices[j];\n\n        // Apply subtle drift\n        vertex.x += constellation.movementSpeed.x * deltaTime * motionFactor;\n        vertex.y += constellation.movementSpeed.y * deltaTime * motionFactor;\n\n        // Apply pulse effect to opacity\n        vertex.opacity = vertex.baseOpacity + pulseIntensity;\n      }\n\n      // Update line opacity based on pulse\n      for (let j = 0; j < constellation.connections.length; j++) {\n        const connection = constellation.connections[j];\n        connection.opacity = connection.baseOpacity + pulseIntensity * 0.3;\n      }\n\n      // Check if constellation moved too far and needs to be repositioned\n      let needsRepositioning = false;\n      const bounds = {\n        minX: Infinity,\n        maxX: -Infinity,\n        minY: Infinity,\n        maxY: -Infinity\n      };\n\n      // Calculate constellation bounds\n      for (let j = 0; j < constellation.vertices.length; j++) {\n        const vertex = constellation.vertices[j];\n        bounds.minX = Math.min(bounds.minX, vertex.x);\n        bounds.maxX = Math.max(bounds.maxX, vertex.x);\n        bounds.minY = Math.min(bounds.minY, vertex.y);\n        bounds.maxY = Math.max(bounds.maxY, vertex.y);\n      }\n\n      // Check if constellation is out of bounds\n      if (bounds.maxX < 0 || bounds.minX > dimensions.width || bounds.maxY < 0 || bounds.minY > dimensions.height) {\n        needsRepositioning = true;\n      }\n\n      // Reposition constellation if needed\n      if (needsRepositioning) {\n        // Calculate center point\n        const centerX = (bounds.minX + bounds.maxX) / 2;\n        const centerY = (bounds.minY + bounds.maxY) / 2;\n\n        // Calculate new position (opposite side of screen)\n        let newX = dimensions.width - centerX;\n        let newY = dimensions.height - centerY;\n        if (centerX < 0) newX = dimensions.width + Math.abs(centerX);\n        if (centerX > dimensions.width) newX = -Math.abs(centerX - dimensions.width);\n        if (centerY < 0) newY = dimensions.height + Math.abs(centerY);\n        if (centerY > dimensions.height) newY = -Math.abs(centerY - dimensions.height);\n\n        // Calculate offset\n        const offsetX = newX - centerX;\n        const offsetY = newY - centerY;\n\n        // Apply offset to all vertices\n        for (let j = 0; j < constellation.vertices.length; j++) {\n          const vertex = constellation.vertices[j];\n          vertex.x += offsetX;\n          vertex.y += offsetY;\n        }\n\n        // Reverse movement direction\n        constellation.movementSpeed.x *= -1;\n        constellation.movementSpeed.y *= -1;\n      }\n    }\n  }, [dimensions, prefersReducedMotion, CONFIG.pulseIntensity]);\n\n  // Render stars with optimized canvas operations\n  const renderStars = useCallback(() => {\n    const ctx = ctxRef.current;\n    if (!ctx) return;\n    for (let i = 0; i < starsRef.current.length; i++) {\n      const star = starsRef.current[i];\n\n      // Skip almost invisible stars\n      if (star.opacity < 0.02) continue;\n\n      // Optimized star rendering\n      if (CONFIG.useHighQualityRendering && CONFIG.useGlow) {\n        // High-quality rendering with glow\n        ctx.save();\n\n        // Draw glow (larger radius with blur)\n        ctx.beginPath();\n        ctx.arc(star.x, star.y, star.size * 1.8, 0, Math.PI * 2);\n        ctx.fillStyle = getCachedColor(star.color, star.opacity * 0.3);\n        ctx.shadowColor = getCachedColor(star.color, star.opacity * 0.5);\n        ctx.shadowBlur = star.size * 3;\n        ctx.fill();\n\n        // Draw core\n        ctx.beginPath();\n        ctx.arc(star.x, star.y, star.size * 0.7, 0, Math.PI * 2);\n        ctx.fillStyle = getCachedColor(star.color, star.opacity);\n        ctx.fill();\n        ctx.restore();\n      } else {\n        // Simplified rendering for performance\n        ctx.beginPath();\n        ctx.arc(star.x, star.y, star.size, 0, Math.PI * 2);\n        ctx.fillStyle = getCachedColor(star.color, star.opacity);\n        ctx.fill();\n      }\n    }\n  }, [CONFIG.useHighQualityRendering, CONFIG.useGlow, getCachedColor]);\n\n  // Render constellations with optimized canvas operations\n  const renderConstellations = useCallback(() => {\n    const ctx = ctxRef.current;\n    if (!ctx) return;\n    for (let i = 0; i < constellationsRef.current.length; i++) {\n      const constellation = constellationsRef.current[i];\n\n      // First render connections\n      for (let j = 0; j < constellation.connections.length; j++) {\n        const connection = constellation.connections[j];\n\n        // Skip almost invisible connections\n        if (connection.opacity < 0.02) continue;\n        ctx.beginPath();\n        ctx.moveTo(connection.from.x, connection.from.y);\n        ctx.lineTo(connection.to.x, connection.to.y);\n        if (CONFIG.useHighQualityRendering) {\n          ctx.strokeStyle = getCachedColor(COLORS.constellations.lines, connection.opacity);\n          ctx.lineWidth = connection.width;\n          if (CONFIG.useGlow && connection.opacity > 0.2) {\n            ctx.shadowColor = getCachedColor(COLORS.constellations.pulseColor, connection.opacity * 0.6);\n            ctx.shadowBlur = 4;\n          }\n        } else {\n          ctx.strokeStyle = getCachedColor(COLORS.constellations.lines, connection.opacity);\n          ctx.lineWidth = connection.width;\n        }\n        ctx.stroke();\n\n        // Reset shadow for performance\n        if (CONFIG.useGlow) {\n          ctx.shadowBlur = 0;\n        }\n      }\n\n      // Then render vertices\n      for (let j = 0; j < constellation.vertices.length; j++) {\n        const vertex = constellation.vertices[j];\n\n        // Skip almost invisible vertices\n        if (vertex.opacity < 0.02) continue;\n        if (CONFIG.useHighQualityRendering) {\n          ctx.save();\n\n          // Draw glow\n          if (CONFIG.useGlow) {\n            ctx.beginPath();\n            ctx.arc(vertex.x, vertex.y, vertex.size * 2, 0, Math.PI * 2);\n            ctx.fillStyle = getCachedColor(COLORS.constellations.vertexColor, vertex.opacity * 0.3);\n            ctx.shadowColor = getCachedColor(COLORS.constellations.vertexColor, vertex.opacity * 0.5);\n            ctx.shadowBlur = vertex.size * 3;\n            ctx.fill();\n          }\n\n          // Draw vertex\n          ctx.beginPath();\n          ctx.arc(vertex.x, vertex.y, vertex.size * 0.8, 0, Math.PI * 2);\n          ctx.fillStyle = getCachedColor(COLORS.constellations.vertexColor, vertex.opacity * 0.9);\n          ctx.fill();\n          ctx.restore();\n        } else {\n          // Simplified rendering\n          ctx.beginPath();\n          ctx.arc(vertex.x, vertex.y, vertex.size, 0, Math.PI * 2);\n          ctx.fillStyle = getCachedColor(COLORS.constellations.vertexColor, vertex.opacity);\n          ctx.fill();\n        }\n      }\n    }\n  }, [CONFIG.useHighQualityRendering, CONFIG.useGlow, COLORS.constellations, getCachedColor]);\n\n  // FPS limiter for consistent animation speed\n  const fpsLimiter = useCallback((timestamp, callback) => {\n    // Skip animation if hidden, not active, or reduced motion\n    if (!isVisible || document.hidden) {\n      animationFrameRef.current = requestAnimationFrame(time => fpsLimiter(time, callback));\n      return;\n    }\n    const targetFrameTime = 1000 / CONFIG.maxFPS;\n    const elapsed = timestamp - lastTimestampRef.current;\n    if (elapsed >= targetFrameTime || lastTimestampRef.current === 0) {\n      // Calculate delta - cap to avoid jumps after tab switch\n      const delta = lastTimestampRef.current === 0 ? 16 : Math.min(elapsed, 50);\n\n      // Update timestamp\n      lastTimestampRef.current = timestamp - elapsed % targetFrameTime;\n\n      // Run animation with capped delta\n      callback(delta, timestamp);\n\n      // FPS tracking\n      frameCountRef.current++;\n      if (timestamp - fpsTimestampRef.current >= 1000) {\n        currentFpsRef.current = frameCountRef.current;\n        frameCountRef.current = 0;\n        fpsTimestampRef.current = timestamp;\n      }\n    }\n\n    // Schedule next frame\n    animationFrameRef.current = requestAnimationFrame(time => fpsLimiter(time, callback));\n  }, [isVisible, CONFIG.maxFPS]);\n\n  // Main animation handler\n  const animate = useCallback(timestamp => {\n    if (!canvasRef.current || !ctxRef.current || !isInitialized) return;\n    const ctx = ctxRef.current;\n\n    // Clear canvas\n    ctx.clearRect(0, 0, dimensions.width, dimensions.height);\n\n    // Draw background gradient\n    const gradient = ctx.createLinearGradient(0, 0, 0, dimensions.height);\n    gradient.addColorStop(0, COLORS.background.topColor);\n    gradient.addColorStop(1, COLORS.background.bottomColor);\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, dimensions.width, dimensions.height);\n\n    // Update elements\n    updateStars(timestamp - lastTimestampRef.current);\n    updateConstellations(timestamp - lastTimestampRef.current, timestamp);\n\n    // Render elements\n    renderStars();\n    renderConstellations();\n  }, [dimensions, isInitialized, COLORS.background, updateStars, updateConstellations, renderStars, renderConstellations]);\n\n  // Initialize animation when component is ready\n  useEffect(() => {\n    if (!isInitialized && dimensions.width && dimensions.height) {\n      initializeStars();\n      initializeConstellations();\n      setIsInitialized(true);\n    }\n  }, [dimensions, isInitialized, initializeStars, initializeConstellations]);\n\n  // Start animation loop\n  useEffect(() => {\n    if (!isInitialized) return;\n\n    // Reset animation state\n    lastTimestampRef.current = 0;\n    fpsTimestampRef.current = performance.now();\n    frameCountRef.current = 0;\n\n    // Start animation with FPS limiter\n    animationFrameRef.current = requestAnimationFrame(timestamp => {\n      fpsLimiter(timestamp, animate);\n    });\n\n    // Cleanup\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [isInitialized, fpsLimiter, animate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    style: {\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%',\n      overflow: 'hidden',\n      zIndex: -1,\n      pointerEvents: 'none',\n      // Hardware acceleration\n      backfaceVisibility: 'hidden',\n      transform: 'translateZ(0)',\n      willChange: 'transform'\n    },\n    \"aria-hidden\": \"true\",\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        // Hardware acceleration\n        backfaceVisibility: 'hidden',\n        transform: 'translateZ(0)',\n        willChange: 'transform'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 900,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 882,\n    columnNumber: 5\n  }, this);\n};\n_s(Background, \"3xRwJPzmC+jytHElCf3VWEUt+MM=\");\n_c = Background;\nexport default Background;\nvar _c;\n$RefreshReg$(_c, \"Background\");","map":{"version":3,"names":["React","useRef","useState","useEffect","useCallback","useMemo","jsxDEV","_jsxDEV","Background","_s","containerRef","canvasRef","ctxRef","starsRef","constellationsRef","animationFrameRef","resizeObserverRef","visibilityObserverRef","lastTimestampRef","fpsTimestampRef","frameCountRef","currentFpsRef","timeFactorRef","pulseTimeRef","dimensions","setDimensions","width","height","pixelRatio","isInitialized","setIsInitialized","isVisible","setIsVisible","prefersReducedMotion","setPrefersReducedMotion","deviceCapabilities","setDeviceCapabilities","memory","cores","isMobile","batteryLevel","qualityFactor","setQualityFactor","CONFIG","baseConfig","starCount","starSizeMin","starSizeMax","starOpacityMin","starOpacityMax","starColorVariation","baseMovementSpeed","pulseFrequency","pulseIntensity","constellationCount","verticesMin","verticesMax","lineOpacity","lineWidth","maxFPS","useHighQualityRendering","useGlow","Math","floor","COLORS","stars","constellations","lines","pulseColor","vertexColor","background","topColor","bottomColor","pointCache","temp","x","y","current","colorCacheRef","Map","objectPoolsRef","vertices","getCachedColor","baseColor","opacity","safeOpacity","max","min","roundedOpacity","round","key","has","newColor","replace","set","get","detectCapabilities","navigator","deviceMemory","hardwareConcurrency","test","userAgent","getBattery","then","battery","prev","level","isCharging","charging","catch","performanceScore","quality","setupCanvas","canvas","container","rect","getBoundingClientRect","window","devicePixelRatio","displayWidth","displayHeight","style","ctx","getContext","alpha","desynchronized","willReadFrequently","scale","imageSmoothingEnabled","imageSmoothingQuality","resizeObserver","ResizeObserver","entries","timeout","clearTimeout","setTimeout","requestAnimationFrame","initializeStars","initializeConstellations","currentContainer","observe","observer","disconnect","IntersectionObserver","isIntersecting","threshold","rootMargin","reducedMotionQuery","matchMedia","matches","handleReducedMotionChange","e","addEventListener","handleVisibilityChange","document","hidden","cancelAnimationFrame","animate","removeEventListener","i","star","pop","random","z","size","baseOpacity","pulsePhase","PI","pulseSpeed","movementSpeed","colorIndex","length","color","push","constellation","connections","lastPulseTime","isPulsing","pulseProgress","nextPulseTime","vertexCount","sectionWidth","sectionHeight","offsetX","offsetY","centerX","centerY","radius","j","angle","distance","vertex","cos","sin","kdTree","buildSimpleKdTree","nearestNeighbors","findNearestNeighbors","neighbor","connection","from","to","existingConnection","find","c","points","tree","point","count","distanceMap","map","p","sqrt","pow","sort","a","b","slice","item","updateStars","deltaTime","motionFactor","pulseFactor","updateConstellations","timestamp","normalizedProgress","needsRepositioning","bounds","minX","Infinity","maxX","minY","maxY","newX","newY","abs","renderStars","save","beginPath","arc","fillStyle","shadowColor","shadowBlur","fill","restore","renderConstellations","moveTo","lineTo","strokeStyle","stroke","fpsLimiter","callback","time","targetFrameTime","elapsed","delta","clearRect","gradient","createLinearGradient","addColorStop","fillRect","performance","now","ref","position","top","left","overflow","zIndex","pointerEvents","backfaceVisibility","transform","willChange","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/valeria/Documents/Crucible/frontend/src/components/core/Background.jsx"],"sourcesContent":["import React, { useRef, useState, useEffect, useCallback, useMemo } from 'react';\n\n/**\n * Background Component - Enterprise Performance Optimized\n * \n * Creates a beautiful, subtle animated stellar background with constellations\n * and star particles that provide depth without distracting from content.\n * \n * Features:\n * - Performant canvas-based rendering with adaptive quality\n * - Subtle constellation animations with occasional pulsing\n * - Independent motion not tied to cursor position\n * - Memory-efficient rendering with object pooling\n * - Accessibility compliance with reduced motion support\n * - Hardware acceleration and high-DPI display support\n */\nconst Background = () => {\n  // Refs for DOM elements and animation state\n  const containerRef = useRef(null);\n  const canvasRef = useRef(null);\n  const ctxRef = useRef(null);\n  const starsRef = useRef([]);\n  const constellationsRef = useRef([]);\n  const animationFrameRef = useRef(null);\n  const resizeObserverRef = useRef(null);\n  const visibilityObserverRef = useRef(null);\n  const lastTimestampRef = useRef(0);\n  const fpsTimestampRef = useRef(0);\n  const frameCountRef = useRef(0);\n  const currentFpsRef = useRef(60);\n  const timeFactorRef = useRef(0);\n  const pulseTimeRef = useRef(0);\n  \n  // Component state\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0, pixelRatio: 1 });\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [isVisible, setIsVisible] = useState(true);\n  const [prefersReducedMotion, setPrefersReducedMotion] = useState(false);\n  const [deviceCapabilities, setDeviceCapabilities] = useState({\n    memory: 4,\n    cores: 4,\n    isMobile: false,\n    batteryLevel: 1\n  });\n  const [qualityFactor, setQualityFactor] = useState(1);\n  \n  // Configuration constants with adaptive quality\n  const CONFIG = useMemo(() => {\n    // Base configuration\n    const baseConfig = {\n      // Star parameters\n      starCount: 120,\n      starSizeMin: 1,\n      starSizeMax: 3,\n      starOpacityMin: 0.15,\n      starOpacityMax: 0.85,\n      starColorVariation: 0.12,\n      \n      // Motion and animation\n      baseMovementSpeed: 0.0008,\n      pulseFrequency: 0.00012,\n      pulseIntensity: 0.4,\n      \n      // Constellation parameters\n      constellationCount: 5,\n      verticesMin: 4,\n      verticesMax: 8,\n      lineOpacity: 0.1,\n      lineWidth: 0.5,\n      \n      // Performance parameters\n      maxFPS: 30,\n      useHighQualityRendering: true,\n      useGlow: true\n    };\n    \n    // Apply quality adjustments\n    if (qualityFactor < 1) {\n      return {\n        ...baseConfig,\n        starCount: Math.floor(baseConfig.starCount * qualityFactor),\n        constellationCount: Math.floor(baseConfig.constellationCount * qualityFactor),\n        useHighQualityRendering: qualityFactor > 0.7,\n        useGlow: qualityFactor > 0.5,\n        maxFPS: qualityFactor > 0.5 ? 30 : 24\n      };\n    }\n    \n    return baseConfig;\n  }, [qualityFactor]);\n  \n  // Color configurations with pre-defined palette\n  const COLORS = useMemo(() => ({\n    // Main star colors\n    stars: [\n      'rgba(224, 224, 255, alpha)', // Cool white\n      'rgba(240, 240, 255, alpha)', // Bright white\n      'rgba(213, 224, 255, alpha)', // Slightly blue\n      'rgba(255, 225, 205, alpha)', // Warm white (slight orange)\n      'rgba(197, 214, 255, alpha)'  // Pale blue\n    ],\n    \n    // Constellation effect colors\n    constellations: {\n      lines: 'rgba(160, 142, 97, alpha)',\n      pulseColor: 'rgba(191, 173, 127, alpha)',\n      vertexColor: 'rgba(191, 173, 127, alpha)'\n    },\n    \n    // Background gradient colors\n    background: {\n      topColor: 'rgb(8, 8, 12)',\n      bottomColor: 'rgb(15, 15, 20)'\n    }\n  }), []);\n  \n  // Pre-allocate objects to avoid garbage collection during animation\n  const pointCache = useRef({\n    temp: { x: 0, y: 0 }\n  }).current;\n  \n  // Cached color variants to avoid string operations during animation\n  const colorCacheRef = useRef(new Map());\n  \n  // Object pools for efficient memory usage\n  const objectPoolsRef = useRef({\n    stars: [],\n    vertices: [],\n    lines: []\n  });\n  \n  // Get cached color with opacity\n  const getCachedColor = useCallback((baseColor, opacity) => {\n    // Ensure opacity is valid to prevent rendering glitches\n    const safeOpacity = Math.max(0, Math.min(1, opacity || 0));\n    \n    // Round opacity to reduce cache size while maintaining visual quality\n    const roundedOpacity = Math.round(safeOpacity * 100) / 100;\n    const key = `${baseColor}-${roundedOpacity}`;\n    \n    if (!colorCacheRef.current.has(key)) {\n      const newColor = baseColor.replace(/alpha\\)$/, `${roundedOpacity})`);\n      colorCacheRef.current.set(key, newColor);\n    }\n    \n    return colorCacheRef.current.get(key);\n  }, []);\n  \n  // Detect device capabilities and set up optimization strategies\n  const detectCapabilities = useCallback(() => {\n    // Device detection\n    const memory = navigator.deviceMemory || 4;\n    const cores = navigator.hardwareConcurrency || 4;\n    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n    \n    // Get battery info if available\n    if (navigator.getBattery) {\n      navigator.getBattery().then(battery => {\n        setDeviceCapabilities(prev => ({\n          ...prev,\n          batteryLevel: battery.level,\n          isCharging: battery.charging\n        }));\n        \n        // Reduce quality if on battery and below 30%\n        if (!battery.charging && battery.level < 0.3) {\n          setQualityFactor(prev => Math.min(prev, 0.6));\n        }\n      }).catch(() => {\n        // Fallback if battery API is not available\n        setDeviceCapabilities(prev => ({\n          ...prev,\n          batteryLevel: 1,\n          isCharging: true\n        }));\n      });\n    }\n    \n    // Set device capabilities state\n    setDeviceCapabilities({\n      memory,\n      cores,\n      batteryLevel: 1,\n      isCharging: true,\n      isMobile\n    });\n    \n    // Calculate quality factor based on capabilities\n    const performanceScore = (memory * cores) / (isMobile ? 2 : 1);\n    \n    // Scale quality based on performance score\n    let quality = 1;\n    \n    if (performanceScore > 16) {\n      quality = 1; // High-end devices\n    } else if (performanceScore > 8) {\n      quality = 0.8; // Mid-range devices\n    } else if (performanceScore > 4) {\n      quality = 0.6; // Low-end devices\n    } else {\n      quality = 0.4; // Very low-end devices\n    }\n    \n    setQualityFactor(quality);\n  }, []);\n  \n  // Initialize canvas with proper resolution\n  const setupCanvas = useCallback(() => {\n    if (!canvasRef.current || !containerRef.current) return false;\n    \n    const canvas = canvasRef.current;\n    const container = containerRef.current;\n    const rect = container.getBoundingClientRect();\n    const pixelRatio = window.devicePixelRatio || 1;\n    \n    // Calculate dimensions - ensuring valid integers\n    const displayWidth = Math.floor(rect.width);\n    const displayHeight = Math.floor(rect.height);\n    \n    // Set canvas size accounting for pixel ratio\n    canvas.width = displayWidth * pixelRatio;\n    canvas.height = displayHeight * pixelRatio;\n    canvas.style.width = `${displayWidth}px`;\n    canvas.style.height = `${displayHeight}px`;\n    \n    // Get 2D context\n    const ctx = canvas.getContext('2d', {\n      alpha: true,\n      desynchronized: true,\n      willReadFrequently: false\n    });\n    \n    if (!ctx) return false;\n    \n    // Scale context for high-DPI displays\n    ctx.scale(pixelRatio, pixelRatio);\n    \n    // Configure context for quality rendering\n    if (CONFIG.useHighQualityRendering) {\n      ctx.imageSmoothingEnabled = true;\n      ctx.imageSmoothingQuality = 'high';\n    }\n    \n    ctxRef.current = ctx;\n    \n    // Update dimensions state\n    setDimensions({\n      width: displayWidth,\n      height: displayHeight,\n      pixelRatio\n    });\n    \n    return true;\n  }, [CONFIG.useHighQualityRendering]);\n  \n  // Setup canvas resize observer\n  useEffect(() => {\n    if (!containerRef.current) return;\n    \n    // Create ResizeObserver to detect container size changes\n    const resizeObserver = new ResizeObserver(entries => {\n      // Debounce resize operations\n      if (resizeObserverRef.current.timeout) {\n        clearTimeout(resizeObserverRef.current.timeout);\n      }\n      \n      resizeObserverRef.current.timeout = setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (setupCanvas()) {\n            // Reinitialize stars and constellations after resize\n            initializeStars();\n            initializeConstellations();\n            setIsInitialized(true);\n          }\n        });\n      }, 100); // 100ms debounce\n    });\n    \n    // Store references for cleanup\n    const currentContainer = containerRef.current;\n    \n    // Start observing\n    resizeObserver.observe(currentContainer);\n    resizeObserverRef.current = { observer: resizeObserver };\n    \n    // Initial setup\n    setupCanvas();\n    \n    return () => {\n      if (resizeObserverRef.current.observer) {\n        resizeObserverRef.current.observer.disconnect();\n      }\n      if (resizeObserverRef.current.timeout) {\n        clearTimeout(resizeObserverRef.current.timeout);\n      }\n    };\n  }, [setupCanvas]);\n  \n  // Setup intersection observer to only animate when visible\n  useEffect(() => {\n    if (!containerRef.current) return;\n    \n    const observer = new IntersectionObserver(\n      entries => {\n        setIsVisible(entries[0].isIntersecting);\n      },\n      {\n        threshold: 0.01,\n        rootMargin: '100px'\n      }\n    );\n    \n    const currentContainer = containerRef.current;\n    observer.observe(currentContainer);\n    visibilityObserverRef.current = observer;\n    \n    return () => {\n      if (visibilityObserverRef.current) {\n        visibilityObserverRef.current.disconnect();\n      }\n    };\n  }, []);\n  \n  // Detect reduced motion preference\n  useEffect(() => {\n    const reducedMotionQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\n    setPrefersReducedMotion(reducedMotionQuery.matches);\n    \n    const handleReducedMotionChange = (e) => {\n      setPrefersReducedMotion(e.matches);\n    };\n    \n    reducedMotionQuery.addEventListener('change', handleReducedMotionChange);\n    \n    // Detect device capabilities\n    detectCapabilities();\n    \n    // Setup visibility change detection\n    const handleVisibilityChange = () => {\n      if (document.hidden) {\n        // Pause when tab is inactive\n        if (animationFrameRef.current) {\n          cancelAnimationFrame(animationFrameRef.current);\n          animationFrameRef.current = null;\n        }\n      } else {\n        // Resume animation when tab becomes active\n        if (!animationFrameRef.current && isInitialized) {\n          lastTimestampRef.current = 0;\n          animationFrameRef.current = requestAnimationFrame(animate);\n        }\n      }\n    };\n    \n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    \n    return () => {\n      reducedMotionQuery.removeEventListener('change', handleReducedMotionChange);\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n      \n      // Clean up animation frame\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [detectCapabilities, isInitialized]);\n  \n  // Initialize stars with proper properties\n  const initializeStars = useCallback(() => {\n    if (!dimensions.width || !dimensions.height) return;\n    \n    // Clear existing stars\n    starsRef.current = [];\n    \n    // Create stars\n    for (let i = 0; i < CONFIG.starCount; i++) {\n      const star = objectPoolsRef.current.stars.pop() || {};\n      \n      // Position\n      star.x = Math.random() * dimensions.width;\n      star.y = Math.random() * dimensions.height;\n      star.z = Math.random() * 0.8 + 0.1; // Depth (0.1 to 0.9)\n      \n      // Visual properties\n      star.size = (Math.random() * (CONFIG.starSizeMax - CONFIG.starSizeMin) + CONFIG.starSizeMin) * star.z;\n      star.baseOpacity = Math.random() * (CONFIG.starOpacityMax - CONFIG.starOpacityMin) + CONFIG.starOpacityMin;\n      star.opacity = star.baseOpacity;\n      \n      // Animation properties\n      star.pulsePhase = Math.random() * Math.PI * 2;\n      star.pulseSpeed = Math.random() * 0.002 + 0.001;\n      star.movementSpeed = (Math.random() * 0.2 + 0.9) * CONFIG.baseMovementSpeed * (1.1 - star.z);\n      \n      // Color variation\n      const colorIndex = Math.floor(Math.random() * COLORS.stars.length);\n      star.color = COLORS.stars[colorIndex];\n      \n      // Store in ref\n      starsRef.current.push(star);\n    }\n  }, [dimensions, CONFIG, COLORS.stars]);\n  \n  // Create a constellation with vertices and connections\n  const initializeConstellations = useCallback(() => {\n    if (!dimensions.width || !dimensions.height) return;\n    \n    // Clear existing constellations\n    constellationsRef.current = [];\n    \n    // Create constellations\n    for (let i = 0; i < CONFIG.constellationCount; i++) {\n      const constellation = {\n        vertices: [],\n        connections: [],\n        // Add pulse and movement properties\n        pulseFrequency: Math.random() * 0.00008 + 0.00004,\n        pulsePhase: Math.random() * Math.PI * 2,\n        movementSpeed: {\n          x: (Math.random() * 2 - 1) * CONFIG.baseMovementSpeed * 0.3,\n          y: (Math.random() * 2 - 1) * CONFIG.baseMovementSpeed * 0.3\n        },\n        lastPulseTime: 0,\n        isPulsing: false,\n        pulseProgress: 0,\n        nextPulseTime: Math.random() * 60000 + 15000 // 15-75 seconds\n      };\n      \n      // Determine the number of vertices\n      const vertexCount = Math.floor(Math.random() * (CONFIG.verticesMax - CONFIG.verticesMin + 1)) + CONFIG.verticesMin;\n      \n      // Position constellation in a subsection of the screen\n      const sectionWidth = dimensions.width * 0.8;\n      const sectionHeight = dimensions.height * 0.8;\n      const offsetX = dimensions.width * 0.1;\n      const offsetY = dimensions.height * 0.1;\n      \n      const centerX = offsetX + Math.random() * sectionWidth;\n      const centerY = offsetY + Math.random() * sectionHeight;\n      const radius = Math.min(dimensions.width, dimensions.height) * (Math.random() * 0.1 + 0.05);\n      \n      // Create vertices\n      for (let j = 0; j < vertexCount; j++) {\n        // Use polar coordinates for more natural constellation shapes\n        const angle = (j / vertexCount) * Math.PI * 2 + Math.random() * 0.5;\n        const distance = radius * (Math.random() * 0.5 + 0.5);\n        \n        const vertex = objectPoolsRef.current.vertices.pop() || {};\n        vertex.x = centerX + Math.cos(angle) * distance;\n        vertex.y = centerY + Math.sin(angle) * distance;\n        vertex.size = Math.random() * 0.8 + 1.2;\n        vertex.baseOpacity = Math.random() * 0.3 + 0.2;\n        vertex.opacity = vertex.baseOpacity;\n        vertex.pulsePhase = Math.random() * Math.PI * 2;\n        \n        constellation.vertices.push(vertex);\n      }\n      \n      // Create connections (optimized approach to mimic constellations)\n      const kdTree = buildSimpleKdTree(constellation.vertices);\n      \n      for (let j = 0; j < constellation.vertices.length; j++) {\n        const vertex = constellation.vertices[j];\n        const nearestNeighbors = findNearestNeighbors(kdTree, vertex, 2);\n        \n        for (const neighbor of nearestNeighbors) {\n          if (neighbor !== vertex) {\n            const connection = objectPoolsRef.current.lines.pop() || {};\n            connection.from = vertex;\n            connection.to = neighbor;\n            connection.opacity = CONFIG.lineOpacity;\n            connection.baseOpacity = CONFIG.lineOpacity;\n            connection.width = CONFIG.lineWidth;\n            \n            // Add connection if it doesn't already exist\n            const existingConnection = constellation.connections.find(\n              c => (c.from === vertex && c.to === neighbor) || (c.from === neighbor && c.to === vertex)\n            );\n            \n            if (!existingConnection) {\n              constellation.connections.push(connection);\n            } else {\n              // Return unused connection to pool\n              objectPoolsRef.current.lines.push(connection);\n            }\n          }\n        }\n      }\n      \n      constellationsRef.current.push(constellation);\n    }\n  }, [dimensions, CONFIG]);\n  \n  // Simple KD-tree implementation for nearest neighbor search\n  const buildSimpleKdTree = useCallback((points) => {\n    if (!points || points.length === 0) return null;\n    \n    const tree = {\n      points: points,\n      dimensions: ['x', 'y']\n    };\n    \n    return tree;\n  }, []);\n  \n  // Find nearest neighbors using simple distance calculation\n  const findNearestNeighbors = useCallback((tree, point, count) => {\n    if (!tree || !tree.points || tree.points.length === 0) return [];\n    \n    const distanceMap = tree.points.map(p => ({\n      point: p,\n      distance: Math.sqrt(Math.pow(p.x - point.x, 2) + Math.pow(p.y - point.y, 2))\n    }));\n    \n    distanceMap.sort((a, b) => a.distance - b.distance);\n    \n    return distanceMap.slice(0, count + 1).map(item => item.point);\n  }, []);\n  \n  // Update star positions and properties\n  const updateStars = useCallback((deltaTime) => {\n    // Skip if reduced motion is preferred\n    const motionFactor = prefersReducedMotion ? 0.2 : 1;\n    \n    // Update global time factors\n    timeFactorRef.current += deltaTime * 0.001;\n    pulseTimeRef.current += deltaTime * CONFIG.pulseFrequency * motionFactor;\n    \n    // Update stars\n    for (let i = 0; i < starsRef.current.length; i++) {\n      const star = starsRef.current[i];\n      \n      // Update position (subtle movement)\n      star.x += Math.sin(timeFactorRef.current * 0.5 + star.pulsePhase) * star.movementSpeed * deltaTime * motionFactor;\n      star.y += Math.cos(timeFactorRef.current * 0.7 + star.pulsePhase * 1.3) * star.movementSpeed * deltaTime * motionFactor;\n      \n      // Wrap around screen edges\n      if (star.x < -20) star.x = dimensions.width + 20;\n      if (star.x > dimensions.width + 20) star.x = -20;\n      if (star.y < -20) star.y = dimensions.height + 20;\n      if (star.y > dimensions.height + 20) star.y = -20;\n      \n      // Apply pulsing effect (subtle brightness changes)\n      const pulseFactor = Math.sin(pulseTimeRef.current + star.pulsePhase) * 0.15 + 0.85;\n      star.opacity = star.baseOpacity * pulseFactor;\n    }\n  }, [dimensions, prefersReducedMotion, CONFIG.pulseFrequency]);\n  \n  // Update constellation positions and pulsing effects\n  const updateConstellations = useCallback((deltaTime, timestamp) => {\n    // Skip if reduced motion is preferred\n    const motionFactor = prefersReducedMotion ? 0.2 : 1;\n    \n    for (let i = 0; i < constellationsRef.current.length; i++) {\n      const constellation = constellationsRef.current[i];\n      \n      // Check if it's time for a pulse\n      if (!constellation.isPulsing && timestamp > constellation.nextPulseTime) {\n        constellation.isPulsing = true;\n        constellation.pulseProgress = 0;\n        constellation.lastPulseTime = timestamp;\n      }\n      \n      // Update pulse progress\n      if (constellation.isPulsing) {\n        constellation.pulseProgress += deltaTime * 0.001; // Convert to seconds\n        \n        // Complete pulse after 1.5 seconds\n        if (constellation.pulseProgress >= 1.5) {\n          constellation.isPulsing = false;\n          constellation.pulseProgress = 0;\n          constellation.nextPulseTime = timestamp + Math.random() * 30000 + 15000; // 15-45 sec\n        }\n      }\n      \n      // Calculate pulse effect - bell curve for smooth rise and fall\n      let pulseIntensity = 0;\n      if (constellation.isPulsing) {\n        // Normalized pulse progress (0-1)\n        const normalizedProgress = Math.min(1, constellation.pulseProgress / 1.5);\n        \n        // Bell curve: rises then falls (4 * (x - 0.5)^2 flipped)\n        pulseIntensity = CONFIG.pulseIntensity * (1 - 4 * Math.pow(normalizedProgress - 0.5, 2));\n      }\n      \n      // Update vertex positions with very subtle movement\n      for (let j = 0; j < constellation.vertices.length; j++) {\n        const vertex = constellation.vertices[j];\n        \n        // Apply subtle drift\n        vertex.x += constellation.movementSpeed.x * deltaTime * motionFactor;\n        vertex.y += constellation.movementSpeed.y * deltaTime * motionFactor;\n        \n        // Apply pulse effect to opacity\n        vertex.opacity = vertex.baseOpacity + pulseIntensity;\n      }\n      \n      // Update line opacity based on pulse\n      for (let j = 0; j < constellation.connections.length; j++) {\n        const connection = constellation.connections[j];\n        connection.opacity = connection.baseOpacity + pulseIntensity * 0.3;\n      }\n      \n      // Check if constellation moved too far and needs to be repositioned\n      let needsRepositioning = false;\n      const bounds = {\n        minX: Infinity, maxX: -Infinity,\n        minY: Infinity, maxY: -Infinity\n      };\n      \n      // Calculate constellation bounds\n      for (let j = 0; j < constellation.vertices.length; j++) {\n        const vertex = constellation.vertices[j];\n        bounds.minX = Math.min(bounds.minX, vertex.x);\n        bounds.maxX = Math.max(bounds.maxX, vertex.x);\n        bounds.minY = Math.min(bounds.minY, vertex.y);\n        bounds.maxY = Math.max(bounds.maxY, vertex.y);\n      }\n      \n      // Check if constellation is out of bounds\n      if (bounds.maxX < 0 || bounds.minX > dimensions.width || \n          bounds.maxY < 0 || bounds.minY > dimensions.height) {\n        needsRepositioning = true;\n      }\n      \n      // Reposition constellation if needed\n      if (needsRepositioning) {\n        // Calculate center point\n        const centerX = (bounds.minX + bounds.maxX) / 2;\n        const centerY = (bounds.minY + bounds.maxY) / 2;\n        \n        // Calculate new position (opposite side of screen)\n        let newX = dimensions.width - centerX;\n        let newY = dimensions.height - centerY;\n        \n        if (centerX < 0) newX = dimensions.width + Math.abs(centerX);\n        if (centerX > dimensions.width) newX = -Math.abs(centerX - dimensions.width);\n        if (centerY < 0) newY = dimensions.height + Math.abs(centerY);\n        if (centerY > dimensions.height) newY = -Math.abs(centerY - dimensions.height);\n        \n        // Calculate offset\n        const offsetX = newX - centerX;\n        const offsetY = newY - centerY;\n        \n        // Apply offset to all vertices\n        for (let j = 0; j < constellation.vertices.length; j++) {\n          const vertex = constellation.vertices[j];\n          vertex.x += offsetX;\n          vertex.y += offsetY;\n        }\n        \n        // Reverse movement direction\n        constellation.movementSpeed.x *= -1;\n        constellation.movementSpeed.y *= -1;\n      }\n    }\n  }, [dimensions, prefersReducedMotion, CONFIG.pulseIntensity]);\n  \n  // Render stars with optimized canvas operations\n  const renderStars = useCallback(() => {\n    const ctx = ctxRef.current;\n    if (!ctx) return;\n    \n    for (let i = 0; i < starsRef.current.length; i++) {\n      const star = starsRef.current[i];\n      \n      // Skip almost invisible stars\n      if (star.opacity < 0.02) continue;\n      \n      // Optimized star rendering\n      if (CONFIG.useHighQualityRendering && CONFIG.useGlow) {\n        // High-quality rendering with glow\n        ctx.save();\n        \n        // Draw glow (larger radius with blur)\n        ctx.beginPath();\n        ctx.arc(star.x, star.y, star.size * 1.8, 0, Math.PI * 2);\n        ctx.fillStyle = getCachedColor(star.color, star.opacity * 0.3);\n        ctx.shadowColor = getCachedColor(star.color, star.opacity * 0.5);\n        ctx.shadowBlur = star.size * 3;\n        ctx.fill();\n        \n        // Draw core\n        ctx.beginPath();\n        ctx.arc(star.x, star.y, star.size * 0.7, 0, Math.PI * 2);\n        ctx.fillStyle = getCachedColor(star.color, star.opacity);\n        ctx.fill();\n        \n        ctx.restore();\n      } else {\n        // Simplified rendering for performance\n        ctx.beginPath();\n        ctx.arc(star.x, star.y, star.size, 0, Math.PI * 2);\n        ctx.fillStyle = getCachedColor(star.color, star.opacity);\n        ctx.fill();\n      }\n    }\n  }, [CONFIG.useHighQualityRendering, CONFIG.useGlow, getCachedColor]);\n  \n  // Render constellations with optimized canvas operations\n  const renderConstellations = useCallback(() => {\n    const ctx = ctxRef.current;\n    if (!ctx) return;\n    \n    for (let i = 0; i < constellationsRef.current.length; i++) {\n      const constellation = constellationsRef.current[i];\n      \n      // First render connections\n      for (let j = 0; j < constellation.connections.length; j++) {\n        const connection = constellation.connections[j];\n        \n        // Skip almost invisible connections\n        if (connection.opacity < 0.02) continue;\n        \n        ctx.beginPath();\n        ctx.moveTo(connection.from.x, connection.from.y);\n        ctx.lineTo(connection.to.x, connection.to.y);\n        \n        if (CONFIG.useHighQualityRendering) {\n          ctx.strokeStyle = getCachedColor(COLORS.constellations.lines, connection.opacity);\n          ctx.lineWidth = connection.width;\n          \n          if (CONFIG.useGlow && connection.opacity > 0.2) {\n            ctx.shadowColor = getCachedColor(COLORS.constellations.pulseColor, connection.opacity * 0.6);\n            ctx.shadowBlur = 4;\n          }\n        } else {\n          ctx.strokeStyle = getCachedColor(COLORS.constellations.lines, connection.opacity);\n          ctx.lineWidth = connection.width;\n        }\n        \n        ctx.stroke();\n        \n        // Reset shadow for performance\n        if (CONFIG.useGlow) {\n          ctx.shadowBlur = 0;\n        }\n      }\n      \n      // Then render vertices\n      for (let j = 0; j < constellation.vertices.length; j++) {\n        const vertex = constellation.vertices[j];\n        \n        // Skip almost invisible vertices\n        if (vertex.opacity < 0.02) continue;\n        \n        if (CONFIG.useHighQualityRendering) {\n          ctx.save();\n          \n          // Draw glow\n          if (CONFIG.useGlow) {\n            ctx.beginPath();\n            ctx.arc(vertex.x, vertex.y, vertex.size * 2, 0, Math.PI * 2);\n            ctx.fillStyle = getCachedColor(COLORS.constellations.vertexColor, vertex.opacity * 0.3);\n            ctx.shadowColor = getCachedColor(COLORS.constellations.vertexColor, vertex.opacity * 0.5);\n            ctx.shadowBlur = vertex.size * 3;\n            ctx.fill();\n          }\n          \n          // Draw vertex\n          ctx.beginPath();\n          ctx.arc(vertex.x, vertex.y, vertex.size * 0.8, 0, Math.PI * 2);\n          ctx.fillStyle = getCachedColor(COLORS.constellations.vertexColor, vertex.opacity * 0.9);\n          ctx.fill();\n          \n          ctx.restore();\n        } else {\n          // Simplified rendering\n          ctx.beginPath();\n          ctx.arc(vertex.x, vertex.y, vertex.size, 0, Math.PI * 2);\n          ctx.fillStyle = getCachedColor(COLORS.constellations.vertexColor, vertex.opacity);\n          ctx.fill();\n        }\n      }\n    }\n  }, [\n    CONFIG.useHighQualityRendering,\n    CONFIG.useGlow,\n    COLORS.constellations,\n    getCachedColor\n  ]);\n  \n  // FPS limiter for consistent animation speed\n  const fpsLimiter = useCallback((timestamp, callback) => {\n    // Skip animation if hidden, not active, or reduced motion\n    if (!isVisible || document.hidden) {\n      animationFrameRef.current = requestAnimationFrame(time => fpsLimiter(time, callback));\n      return;\n    }\n    \n    const targetFrameTime = 1000 / CONFIG.maxFPS;\n    const elapsed = timestamp - lastTimestampRef.current;\n    \n    if (elapsed >= targetFrameTime || lastTimestampRef.current === 0) {\n      // Calculate delta - cap to avoid jumps after tab switch\n      const delta = lastTimestampRef.current === 0 ? 16 : Math.min(elapsed, 50);\n      \n      // Update timestamp\n      lastTimestampRef.current = timestamp - (elapsed % targetFrameTime);\n      \n      // Run animation with capped delta\n      callback(delta, timestamp);\n      \n      // FPS tracking\n      frameCountRef.current++;\n      if (timestamp - fpsTimestampRef.current >= 1000) {\n        currentFpsRef.current = frameCountRef.current;\n        frameCountRef.current = 0;\n        fpsTimestampRef.current = timestamp;\n      }\n    }\n    \n    // Schedule next frame\n    animationFrameRef.current = requestAnimationFrame(time => fpsLimiter(time, callback));\n  }, [isVisible, CONFIG.maxFPS]);\n  \n  // Main animation handler\n  const animate = useCallback((timestamp) => {\n    if (!canvasRef.current || !ctxRef.current || !isInitialized) return;\n    \n    const ctx = ctxRef.current;\n    \n    // Clear canvas\n    ctx.clearRect(0, 0, dimensions.width, dimensions.height);\n    \n    // Draw background gradient\n    const gradient = ctx.createLinearGradient(0, 0, 0, dimensions.height);\n    gradient.addColorStop(0, COLORS.background.topColor);\n    gradient.addColorStop(1, COLORS.background.bottomColor);\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, dimensions.width, dimensions.height);\n    \n    // Update elements\n    updateStars(timestamp - lastTimestampRef.current);\n    updateConstellations(timestamp - lastTimestampRef.current, timestamp);\n    \n    // Render elements\n    renderStars();\n    renderConstellations();\n    \n  }, [\n    dimensions,\n    isInitialized,\n    COLORS.background,\n    updateStars,\n    updateConstellations,\n    renderStars,\n    renderConstellations\n  ]);\n  \n  // Initialize animation when component is ready\n  useEffect(() => {\n    if (!isInitialized && dimensions.width && dimensions.height) {\n      initializeStars();\n      initializeConstellations();\n      setIsInitialized(true);\n    }\n  }, [dimensions, isInitialized, initializeStars, initializeConstellations]);\n  \n  // Start animation loop\n  useEffect(() => {\n    if (!isInitialized) return;\n    \n    // Reset animation state\n    lastTimestampRef.current = 0;\n    fpsTimestampRef.current = performance.now();\n    frameCountRef.current = 0;\n    \n    // Start animation with FPS limiter\n    animationFrameRef.current = requestAnimationFrame(timestamp => {\n      fpsLimiter(timestamp, animate);\n    });\n    \n    // Cleanup\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [isInitialized, fpsLimiter, animate]);\n  \n  return (\n    <div\n      ref={containerRef}\n      style={{\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        overflow: 'hidden',\n        zIndex: -1,\n        pointerEvents: 'none',\n        // Hardware acceleration\n        backfaceVisibility: 'hidden',\n        transform: 'translateZ(0)',\n        willChange: 'transform'\n      }}\n      aria-hidden=\"true\"\n    >\n      <canvas\n        ref={canvasRef}\n        style={{\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%',\n          height: '100%',\n          // Hardware acceleration\n          backfaceVisibility: 'hidden',\n          transform: 'translateZ(0)',\n          willChange: 'transform'\n        }}\n      />\n    </div>\n  );\n};\n\nexport default Background;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}