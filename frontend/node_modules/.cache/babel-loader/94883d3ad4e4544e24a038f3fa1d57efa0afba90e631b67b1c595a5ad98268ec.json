{"ast":null,"code":"var _jsxFileName = \"/home/valeria/Documents/Crucible/frontend/src/components/core/Background.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect, useCallback } from 'react';\n\n/**\n * Background Component\n * \n * Creates an immersive stellar background that spans the entire page content,\n * dynamically generating new stars as the user scrolls.\n * \n * Features:\n * - Dynamic star generation throughout the entire document\n * - Performance optimization by only rendering visible stars\n * - Realistic star rendering with proper glow effects\n * - Stars remain fixed in their positions (not tied to viewport)\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Background = () => {\n  _s();\n  // Refs for DOM elements and animation state\n  const containerRef = useRef(null);\n  const canvasRef = useRef(null);\n  const starsRef = useRef([]);\n  const animationFrameRef = useRef(null);\n  const lastTimeRef = useRef(0);\n  const dimensionsRef = useRef({\n    viewport: {\n      width: 0,\n      height: 0\n    },\n    document: {\n      width: 0,\n      height: 0\n    },\n    pixelRatio: 1\n  });\n  const scrollInfoRef = useRef({\n    position: 0,\n    viewportTop: 0,\n    viewportBottom: 0\n  });\n\n  // Component state\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [prefersReducedMotion, setPrefersReducedMotion] = useState(false);\n\n  // Configuration\n  const CONFIG = {\n    // Star parameters\n    starDensity: 0.00015,\n    // Stars per pixel (adjust to change density)\n    minStarsCount: 180,\n    // Minimum number of stars regardless of page size\n    starSizeMin: 0.8,\n    starSizeMax: 2.5,\n    starOpacityMin: 0.15,\n    starOpacityMax: 0.85,\n    // Rendering parameters\n    renderPadding: 200,\n    // Extra padding beyond viewport to render (px)\n\n    // Motion and animation\n    baseMovementSpeed: 0.00015,\n    // Very subtle movement\n    pulseFrequency: 0.00004,\n    // Slower pulsing\n    pulseIntensity: 0.25,\n    // Subtle pulse\n\n    // Performance parameters\n    maxFPS: 30\n  };\n\n  // Warm, golden color palette\n  const COLORS = {\n    // Main star colors (warm golden tones)\n    stars: ['rgba(255, 243, 200, alpha)',\n    // Warm yellow\n    'rgba(255, 231, 164, alpha)',\n    // Golden\n    'rgba(255, 236, 179, alpha)',\n    // Pale gold\n    'rgba(252, 249, 231, alpha)',\n    // Off-white gold\n    'rgba(255, 225, 205, alpha)' // Warm white (slight orange)\n    ],\n    // Background gradient colors\n    background: {\n      topColor: 'rgb(8, 8, 12)',\n      bottomColor: 'rgb(15, 15, 20)'\n    }\n  };\n\n  // Get color with opacity\n  const getColor = useCallback((baseColor, opacity) => {\n    const safeOpacity = Math.max(0, Math.min(1, opacity || 0));\n    return baseColor.replace(/alpha\\)$/, `${safeOpacity})`);\n  }, []);\n\n  // Get total document dimensions\n  const getDocumentDimensions = useCallback(() => {\n    return {\n      width: Math.max(document.documentElement.clientWidth, window.innerWidth || 0),\n      height: Math.max(document.body.scrollHeight, document.documentElement.scrollHeight, document.body.offsetHeight, document.documentElement.offsetHeight, document.body.clientHeight, document.documentElement.clientHeight)\n    };\n  }, []);\n\n  // Update dimensions when document or window size changes\n  const updateDimensions = useCallback(() => {\n    const viewport = {\n      width: window.innerWidth,\n      height: window.innerHeight\n    };\n    const document = getDocumentDimensions();\n    const pixelRatio = window.devicePixelRatio || 1;\n\n    // Only update if dimensions have changed\n    if (dimensionsRef.current.viewport.width !== viewport.width || dimensionsRef.current.viewport.height !== viewport.height || dimensionsRef.current.document.width !== document.width || dimensionsRef.current.document.height !== document.height) {\n      dimensionsRef.current = {\n        viewport,\n        document,\n        pixelRatio\n      };\n      return true;\n    }\n    return false;\n  }, [getDocumentDimensions]);\n\n  // Update scroll info\n  const updateScrollInfo = useCallback(() => {\n    scrollInfoRef.current = {\n      position: window.scrollY,\n      viewportTop: window.scrollY,\n      viewportBottom: window.scrollY + dimensionsRef.current.viewport.height\n    };\n  }, []);\n\n  // Detect reduced motion preference\n  useEffect(() => {\n    const reducedMotionQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\n    setPrefersReducedMotion(reducedMotionQuery.matches);\n    const handleReducedMotionChange = e => {\n      setPrefersReducedMotion(e.matches);\n    };\n    reducedMotionQuery.addEventListener('change', handleReducedMotionChange);\n    return () => {\n      reducedMotionQuery.removeEventListener('change', handleReducedMotionChange);\n    };\n  }, []);\n\n  // Initialize canvas with proper resolution\n  const setupCanvas = useCallback(() => {\n    if (!canvasRef.current || !containerRef.current) return false;\n    const canvas = canvasRef.current;\n    updateDimensions();\n\n    // Set canvas size to cover the entire document\n    canvas.width = dimensionsRef.current.document.width * dimensionsRef.current.pixelRatio;\n    canvas.height = dimensionsRef.current.document.height * dimensionsRef.current.pixelRatio;\n\n    // Set the CSS size to match the document\n    canvas.style.width = `${dimensionsRef.current.document.width}px`;\n    canvas.style.height = `${dimensionsRef.current.document.height}px`;\n    return true;\n  }, [updateDimensions]);\n\n  // Initialize stars with proper distribution throughout document\n  const initializeStars = useCallback(() => {\n    const {\n      document\n    } = dimensionsRef.current;\n    if (!document.width || !document.height) return;\n\n    // Calculate star count based on document area\n    const documentArea = document.width * document.height;\n    const starCount = Math.max(CONFIG.minStarsCount, Math.floor(documentArea * CONFIG.starDensity));\n\n    // Clear existing stars\n    starsRef.current = [];\n\n    // Create stars distributed throughout the entire document\n    for (let i = 0; i < starCount; i++) {\n      const star = {};\n\n      // Position - distribute stars evenly across the entire document\n      star.x = Math.random() * document.width;\n      star.y = Math.random() * document.height;\n      star.z = Math.random() * 0.8 + 0.1; // Depth (0.1 to 0.9)\n\n      // Visual properties\n      star.size = (Math.random() * (CONFIG.starSizeMax - CONFIG.starSizeMin) + CONFIG.starSizeMin) * star.z;\n      star.baseOpacity = Math.random() * (CONFIG.starOpacityMax - CONFIG.starOpacityMin) + CONFIG.starOpacityMin;\n      star.opacity = star.baseOpacity;\n\n      // Animation properties\n      star.pulsePhase = Math.random() * Math.PI * 2;\n      star.pulseSpeed = Math.random() * 0.002 + 0.001;\n      star.movementSpeed = (Math.random() * 0.2 + 0.9) * CONFIG.baseMovementSpeed * (1.1 - star.z);\n\n      // Star shape properties - add variation for more realistic stars\n      star.rays = Math.random() > 0.7 ? Math.floor(Math.random() * 2) + 4 : 0; // Some stars have rays\n      star.rayLength = star.size * (Math.random() * 0.7 + 0.3);\n      star.rayIntensity = Math.random() * 0.4 + 0.3;\n\n      // Color variation\n      const colorIndex = Math.floor(Math.random() * COLORS.stars.length);\n      star.color = COLORS.stars[colorIndex];\n\n      // Store in ref\n      starsRef.current.push(star);\n    }\n  }, [CONFIG, COLORS.stars]);\n\n  // Check if a star is within the visible area (with padding)\n  const isStarVisible = useCallback(star => {\n    const {\n      viewportTop,\n      viewportBottom\n    } = scrollInfoRef.current;\n    const padding = CONFIG.renderPadding;\n    return star.y >= viewportTop - padding && star.y <= viewportBottom + padding;\n  }, [CONFIG.renderPadding]);\n\n  // Add more stars when document height increases\n  const addMoreStarsIfNeeded = useCallback(() => {\n    const {\n      document: prevDimensions\n    } = dimensionsRef.current;\n    const currentDimensions = getDocumentDimensions();\n\n    // If document height has increased\n    if (currentDimensions.height > prevDimensions.height) {\n      // Calculate additional area\n      const additionalArea = currentDimensions.width * (currentDimensions.height - prevDimensions.height);\n      const additionalStars = Math.floor(additionalArea * CONFIG.starDensity);\n\n      // Create new stars in the new area\n      for (let i = 0; i < additionalStars; i++) {\n        const star = {};\n\n        // Position in the new area\n        star.x = Math.random() * currentDimensions.width;\n        star.y = prevDimensions.height + Math.random() * (currentDimensions.height - prevDimensions.height);\n        star.z = Math.random() * 0.8 + 0.1;\n\n        // Visual properties (same as initializeStars)\n        star.size = (Math.random() * (CONFIG.starSizeMax - CONFIG.starSizeMin) + CONFIG.starSizeMin) * star.z;\n        star.baseOpacity = Math.random() * (CONFIG.starOpacityMax - CONFIG.starOpacityMin) + CONFIG.starOpacityMin;\n        star.opacity = star.baseOpacity;\n        star.pulsePhase = Math.random() * Math.PI * 2;\n        star.pulseSpeed = Math.random() * 0.002 + 0.001;\n        star.movementSpeed = (Math.random() * 0.2 + 0.9) * CONFIG.baseMovementSpeed * (1.1 - star.z);\n        star.rays = Math.random() > 0.7 ? Math.floor(Math.random() * 2) + 4 : 0;\n        star.rayLength = star.size * (Math.random() * 0.7 + 0.3);\n        star.rayIntensity = Math.random() * 0.4 + 0.3;\n        const colorIndex = Math.floor(Math.random() * COLORS.stars.length);\n        star.color = COLORS.stars[colorIndex];\n        starsRef.current.push(star);\n      }\n\n      // Update canvas dimensions\n      setupCanvas();\n\n      // Update stored dimensions\n      dimensionsRef.current.document = currentDimensions;\n      return true;\n    }\n    return false;\n  }, [CONFIG, COLORS.stars, getDocumentDimensions, setupCanvas]);\n\n  // Update animation state\n  const updateAnimation = useCallback((deltaTime, timestamp) => {\n    // Global time factor for animations\n    const timeFactor = timestamp * 0.001;\n\n    // Motion dampening for reduced motion preference\n    const motionFactor = prefersReducedMotion ? 0.1 : 1;\n\n    // Check if we need to add more stars (document might have grown)\n    addMoreStarsIfNeeded();\n\n    // Update stars\n    for (let i = 0; i < starsRef.current.length; i++) {\n      const star = starsRef.current[i];\n\n      // Only update stars that are visible or nearly visible\n      if (!isStarVisible(star)) continue;\n\n      // Subtle movement based on time\n      star.x += Math.sin(timeFactor * 0.2 + star.pulsePhase) * star.movementSpeed * deltaTime * motionFactor;\n      star.y += Math.cos(timeFactor * 0.3 + star.pulsePhase * 1.3) * star.movementSpeed * deltaTime * motionFactor;\n\n      // Wrap around screen edges\n      if (star.x < 0) star.x = dimensionsRef.current.document.width;\n      if (star.x > dimensionsRef.current.document.width) star.x = 0;\n\n      // Don't wrap vertically - stars stay in their vertical position\n\n      // Subtle pulsing effect - more natural by combining multiple sine waves\n      const pulseFactor = (Math.sin(timeFactor * star.pulseSpeed + star.pulsePhase) * 0.5 + Math.sin(timeFactor * star.pulseSpeed * 0.4 + star.pulsePhase * 1.3) * 0.3) * 0.15 + 0.85;\n      star.opacity = star.baseOpacity * pulseFactor;\n\n      // Vary ray intensity based on pulse\n      if (star.rays > 0) {\n        star.currentRayIntensity = star.rayIntensity * pulseFactor;\n      }\n    }\n  }, [prefersReducedMotion, isStarVisible, addMoreStarsIfNeeded]);\n\n  // Render a more realistic star with optional rays\n  const drawStar = useCallback((ctx, star) => {\n    // Draw outer glow for all stars\n    const glowRadius = star.size * 2;\n    const gradient = ctx.createRadialGradient(star.x, star.y, 0, star.x, star.y, glowRadius);\n    gradient.addColorStop(0, getColor(star.color, star.opacity * 0.9));\n    gradient.addColorStop(0.5, getColor(star.color, star.opacity * 0.3));\n    gradient.addColorStop(1, getColor(star.color, 0));\n    ctx.beginPath();\n    ctx.fillStyle = gradient;\n    ctx.arc(star.x, star.y, glowRadius, 0, Math.PI * 2);\n    ctx.fill();\n\n    // Draw bright core\n    ctx.beginPath();\n    ctx.fillStyle = getColor(star.color, star.opacity);\n    ctx.arc(star.x, star.y, star.size * 0.5, 0, Math.PI * 2);\n    ctx.fill();\n\n    // Draw rays for some stars\n    if (star.rays > 0 && star.opacity > 0.3) {\n      ctx.save();\n      ctx.translate(star.x, star.y);\n      ctx.rotate(Math.sin(Date.now() * 0.0001) * 0.05); // Very slight rotation\n\n      for (let i = 0; i < star.rays; i++) {\n        const angle = i / star.rays * Math.PI * 2;\n        const rayLength = star.rayLength * (0.7 + Math.sin(Date.now() * 0.001 + i) * 0.3);\n        ctx.beginPath();\n        ctx.moveTo(0, 0);\n        ctx.lineTo(Math.cos(angle) * rayLength, Math.sin(angle) * rayLength);\n\n        // Create gradient for ray\n        const rayGradient = ctx.createLinearGradient(0, 0, Math.cos(angle) * rayLength, Math.sin(angle) * rayLength);\n        rayGradient.addColorStop(0, getColor(star.color, star.opacity * 0.9));\n        rayGradient.addColorStop(1, getColor(star.color, 0));\n        ctx.strokeStyle = rayGradient;\n        ctx.lineWidth = star.size * 0.3;\n        ctx.stroke();\n      }\n      ctx.restore();\n    }\n  }, [getColor]);\n\n  // Render the scene\n  const renderScene = useCallback(() => {\n    if (!canvasRef.current) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Get the current visible area\n    const {\n      viewportTop,\n      viewportBottom\n    } = scrollInfoRef.current;\n    const padding = CONFIG.renderPadding;\n    const visibleAreaTop = viewportTop - padding;\n    const visibleAreaBottom = viewportBottom + padding;\n    const visibleAreaHeight = visibleAreaBottom - visibleAreaTop;\n\n    // Apply device pixel ratio scaling\n    ctx.setTransform(dimensionsRef.current.pixelRatio, 0, 0, dimensionsRef.current.pixelRatio, 0, 0);\n\n    // Clear only the visible portion of the canvas (with padding)\n    ctx.clearRect(0, visibleAreaTop, dimensionsRef.current.document.width, visibleAreaHeight);\n\n    // Draw background gradient for the visible area\n    const gradient = ctx.createLinearGradient(0, visibleAreaTop, 0, visibleAreaBottom);\n    gradient.addColorStop(0, COLORS.background.topColor);\n    gradient.addColorStop(1, COLORS.background.bottomColor);\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, visibleAreaTop, dimensionsRef.current.document.width, visibleAreaHeight);\n\n    // Enable global composition for better glow effect\n    ctx.globalCompositeOperation = 'lighter';\n\n    // Draw only stars in the visible area\n    for (const star of starsRef.current) {\n      // Skip stars outside the visible area\n      if (!isStarVisible(star)) continue;\n\n      // Skip almost invisible stars\n      if (star.opacity < 0.02) continue;\n\n      // Draw star with enhanced rendering\n      drawStar(ctx, star);\n    }\n\n    // Reset global composition\n    ctx.globalCompositeOperation = 'source-over';\n  }, [CONFIG.renderPadding, COLORS.background, isStarVisible, drawStar]);\n\n  // Track scroll position\n  useEffect(() => {\n    const handleScroll = () => {\n      updateScrollInfo();\n      // Force re-render on scroll to update visible stars\n      if (isInitialized) {\n        renderScene();\n      }\n    };\n    window.addEventListener('scroll', handleScroll, {\n      passive: true\n    });\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, [updateScrollInfo, renderScene, isInitialized]);\n\n  // Setup canvas and observe size changes\n  useEffect(() => {\n    const handleResize = () => {\n      if (updateDimensions()) {\n        setupCanvas();\n        // If dimensions changed significantly, reinitialize stars\n        initializeStars();\n        updateScrollInfo();\n        renderScene();\n      }\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Set up a mutation observer to detect DOM changes that might affect document height\n    const documentObserver = new MutationObserver(() => {\n      if (addMoreStarsIfNeeded()) {\n        updateScrollInfo();\n        renderScene();\n      }\n    });\n    documentObserver.observe(document.body, {\n      childList: true,\n      subtree: true,\n      attributes: true,\n      characterData: true\n    });\n\n    // Initial setup\n    setupCanvas();\n    updateScrollInfo();\n    initializeStars();\n    setIsInitialized(true);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      documentObserver.disconnect();\n    };\n  }, [setupCanvas, updateDimensions, initializeStars, updateScrollInfo, renderScene, addMoreStarsIfNeeded]);\n\n  // Main animation loop\n  const animate = useCallback(timestamp => {\n    if (!isInitialized) {\n      animationFrameRef.current = requestAnimationFrame(animate);\n      return;\n    }\n\n    // Calculate delta time with cap to prevent large jumps\n    const deltaTime = lastTimeRef.current ? Math.min(timestamp - lastTimeRef.current, 33) : 16;\n    lastTimeRef.current = timestamp;\n\n    // Update animation state\n    updateAnimation(deltaTime, timestamp);\n\n    // Render scene\n    renderScene();\n\n    // Schedule next frame\n    animationFrameRef.current = requestAnimationFrame(animate);\n  }, [isInitialized, updateAnimation, renderScene]);\n\n  // Start animation loop\n  useEffect(() => {\n    if (!isInitialized) return;\n\n    // Update scroll info before animation starts\n    updateScrollInfo();\n\n    // Start animation\n    animationFrameRef.current = requestAnimationFrame(animate);\n\n    // Cleanup\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [isInitialized, animate, updateScrollInfo]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    style: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%',\n      overflow: 'hidden',\n      zIndex: -1,\n      pointerEvents: 'none'\n    },\n    \"aria-hidden\": \"true\",\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 549,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 535,\n    columnNumber: 5\n  }, this);\n};\n_s(Background, \"YnM3ALwuSYSXCm+Cx8bWJ9oAt/4=\");\n_c = Background;\nexport default Background;\nvar _c;\n$RefreshReg$(_c, \"Background\");","map":{"version":3,"names":["React","useRef","useState","useEffect","useCallback","jsxDEV","_jsxDEV","Background","_s","containerRef","canvasRef","starsRef","animationFrameRef","lastTimeRef","dimensionsRef","viewport","width","height","document","pixelRatio","scrollInfoRef","position","viewportTop","viewportBottom","isInitialized","setIsInitialized","prefersReducedMotion","setPrefersReducedMotion","CONFIG","starDensity","minStarsCount","starSizeMin","starSizeMax","starOpacityMin","starOpacityMax","renderPadding","baseMovementSpeed","pulseFrequency","pulseIntensity","maxFPS","COLORS","stars","background","topColor","bottomColor","getColor","baseColor","opacity","safeOpacity","Math","max","min","replace","getDocumentDimensions","documentElement","clientWidth","window","innerWidth","body","scrollHeight","offsetHeight","clientHeight","updateDimensions","innerHeight","devicePixelRatio","current","updateScrollInfo","scrollY","reducedMotionQuery","matchMedia","matches","handleReducedMotionChange","e","addEventListener","removeEventListener","setupCanvas","canvas","style","initializeStars","documentArea","starCount","floor","i","star","x","random","y","z","size","baseOpacity","pulsePhase","PI","pulseSpeed","movementSpeed","rays","rayLength","rayIntensity","colorIndex","length","color","push","isStarVisible","padding","addMoreStarsIfNeeded","prevDimensions","currentDimensions","additionalArea","additionalStars","updateAnimation","deltaTime","timestamp","timeFactor","motionFactor","sin","cos","pulseFactor","currentRayIntensity","drawStar","ctx","glowRadius","gradient","createRadialGradient","addColorStop","beginPath","fillStyle","arc","fill","save","translate","rotate","Date","now","angle","moveTo","lineTo","rayGradient","createLinearGradient","strokeStyle","lineWidth","stroke","restore","renderScene","getContext","visibleAreaTop","visibleAreaBottom","visibleAreaHeight","setTransform","clearRect","fillRect","globalCompositeOperation","handleScroll","passive","handleResize","documentObserver","MutationObserver","observe","childList","subtree","attributes","characterData","disconnect","animate","requestAnimationFrame","cancelAnimationFrame","ref","top","left","overflow","zIndex","pointerEvents","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/valeria/Documents/Crucible/frontend/src/components/core/Background.jsx"],"sourcesContent":["import React, { useRef, useState, useEffect, useCallback } from 'react';\n\n/**\n * Background Component\n * \n * Creates an immersive stellar background that spans the entire page content,\n * dynamically generating new stars as the user scrolls.\n * \n * Features:\n * - Dynamic star generation throughout the entire document\n * - Performance optimization by only rendering visible stars\n * - Realistic star rendering with proper glow effects\n * - Stars remain fixed in their positions (not tied to viewport)\n */\nconst Background = () => {\n  // Refs for DOM elements and animation state\n  const containerRef = useRef(null);\n  const canvasRef = useRef(null);\n  const starsRef = useRef([]);\n  const animationFrameRef = useRef(null);\n  const lastTimeRef = useRef(0);\n  const dimensionsRef = useRef({\n    viewport: { width: 0, height: 0 },\n    document: { width: 0, height: 0 },\n    pixelRatio: 1\n  });\n  const scrollInfoRef = useRef({\n    position: 0,\n    viewportTop: 0,\n    viewportBottom: 0\n  });\n  \n  // Component state\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [prefersReducedMotion, setPrefersReducedMotion] = useState(false);\n  \n  // Configuration\n  const CONFIG = {\n    // Star parameters\n    starDensity: 0.00015,  // Stars per pixel (adjust to change density)\n    minStarsCount: 180,    // Minimum number of stars regardless of page size\n    starSizeMin: 0.8,\n    starSizeMax: 2.5,\n    starOpacityMin: 0.15,\n    starOpacityMax: 0.85,\n    \n    // Rendering parameters\n    renderPadding: 200,    // Extra padding beyond viewport to render (px)\n    \n    // Motion and animation\n    baseMovementSpeed: 0.00015,  // Very subtle movement\n    pulseFrequency: 0.00004,     // Slower pulsing\n    pulseIntensity: 0.25,        // Subtle pulse\n    \n    // Performance parameters\n    maxFPS: 30\n  };\n  \n  // Warm, golden color palette\n  const COLORS = {\n    // Main star colors (warm golden tones)\n    stars: [\n      'rgba(255, 243, 200, alpha)', // Warm yellow\n      'rgba(255, 231, 164, alpha)', // Golden\n      'rgba(255, 236, 179, alpha)', // Pale gold\n      'rgba(252, 249, 231, alpha)', // Off-white gold\n      'rgba(255, 225, 205, alpha)'  // Warm white (slight orange)\n    ],\n    \n    // Background gradient colors\n    background: {\n      topColor: 'rgb(8, 8, 12)',\n      bottomColor: 'rgb(15, 15, 20)'\n    }\n  };\n  \n  // Get color with opacity\n  const getColor = useCallback((baseColor, opacity) => {\n    const safeOpacity = Math.max(0, Math.min(1, opacity || 0));\n    return baseColor.replace(/alpha\\)$/, `${safeOpacity})`);\n  }, []);\n  \n  // Get total document dimensions\n  const getDocumentDimensions = useCallback(() => {\n    return {\n      width: Math.max(\n        document.documentElement.clientWidth,\n        window.innerWidth || 0\n      ),\n      height: Math.max(\n        document.body.scrollHeight,\n        document.documentElement.scrollHeight,\n        document.body.offsetHeight,\n        document.documentElement.offsetHeight,\n        document.body.clientHeight,\n        document.documentElement.clientHeight\n      )\n    };\n  }, []);\n  \n  // Update dimensions when document or window size changes\n  const updateDimensions = useCallback(() => {\n    const viewport = {\n      width: window.innerWidth,\n      height: window.innerHeight\n    };\n    \n    const document = getDocumentDimensions();\n    const pixelRatio = window.devicePixelRatio || 1;\n    \n    // Only update if dimensions have changed\n    if (\n      dimensionsRef.current.viewport.width !== viewport.width ||\n      dimensionsRef.current.viewport.height !== viewport.height ||\n      dimensionsRef.current.document.width !== document.width ||\n      dimensionsRef.current.document.height !== document.height\n    ) {\n      dimensionsRef.current = {\n        viewport,\n        document,\n        pixelRatio\n      };\n      \n      return true;\n    }\n    \n    return false;\n  }, [getDocumentDimensions]);\n  \n  // Update scroll info\n  const updateScrollInfo = useCallback(() => {\n    scrollInfoRef.current = {\n      position: window.scrollY,\n      viewportTop: window.scrollY,\n      viewportBottom: window.scrollY + dimensionsRef.current.viewport.height\n    };\n  }, []);\n  \n  // Detect reduced motion preference\n  useEffect(() => {\n    const reducedMotionQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\n    setPrefersReducedMotion(reducedMotionQuery.matches);\n    \n    const handleReducedMotionChange = (e) => {\n      setPrefersReducedMotion(e.matches);\n    };\n    \n    reducedMotionQuery.addEventListener('change', handleReducedMotionChange);\n    \n    return () => {\n      reducedMotionQuery.removeEventListener('change', handleReducedMotionChange);\n    };\n  }, []);\n  \n  // Initialize canvas with proper resolution\n  const setupCanvas = useCallback(() => {\n    if (!canvasRef.current || !containerRef.current) return false;\n    \n    const canvas = canvasRef.current;\n    updateDimensions();\n    \n    // Set canvas size to cover the entire document\n    canvas.width = dimensionsRef.current.document.width * dimensionsRef.current.pixelRatio;\n    canvas.height = dimensionsRef.current.document.height * dimensionsRef.current.pixelRatio;\n    \n    // Set the CSS size to match the document\n    canvas.style.width = `${dimensionsRef.current.document.width}px`;\n    canvas.style.height = `${dimensionsRef.current.document.height}px`;\n    \n    return true;\n  }, [updateDimensions]);\n  \n  // Initialize stars with proper distribution throughout document\n  const initializeStars = useCallback(() => {\n    const { document } = dimensionsRef.current;\n    if (!document.width || !document.height) return;\n    \n    // Calculate star count based on document area\n    const documentArea = document.width * document.height;\n    const starCount = Math.max(\n      CONFIG.minStarsCount,\n      Math.floor(documentArea * CONFIG.starDensity)\n    );\n    \n    // Clear existing stars\n    starsRef.current = [];\n    \n    // Create stars distributed throughout the entire document\n    for (let i = 0; i < starCount; i++) {\n      const star = {};\n      \n      // Position - distribute stars evenly across the entire document\n      star.x = Math.random() * document.width;\n      star.y = Math.random() * document.height;\n      star.z = Math.random() * 0.8 + 0.1; // Depth (0.1 to 0.9)\n      \n      // Visual properties\n      star.size = (Math.random() * (CONFIG.starSizeMax - CONFIG.starSizeMin) + CONFIG.starSizeMin) * star.z;\n      star.baseOpacity = Math.random() * (CONFIG.starOpacityMax - CONFIG.starOpacityMin) + CONFIG.starOpacityMin;\n      star.opacity = star.baseOpacity;\n      \n      // Animation properties\n      star.pulsePhase = Math.random() * Math.PI * 2;\n      star.pulseSpeed = Math.random() * 0.002 + 0.001;\n      star.movementSpeed = (Math.random() * 0.2 + 0.9) * CONFIG.baseMovementSpeed * (1.1 - star.z);\n      \n      // Star shape properties - add variation for more realistic stars\n      star.rays = Math.random() > 0.7 ? Math.floor(Math.random() * 2) + 4 : 0; // Some stars have rays\n      star.rayLength = star.size * (Math.random() * 0.7 + 0.3);\n      star.rayIntensity = Math.random() * 0.4 + 0.3;\n      \n      // Color variation\n      const colorIndex = Math.floor(Math.random() * COLORS.stars.length);\n      star.color = COLORS.stars[colorIndex];\n      \n      // Store in ref\n      starsRef.current.push(star);\n    }\n  }, [CONFIG, COLORS.stars]);\n  \n  // Check if a star is within the visible area (with padding)\n  const isStarVisible = useCallback((star) => {\n    const { viewportTop, viewportBottom } = scrollInfoRef.current;\n    const padding = CONFIG.renderPadding;\n    \n    return (\n      star.y >= viewportTop - padding &&\n      star.y <= viewportBottom + padding\n    );\n  }, [CONFIG.renderPadding]);\n  \n  // Add more stars when document height increases\n  const addMoreStarsIfNeeded = useCallback(() => {\n    const { document: prevDimensions } = dimensionsRef.current;\n    const currentDimensions = getDocumentDimensions();\n    \n    // If document height has increased\n    if (currentDimensions.height > prevDimensions.height) {\n      // Calculate additional area\n      const additionalArea = currentDimensions.width * (currentDimensions.height - prevDimensions.height);\n      const additionalStars = Math.floor(additionalArea * CONFIG.starDensity);\n      \n      // Create new stars in the new area\n      for (let i = 0; i < additionalStars; i++) {\n        const star = {};\n        \n        // Position in the new area\n        star.x = Math.random() * currentDimensions.width;\n        star.y = prevDimensions.height + Math.random() * (currentDimensions.height - prevDimensions.height);\n        star.z = Math.random() * 0.8 + 0.1;\n        \n        // Visual properties (same as initializeStars)\n        star.size = (Math.random() * (CONFIG.starSizeMax - CONFIG.starSizeMin) + CONFIG.starSizeMin) * star.z;\n        star.baseOpacity = Math.random() * (CONFIG.starOpacityMax - CONFIG.starOpacityMin) + CONFIG.starOpacityMin;\n        star.opacity = star.baseOpacity;\n        \n        star.pulsePhase = Math.random() * Math.PI * 2;\n        star.pulseSpeed = Math.random() * 0.002 + 0.001;\n        star.movementSpeed = (Math.random() * 0.2 + 0.9) * CONFIG.baseMovementSpeed * (1.1 - star.z);\n        \n        star.rays = Math.random() > 0.7 ? Math.floor(Math.random() * 2) + 4 : 0;\n        star.rayLength = star.size * (Math.random() * 0.7 + 0.3);\n        star.rayIntensity = Math.random() * 0.4 + 0.3;\n        \n        const colorIndex = Math.floor(Math.random() * COLORS.stars.length);\n        star.color = COLORS.stars[colorIndex];\n        \n        starsRef.current.push(star);\n      }\n      \n      // Update canvas dimensions\n      setupCanvas();\n      \n      // Update stored dimensions\n      dimensionsRef.current.document = currentDimensions;\n      \n      return true;\n    }\n    \n    return false;\n  }, [CONFIG, COLORS.stars, getDocumentDimensions, setupCanvas]);\n  \n  // Update animation state\n  const updateAnimation = useCallback((deltaTime, timestamp) => {\n    // Global time factor for animations\n    const timeFactor = timestamp * 0.001;\n    \n    // Motion dampening for reduced motion preference\n    const motionFactor = prefersReducedMotion ? 0.1 : 1;\n    \n    // Check if we need to add more stars (document might have grown)\n    addMoreStarsIfNeeded();\n    \n    // Update stars\n    for (let i = 0; i < starsRef.current.length; i++) {\n      const star = starsRef.current[i];\n      \n      // Only update stars that are visible or nearly visible\n      if (!isStarVisible(star)) continue;\n      \n      // Subtle movement based on time\n      star.x += Math.sin(timeFactor * 0.2 + star.pulsePhase) * star.movementSpeed * deltaTime * motionFactor;\n      star.y += Math.cos(timeFactor * 0.3 + star.pulsePhase * 1.3) * star.movementSpeed * deltaTime * motionFactor;\n      \n      // Wrap around screen edges\n      if (star.x < 0) star.x = dimensionsRef.current.document.width;\n      if (star.x > dimensionsRef.current.document.width) star.x = 0;\n      \n      // Don't wrap vertically - stars stay in their vertical position\n      \n      // Subtle pulsing effect - more natural by combining multiple sine waves\n      const pulseFactor = (\n        Math.sin(timeFactor * star.pulseSpeed + star.pulsePhase) * 0.5 + \n        Math.sin(timeFactor * star.pulseSpeed * 0.4 + star.pulsePhase * 1.3) * 0.3\n      ) * 0.15 + 0.85;\n      \n      star.opacity = star.baseOpacity * pulseFactor;\n      \n      // Vary ray intensity based on pulse\n      if (star.rays > 0) {\n        star.currentRayIntensity = star.rayIntensity * pulseFactor;\n      }\n    }\n  }, [prefersReducedMotion, isStarVisible, addMoreStarsIfNeeded]);\n  \n  // Render a more realistic star with optional rays\n  const drawStar = useCallback((ctx, star) => {\n    // Draw outer glow for all stars\n    const glowRadius = star.size * 2;\n    const gradient = ctx.createRadialGradient(star.x, star.y, 0, star.x, star.y, glowRadius);\n    gradient.addColorStop(0, getColor(star.color, star.opacity * 0.9));\n    gradient.addColorStop(0.5, getColor(star.color, star.opacity * 0.3));\n    gradient.addColorStop(1, getColor(star.color, 0));\n    \n    ctx.beginPath();\n    ctx.fillStyle = gradient;\n    ctx.arc(star.x, star.y, glowRadius, 0, Math.PI * 2);\n    ctx.fill();\n    \n    // Draw bright core\n    ctx.beginPath();\n    ctx.fillStyle = getColor(star.color, star.opacity);\n    ctx.arc(star.x, star.y, star.size * 0.5, 0, Math.PI * 2);\n    ctx.fill();\n    \n    // Draw rays for some stars\n    if (star.rays > 0 && star.opacity > 0.3) {\n      ctx.save();\n      ctx.translate(star.x, star.y);\n      ctx.rotate(Math.sin(Date.now() * 0.0001) * 0.05); // Very slight rotation\n      \n      for (let i = 0; i < star.rays; i++) {\n        const angle = (i / star.rays) * Math.PI * 2;\n        const rayLength = star.rayLength * (0.7 + Math.sin(Date.now() * 0.001 + i) * 0.3);\n        \n        ctx.beginPath();\n        ctx.moveTo(0, 0);\n        ctx.lineTo(Math.cos(angle) * rayLength, Math.sin(angle) * rayLength);\n        \n        // Create gradient for ray\n        const rayGradient = ctx.createLinearGradient(\n          0, 0,\n          Math.cos(angle) * rayLength, Math.sin(angle) * rayLength\n        );\n        rayGradient.addColorStop(0, getColor(star.color, star.opacity * 0.9));\n        rayGradient.addColorStop(1, getColor(star.color, 0));\n        \n        ctx.strokeStyle = rayGradient;\n        ctx.lineWidth = star.size * 0.3;\n        ctx.stroke();\n      }\n      \n      ctx.restore();\n    }\n  }, [getColor]);\n  \n  // Render the scene\n  const renderScene = useCallback(() => {\n    if (!canvasRef.current) return;\n    \n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    \n    if (!ctx) return;\n    \n    // Get the current visible area\n    const { viewportTop, viewportBottom } = scrollInfoRef.current;\n    const padding = CONFIG.renderPadding;\n    const visibleAreaTop = viewportTop - padding;\n    const visibleAreaBottom = viewportBottom + padding;\n    const visibleAreaHeight = visibleAreaBottom - visibleAreaTop;\n    \n    // Apply device pixel ratio scaling\n    ctx.setTransform(dimensionsRef.current.pixelRatio, 0, 0, dimensionsRef.current.pixelRatio, 0, 0);\n    \n    // Clear only the visible portion of the canvas (with padding)\n    ctx.clearRect(\n      0, \n      visibleAreaTop, \n      dimensionsRef.current.document.width, \n      visibleAreaHeight\n    );\n    \n    // Draw background gradient for the visible area\n    const gradient = ctx.createLinearGradient(0, visibleAreaTop, 0, visibleAreaBottom);\n    gradient.addColorStop(0, COLORS.background.topColor);\n    gradient.addColorStop(1, COLORS.background.bottomColor);\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, visibleAreaTop, dimensionsRef.current.document.width, visibleAreaHeight);\n    \n    // Enable global composition for better glow effect\n    ctx.globalCompositeOperation = 'lighter';\n    \n    // Draw only stars in the visible area\n    for (const star of starsRef.current) {\n      // Skip stars outside the visible area\n      if (!isStarVisible(star)) continue;\n      \n      // Skip almost invisible stars\n      if (star.opacity < 0.02) continue;\n      \n      // Draw star with enhanced rendering\n      drawStar(ctx, star);\n    }\n    \n    // Reset global composition\n    ctx.globalCompositeOperation = 'source-over';\n  }, [CONFIG.renderPadding, COLORS.background, isStarVisible, drawStar]);\n  \n  // Track scroll position\n  useEffect(() => {\n    const handleScroll = () => {\n      updateScrollInfo();\n      // Force re-render on scroll to update visible stars\n      if (isInitialized) {\n        renderScene();\n      }\n    };\n    \n    window.addEventListener('scroll', handleScroll, { passive: true });\n    \n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, [updateScrollInfo, renderScene, isInitialized]);\n  \n  // Setup canvas and observe size changes\n  useEffect(() => {\n    const handleResize = () => {\n      if (updateDimensions()) {\n        setupCanvas();\n        // If dimensions changed significantly, reinitialize stars\n        initializeStars();\n        updateScrollInfo();\n        renderScene();\n      }\n    };\n    \n    window.addEventListener('resize', handleResize);\n    \n    // Set up a mutation observer to detect DOM changes that might affect document height\n    const documentObserver = new MutationObserver(() => {\n      if (addMoreStarsIfNeeded()) {\n        updateScrollInfo();\n        renderScene();\n      }\n    });\n    \n    documentObserver.observe(document.body, {\n      childList: true,\n      subtree: true,\n      attributes: true,\n      characterData: true\n    });\n    \n    // Initial setup\n    setupCanvas();\n    updateScrollInfo();\n    initializeStars();\n    setIsInitialized(true);\n    \n    return () => {\n      window.removeEventListener('resize', handleResize);\n      documentObserver.disconnect();\n    };\n  }, [\n    setupCanvas, \n    updateDimensions, \n    initializeStars, \n    updateScrollInfo, \n    renderScene, \n    addMoreStarsIfNeeded\n  ]);\n  \n  // Main animation loop\n  const animate = useCallback((timestamp) => {\n    if (!isInitialized) {\n      animationFrameRef.current = requestAnimationFrame(animate);\n      return;\n    }\n    \n    // Calculate delta time with cap to prevent large jumps\n    const deltaTime = lastTimeRef.current ? Math.min(timestamp - lastTimeRef.current, 33) : 16;\n    lastTimeRef.current = timestamp;\n    \n    // Update animation state\n    updateAnimation(deltaTime, timestamp);\n    \n    // Render scene\n    renderScene();\n    \n    // Schedule next frame\n    animationFrameRef.current = requestAnimationFrame(animate);\n  }, [isInitialized, updateAnimation, renderScene]);\n  \n  // Start animation loop\n  useEffect(() => {\n    if (!isInitialized) return;\n    \n    // Update scroll info before animation starts\n    updateScrollInfo();\n    \n    // Start animation\n    animationFrameRef.current = requestAnimationFrame(animate);\n    \n    // Cleanup\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [isInitialized, animate, updateScrollInfo]);\n  \n  return (\n    <div\n      ref={containerRef}\n      style={{\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        overflow: 'hidden',\n        zIndex: -1,\n        pointerEvents: 'none'\n      }}\n      aria-hidden=\"true\"\n    >\n      <canvas\n        ref={canvasRef}\n        style={{\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%',\n          height: '100%'\n        }}\n      />\n    </div>\n  );\n};\n\nexport default Background;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}