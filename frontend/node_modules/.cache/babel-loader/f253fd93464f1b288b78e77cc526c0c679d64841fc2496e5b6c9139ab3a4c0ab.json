{"ast":null,"code":"var _jsxFileName = \"/home/valeria/Documents/Crucible/frontend/src/components/sections/codex/creators/creatorshowcase/EvolutionSimulatorConceptShowcase.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { motion, AnimatePresence, useInView } from 'framer-motion';\nimport Background from '../../../../core/Background';\nimport MeteorShower from '../../../../core/effects/cosmiceffects/MeteorShower';\nimport ScrollingTextAnimation from '../../../../core/effects/ScrollingTextAnimation';\nimport RevealText from '../../../../core/effects/RevealText';\nimport useStyles from './evolutionSimulatorStyles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EvolutionSimulator = () => {\n  _s();\n  // State management\n  const [cursorPosition, setCursorPosition] = useState({\n    x: 0,\n    y: 0\n  });\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [selectedBodyShape, setSelectedBodyShape] = useState('quadrupedal');\n  const [selectedTrait, setSelectedTrait] = useState(null);\n  const [selectedTraitConnections, setSelectedTraitConnections] = useState([]);\n  const [showBodyShapeSelector, setShowBodyShapeSelector] = useState(false);\n  const [totalEffectiveStress, setTotalEffectiveStress] = useState(0);\n  const [adaptationProbability, setAdaptationProbability] = useState(0);\n  const [hoveredTrait, setHoveredTrait] = useState(null);\n  const [showAllTraits, setShowAllTraits] = useState(true);\n  const [filterMode, setFilterMode] = useState('all'); // 'all', 'category', 'relevance'\n\n  // Environment state with default values\n  const [environment, setEnvironment] = useState({\n    temperature: 0.4,\n    light_conditions: 0.3,\n    terrain_harshness: 0.5,\n    resource_scarcity: 0.2,\n    ether_density: 0.6,\n    pressure_gravity: 0.4\n  });\n\n  // Canvas and animation refs\n  const canvasRef = useRef(null);\n  const containerRef = useRef(null);\n  const networkRef = useRef(null);\n  const animationFrameRef = useRef(null);\n  const bodyShapeIconRef = useRef(null);\n  const traitRefs = useRef({});\n  const headerRef = useRef(null);\n  const contentRef = useRef(null);\n\n  // Header in view animation\n  const headerInView = useInView(headerRef, {\n    once: true,\n    threshold: 0.2\n  });\n  const contentInView = useInView(contentRef, {\n    once: true,\n    threshold: 0.1\n  });\n\n  // Custom styling hook\n  const classes = useStyles();\n\n  // Body shapes data\n  const bodyShapes = [{\n    id: 'bipedal',\n    name: 'Bipedal',\n    description: 'Upright forms with manipulative upper limbs'\n  }, {\n    id: 'quadrupedal',\n    name: 'Quadrupedal',\n    description: 'Four-limbed forms optimized for stability and movement'\n  }, {\n    id: 'serpentine',\n    name: 'Serpentine',\n    description: 'Elongated, limbless forms specialized for flexibility'\n  }, {\n    id: 'amorphous',\n    name: 'Amorphous',\n    description: 'Malleable forms without fixed structure'\n  }, {\n    id: 'insectoid',\n    name: 'Multi-limbed',\n    description: 'Multi-limbed, segmented forms'\n  }, {\n    id: 'avian',\n    name: 'Avian',\n    description: 'Forms optimized for flight and aerial movement'\n  }, {\n    id: 'aquatic',\n    name: 'Aquatic',\n    description: 'Forms specialized for water environments'\n  }];\n\n  // Trait categories with color assignments\n  const traitCategories = [{\n    id: 'locomotion',\n    name: 'Locomotion',\n    color: '#7D6B9E'\n  }, {\n    id: 'metabolism',\n    name: 'Metabolism',\n    color: '#5C9D8B'\n  }, {\n    id: 'sensory',\n    name: 'Sensory Acuity',\n    color: '#C99846'\n  }, {\n    id: 'etheric',\n    name: 'Etheric Adaptation',\n    color: '#B54B4B'\n  }, {\n    id: 'thermal',\n    name: 'Thermal Regulation',\n    color: '#A67C52'\n  }];\n\n  // Get traits based on selected body shape\n  const getTraitsByBodyShape = bodyShapeId => {\n    // Base traits that all body shapes share\n    const baseTraits = {\n      locomotion: [{\n        id: 'running',\n        name: 'Swift Limbs',\n        tier: 1,\n        affinities: {\n          terrain_harshness: 0.7,\n          pressure_gravity: 0.4,\n          temperature: 0.2,\n          resource_scarcity: -0.3,\n          light_conditions: 0.1,\n          ether_density: 0\n        },\n        description: 'Limbs designed for quick locomotion across varied terrain.',\n        connections: ['enhanced_muscle', 'reflective_scales'],\n        compatible: ['quadrupedal', 'bipedal', 'insectoid'],\n        synthesis: {\n          condition: 'high_stress',\n          result: {\n            name: 'Phase Shifting Appendages',\n            description: 'Limbs that can temporarily phase through solid matter, allowing movement through obstacles.'\n          }\n        }\n      }, {\n        id: 'climbing',\n        name: 'Grasping Appendages',\n        tier: 1,\n        affinities: {\n          terrain_harshness: 0.8,\n          pressure_gravity: 0.3,\n          resource_scarcity: -0.2,\n          temperature: 0,\n          light_conditions: 0.1,\n          ether_density: 0\n        },\n        description: 'Specialized limb structures with superior grip for vertical movement.',\n        connections: ['enhanced_muscle', 'sonar_mapping'],\n        compatible: ['bipedal', 'quadrupedal', 'insectoid'],\n        synthesis: {\n          condition: 'extreme_gravity',\n          result: {\n            name: 'Gravity-Defying Grips',\n            description: 'Appendages capable of selectively negating gravitational forces at contact points.'\n          }\n        }\n      }, {\n        id: 'webbed',\n        name: 'Webbed Appendages',\n        tier: 1,\n        affinities: {\n          terrain_harshness: -0.4,\n          pressure_gravity: 0.1,\n          resource_scarcity: -0.1,\n          temperature: -0.2,\n          light_conditions: 0,\n          ether_density: 0\n        },\n        description: 'Limbs with membrane structures optimized for aquatic movement.',\n        connections: ['ether_sensing', 'thick_blubber'],\n        compatible: ['aquatic', 'bipedal', 'quadrupedal'],\n        synthesis: {\n          condition: 'aquatic_etheric',\n          result: {\n            name: 'Dimensional Current Webs',\n            description: 'Membranes that can manipulate water currents through subtle etheric manipulations.'\n          }\n        }\n      }, {\n        id: 'slithering',\n        name: 'Sinuous Musculature',\n        tier: 1,\n        affinities: {\n          terrain_harshness: 0.5,\n          pressure_gravity: 0.3,\n          resource_scarcity: -0.1,\n          temperature: 0.2,\n          light_conditions: -0.2,\n          ether_density: 0\n        },\n        description: 'Highly coordinated muscle structure allowing movement without limbs.',\n        connections: ['vibration_detection', 'reflective_scales'],\n        compatible: ['serpentine'],\n        synthesis: {\n          condition: 'extreme_adaptability',\n          result: {\n            name: 'Undulatory Phase Motion',\n            description: 'Movement through wave-like dimensional shifts rather than physical undulation.'\n          }\n        }\n      }, {\n        id: 'flight',\n        name: 'Aerial Locomotion',\n        tier: 1,\n        affinities: {\n          terrain_harshness: -0.3,\n          pressure_gravity: -0.7,\n          resource_scarcity: -0.2,\n          temperature: 0.1,\n          light_conditions: 0.6,\n          ether_density: 0.2\n        },\n        description: 'Wing structures and lightweight skeletal system enabling flight.',\n        connections: ['acute_vision', 'heat_vents'],\n        compatible: ['avian', 'insectoid'],\n        synthesis: {\n          condition: 'ethereal_skies',\n          result: {\n            name: 'Aetheric Glide',\n            description: 'Wings that interact with etheric currents, enabling flight through magical energy rather than air.'\n          }\n        }\n      }, {\n        id: 'shapeshifting',\n        name: 'Morphic Structure',\n        tier: 1,\n        affinities: {\n          terrain_harshness: 0.3,\n          pressure_gravity: 0.2,\n          resource_scarcity: -0.3,\n          temperature: 0.1,\n          light_conditions: 0,\n          ether_density: 0.6\n        },\n        description: 'Fluid body structure capable of adapting shape for mobility.',\n        connections: ['omnivore', 'ether_channeling'],\n        compatible: ['amorphous'],\n        synthesis: {\n          condition: 'etheric_saturation',\n          result: {\n            name: 'Dimensional Fluidity',\n            description: 'Ability to flow between dimensional planes, existing partially in multiple realities simultaneously.'\n          }\n        }\n      }],\n      metabolism: [{\n        id: 'carnivore',\n        name: 'Carnivore Digestion',\n        tier: 1,\n        affinities: {\n          resource_scarcity: 0.5,\n          temperature: 0.3,\n          terrain_harshness: 0.1,\n          light_conditions: 0,\n          pressure_gravity: 0,\n          ether_density: 0\n        },\n        description: 'Specialized digestive system optimized for meat processing.',\n        connections: ['enhanced_muscle', 'acute_vision'],\n        compatible: ['all'],\n        synthesis: {\n          condition: 'apex_predator',\n          result: {\n            name: 'Essence Extraction',\n            description: 'Ability to consume and metabolize the life essence of prey beyond mere physical substance.'\n          }\n        }\n      }, {\n        id: 'omnivore',\n        name: 'Omnivore Adaptation',\n        tier: 1,\n        affinities: {\n          resource_scarcity: 0.6,\n          terrain_harshness: 0.2,\n          temperature: 0.1,\n          light_conditions: 0,\n          pressure_gravity: 0,\n          ether_density: 0\n        },\n        description: 'Versatile digestive system capable of processing diverse food sources.',\n        connections: ['bioluminescence', 'reflective_scales'],\n        compatible: ['all'],\n        synthesis: {\n          condition: 'scarce_resources',\n          result: {\n            name: 'Universal Digestion',\n            description: 'Capacity to derive nutrients from almost any organic or inorganic substance.'\n          }\n        }\n      }, {\n        id: 'photosynthetic',\n        name: 'Photosynthetic Cells',\n        tier: 1,\n        affinities: {\n          light_conditions: 0.9,\n          resource_scarcity: 0.7,\n          temperature: 0.4,\n          terrain_harshness: -0.2,\n          pressure_gravity: 0,\n          ether_density: 0.1\n        },\n        description: 'Cellular structures that can convert light into energy.',\n        connections: ['ether_sensing', 'reflective_scales'],\n        compatible: ['all'],\n        synthesis: {\n          condition: 'high_light_ether',\n          result: {\n            name: 'Etheric Photosynthesis',\n            description: 'Advanced cells that can convert ambient etheric energy into biological energy.'\n          }\n        }\n      }, {\n        id: 'ether_consumption',\n        name: 'Ether Consumption',\n        tier: 1,\n        affinities: {\n          ether_density: 0.9,\n          resource_scarcity: 0.6,\n          temperature: -0.1,\n          terrain_harshness: -0.1,\n          pressure_gravity: 0,\n          light_conditions: -0.3\n        },\n        description: 'Metabolic pathway that processes ambient etheric energy.',\n        connections: ['ether_channeling', 'bioluminescence'],\n        compatible: ['all'],\n        synthesis: {\n          condition: 'etheric_saturation',\n          result: {\n            name: 'Reality Consumption',\n            description: 'Ability to metabolize the fabric of reality itself, subsisting on dimensional energies.'\n          }\n        }\n      }],\n      sensory: [{\n        id: 'acute_vision',\n        name: 'Acute Vision',\n        tier: 1,\n        affinities: {\n          light_conditions: 0.8,\n          terrain_harshness: 0.3,\n          resource_scarcity: 0.2,\n          temperature: 0,\n          pressure_gravity: 0,\n          ether_density: 0\n        },\n        description: 'Highly developed visual organs with exceptional acuity.',\n        connections: ['enhanced_muscle', 'eagle_eyes'],\n        compatible: ['all'],\n        synthesis: {\n          condition: 'extreme_light',\n          result: {\n            name: 'Reality Perception',\n            description: 'Vision that perceives multiple planes of reality simultaneously, seeing beyond physical existence.'\n          }\n        }\n      }, {\n        id: 'sonar_mapping',\n        name: 'Echolocation',\n        tier: 1,\n        affinities: {\n          light_conditions: -0.8,\n          terrain_harshness: 0.5,\n          pressure_gravity: 0.1,\n          temperature: 0,\n          resource_scarcity: 0,\n          ether_density: 0.2\n        },\n        description: 'Ability to emit and detect sound waves for environmental mapping.',\n        connections: ['vibration_detection', 'bioluminescence'],\n        compatible: ['all'],\n        synthesis: {\n          condition: 'extreme_darkness',\n          result: {\n            name: 'Dimensional Sonar',\n            description: 'Echolocation that can detect entities and structures across dimensional boundaries.'\n          }\n        }\n      }, {\n        id: 'vibration_detection',\n        name: 'Vibration Detection',\n        tier: 1,\n        affinities: {\n          terrain_harshness: 0.6,\n          pressure_gravity: 0.4,\n          light_conditions: -0.3,\n          temperature: 0,\n          resource_scarcity: 0,\n          ether_density: 0.1\n        },\n        description: 'Specialized organs that can detect minute vibrations through various media.',\n        connections: ['sonar_mapping', 'thick_blubber'],\n        compatible: ['all'],\n        synthesis: {\n          condition: 'extreme_sensitivity',\n          result: {\n            name: 'Temporal Tremor Sense',\n            description: 'Ability to detect vibrations through time, sensing events before they occur.'\n          }\n        }\n      }, {\n        id: 'ether_sensing',\n        name: 'Ether Sensing',\n        tier: 1,\n        affinities: {\n          ether_density: 0.8,\n          light_conditions: 0.2,\n          terrain_harshness: 0,\n          temperature: 0,\n          resource_scarcity: 0,\n          pressure_gravity: 0.1\n        },\n        description: 'Specialized organs that can detect and interpret etheric energy patterns.',\n        connections: ['photosynthetic', 'ether_channeling'],\n        compatible: ['all'],\n        synthesis: {\n          condition: 'etheric_saturation',\n          result: {\n            name: 'Soul Reading',\n            description: 'Perception that can detect and analyze the essence of living beings beyond physical form.'\n          }\n        }\n      }],\n      etheric: [{\n        id: 'ether_sensing',\n        name: 'Ether Sensing',\n        tier: 1,\n        affinities: {\n          ether_density: 0.8,\n          light_conditions: 0.2,\n          terrain_harshness: 0,\n          temperature: 0,\n          resource_scarcity: 0,\n          pressure_gravity: 0.1\n        },\n        description: 'Specialized organs that can detect and interpret etheric energy patterns.',\n        connections: ['photosynthetic', 'ether_channeling'],\n        compatible: ['all'],\n        synthesis: {\n          condition: 'etheric_saturation',\n          result: {\n            name: 'Soul Reading',\n            description: 'Perception that can detect and analyze the essence of living beings beyond physical form.'\n          }\n        }\n      }, {\n        id: 'ether_channeling',\n        name: 'Ether Channeling',\n        tier: 1,\n        affinities: {\n          ether_density: 0.9,\n          temperature: 0.3,\n          light_conditions: 0.3,\n          terrain_harshness: 0,\n          resource_scarcity: -0.2,\n          pressure_gravity: 0.1\n        },\n        description: 'Biological structures capable of directing and manipulating etheric energies.',\n        connections: ['ether_sensing', 'bioluminescence'],\n        compatible: ['all'],\n        synthesis: {\n          condition: 'etheric_mastery',\n          result: {\n            name: 'Reality Weaving',\n            description: 'Ability to manipulate the fabric of reality through precise etheric control.'\n          }\n        }\n      }, {\n        id: 'bioluminescence',\n        name: 'Bioluminescence',\n        tier: 1,\n        affinities: {\n          light_conditions: -0.6,\n          ether_density: 0.5,\n          resource_scarcity: -0.3,\n          temperature: 0,\n          terrain_harshness: 0,\n          pressure_gravity: 0\n        },\n        description: 'Ability to produce light through biochemical processes.',\n        connections: ['ether_channeling', 'omnivore'],\n        compatible: ['all'],\n        synthesis: {\n          condition: 'dark_ethereal',\n          result: {\n            name: 'Hypnotic Patterns',\n            description: 'Light displays that can induce altered states of consciousness in observers.'\n          }\n        }\n      }, {\n        id: 'dimensional_anchor',\n        name: 'Dimensional Anchor',\n        tier: 1,\n        affinities: {\n          ether_density: 0.7,\n          pressure_gravity: 0.6,\n          resource_scarcity: -0.2,\n          temperature: 0,\n          terrain_harshness: 0.2,\n          light_conditions: 0.1\n        },\n        description: 'Etheric organ that stabilizes the creature\\'s position within reality.',\n        connections: ['ether_sensing', 'vibration_detection'],\n        compatible: ['all'],\n        synthesis: {\n          condition: 'reality_flux',\n          result: {\n            name: 'Dimensional Phasing',\n            description: 'Control over personal dimensional state, allowing phasing between planes of existence.'\n          }\n        }\n      }],\n      thermal: [{\n        id: 'thick_blubber',\n        name: 'Thick Blubber',\n        tier: 1,\n        affinities: {\n          temperature: -0.8,\n          pressure_gravity: 0.3,\n          resource_scarcity: -0.4,\n          terrain_harshness: 0.1,\n          light_conditions: 0,\n          ether_density: 0\n        },\n        description: 'Dense fatty tissue layer providing insulation in cold environments.',\n        connections: ['vibration_detection', 'enhanced_muscle'],\n        compatible: ['all'],\n        synthesis: {\n          condition: 'extreme_cold',\n          result: {\n            name: 'Thermal Void',\n            description: 'Tissues that create a pocket of absolute thermal isolation from the environment.'\n          }\n        }\n      }, {\n        id: 'reflective_scales',\n        name: 'Reflective Scales',\n        tier: 1,\n        affinities: {\n          temperature: 0.7,\n          light_conditions: 0.6,\n          terrain_harshness: 0.3,\n          resource_scarcity: -0.2,\n          pressure_gravity: 0,\n          ether_density: 0.1\n        },\n        description: 'Light-reflecting scales that help regulate heat absorption.',\n        connections: ['running', 'photosynthetic'],\n        compatible: ['all'],\n        synthesis: {\n          condition: 'extreme_heat',\n          result: {\n            name: 'Thermal Manipulator Scales',\n            description: 'Scales that can actively redirect and manipulate thermal energy in the environment.'\n          }\n        }\n      }, {\n        id: 'heat_vents',\n        name: 'Heat Vents',\n        tier: 1,\n        affinities: {\n          temperature: 0.8,\n          ether_density: 0.3,\n          resource_scarcity: -0.3,\n          terrain_harshness: 0,\n          light_conditions: 0,\n          pressure_gravity: 0\n        },\n        description: 'Specialized structures that can rapidly dissipate excess heat.',\n        connections: ['running', 'ether_channeling'],\n        compatible: ['all'],\n        synthesis: {\n          condition: 'volcanic_environment',\n          result: {\n            name: 'Plasma Channeling',\n            description: 'Ability to vent superheated plasma as a defensive weapon or environmental tool.'\n          }\n        }\n      }, {\n        id: 'thermal_conversion',\n        name: 'Thermal Conversion',\n        tier: 1,\n        affinities: {\n          temperature: 0.4,\n          temperature: -0.4,\n          // Adapts to both extremes\n          resource_scarcity: 0.5,\n          ether_density: 0.3,\n          terrain_harshness: 0,\n          light_conditions: 0.1,\n          pressure_gravity: 0\n        },\n        description: 'Cellular structures that convert temperature differentials into usable energy.',\n        connections: ['omnivore', 'ether_sensing'],\n        compatible: ['all'],\n        synthesis: {\n          condition: 'thermal_extremes',\n          result: {\n            name: 'Entropic Manipulation',\n            description: 'Control over thermodynamic entropy, creating areas of perfect order or chaos.'\n          }\n        }\n      }]\n    };\n\n    // Advanced traits (tier 2)\n    const advancedTraits = {\n      sensory: [{\n        id: 'eagle_eyes',\n        name: 'Eagle-like Vision',\n        tier: 2,\n        parentId: 'acute_vision',\n        affinities: {\n          light_conditions: 0.9,\n          terrain_harshness: 0.5,\n          resource_scarcity: 0.4,\n          temperature: 0,\n          pressure_gravity: 0,\n          ether_density: 0.1\n        },\n        description: 'Exceptionally developed vision with incredible range and detail perception.',\n        connections: ['acute_vision'],\n        compatible: ['all'],\n        synthesis: {\n          condition: 'apex_perception',\n          result: {\n            name: 'Omniscient Perception',\n            description: 'Vision that transcends physical limitations, seeing through all obstacles across vast distances.'\n          }\n        }\n      }, {\n        id: 'void_perception',\n        name: 'Void Perception',\n        tier: 2,\n        parentId: 'ether_sensing',\n        affinities: {\n          ether_density: 0.9,\n          light_conditions: -0.7,\n          resource_scarcity: 0.2,\n          temperature: -0.3,\n          pressure_gravity: 0.5,\n          terrain_harshness: 0.1\n        },\n        description: 'Perception beyond normal reality, sensing the void between dimensions.',\n        connections: ['ether_sensing', 'dimensional_anchor'],\n        compatible: ['all'],\n        synthesis: {\n          condition: 'interdimensional',\n          result: {\n            name: 'Cosmic Awareness',\n            description: 'Consciousness that expands beyond individual perception, connecting to the universe itself.'\n          }\n        }\n      }],\n      locomotion: [{\n        id: 'enhanced_muscle',\n        name: 'Enhanced Musculature',\n        tier: 2,\n        parentId: 'running',\n        affinities: {\n          terrain_harshness: 0.8,\n          pressure_gravity: 0.7,\n          resource_scarcity: -0.4,\n          temperature: 0.1,\n          light_conditions: 0,\n          ether_density: 0\n        },\n        description: 'Highly developed muscle structures with exceptional strength and endurance.',\n        connections: ['running', 'climbing', 'carnivore', 'acute_vision', 'thick_blubber'],\n        compatible: ['bipedal', 'quadrupedal', 'insectoid'],\n        synthesis: {\n          condition: 'apex_physical',\n          result: {\n            name: 'Force Multiplication Tissues',\n            description: 'Muscles that multiply applied force through micro-dimensional folding.'\n          }\n        }\n      }, {\n        id: 'ethereal_movement',\n        name: 'Ethereal Movement',\n        tier: 2,\n        parentId: 'ether_channeling',\n        affinities: {\n          ether_density: 0.9,\n          terrain_harshness: 0.4,\n          pressure_gravity: -0.6,\n          resource_scarcity: -0.3,\n          light_conditions: 0.2,\n          temperature: 0\n        },\n        description: 'Partial phasing allowing movement through solid objects and across dimensional boundaries.',\n        connections: ['ether_channeling', 'dimensional_anchor'],\n        compatible: ['all'],\n        synthesis: {\n          condition: 'ethereal_mastery',\n          result: {\n            name: 'Quantum Teleportation',\n            description: 'Instantaneous movement across any distance through precise manipulation of quantum states.'\n          }\n        }\n      }],\n      etheric: [{\n        id: 'reality_manipulation',\n        name: 'Reality Manipulation',\n        tier: 2,\n        parentId: 'ether_channeling',\n        affinities: {\n          ether_density: 1.0,\n          pressure_gravity: 0.6,\n          light_conditions: 0.5,\n          resource_scarcity: -0.5,\n          temperature: 0.3,\n          terrain_harshness: 0.4\n        },\n        description: 'Advanced etheric organs capable of warping local reality in limited ways.',\n        connections: ['ether_channeling', 'dimensional_anchor'],\n        compatible: ['all'],\n        synthesis: {\n          condition: 'reality_mastery',\n          result: {\n            name: 'Creation Principle',\n            description: 'Ability to manifest thoughts into physical reality through pure will and etheric control.'\n          }\n        }\n      }],\n      metabolism: [{\n        id: 'essence_consumption',\n        name: 'Essence Consumption',\n        tier: 2,\n        parentId: 'carnivore',\n        affinities: {\n          resource_scarcity: 0.9,\n          ether_density: 0.7,\n          temperature: 0.2,\n          light_conditions: -0.3,\n          pressure_gravity: 0.1,\n          terrain_harshness: 0.1\n        },\n        description: 'Ability to consume and absorb the essence of prey, including traits and memories.',\n        connections: ['carnivore', 'ether_sensing'],\n        compatible: ['all'],\n        synthesis: {\n          condition: 'apex_consumption',\n          result: {\n            name: 'Soul Assimilation',\n            description: 'Complete absorption of preys consciousness, memories, and spiritual essence.'\n          }\n        }\n      }],\n      thermal: [{\n        id: 'thermal_projection',\n        name: 'Thermal Projection',\n        tier: 2,\n        parentId: 'heat_vents',\n        affinities: {\n          temperature: 0.9,\n          temperature: -0.5,\n          // Works at both extremes\n          ether_density: 0.6,\n          resource_scarcity: -0.4,\n          terrain_harshness: 0.3,\n          light_conditions: 0.2,\n          pressure_gravity: 0\n        },\n        description: 'Ability to project thermal energy in controlled beams or waves.',\n        connections: ['heat_vents', 'ether_channeling'],\n        compatible: ['all'],\n        synthesis: {\n          condition: 'thermal_mastery',\n          result: {\n            name: 'Absolute Zero Projection',\n            description: 'Projection of perfect cold that freezes all molecular motion in the target area.'\n          }\n        }\n      }]\n    };\n\n    // Specialized traits for specific body shapes\n    const specializedTraits = {\n      bipedal: {\n        locomotion: [{\n          id: 'bipedal_agility',\n          name: 'Bipedal Agility',\n          tier: 2,\n          parentId: 'running',\n          affinities: {\n            terrain_harshness: 0.8,\n            pressure_gravity: 0.5,\n            resource_scarcity: -0.2,\n            temperature: 0.2,\n            light_conditions: 0.3,\n            ether_density: 0\n          },\n          description: 'Specialized balance and coordination optimized for upright movement.',\n          connections: ['running', 'climbing'],\n          compatible: ['bipedal'],\n          synthesis: {\n            condition: 'extreme_agility',\n            result: {\n              name: 'Temporal Reflex',\n              description: 'Movement occurring slightly before the decision to move, through temporal manipulation.'\n            }\n          }\n        }]\n      },\n      quadrupedal: {\n        locomotion: [{\n          id: 'quadrupedal_stability',\n          name: 'Quadrupedal Stability',\n          tier: 2,\n          parentId: 'running',\n          affinities: {\n            terrain_harshness: 0.9,\n            pressure_gravity: 0.7,\n            resource_scarcity: -0.1,\n            temperature: 0.1,\n            light_conditions: 0.1,\n            ether_density: 0\n          },\n          description: 'Enhanced stability and load-bearing capacity from four-limb structure.',\n          connections: ['running', 'enhanced_muscle'],\n          compatible: ['quadrupedal'],\n          synthesis: {\n            condition: 'extreme_stability',\n            result: {\n              name: 'Gravitational Anchor',\n              description: 'Selective control over personal gravitational field providing perfect stability in any conditions.'\n            }\n          }\n        }]\n      },\n      serpentine: {\n        locomotion: [{\n          id: 'serpentine_flexibility',\n          name: 'Serpentine Flexibility',\n          tier: 2,\n          parentId: 'slithering',\n          affinities: {\n            terrain_harshness: 0.7,\n            pressure_gravity: 0.4,\n            resource_scarcity: -0.1,\n            temperature: 0.1,\n            light_conditions: 0,\n            ether_density: 0.1\n          },\n          description: 'Extreme body flexibility allowing navigation of confined spaces.',\n          connections: ['vibration_detection', 'reflective_scales'],\n          compatible: ['serpentine'],\n          synthesis: {\n            condition: 'extreme_adaptation',\n            result: {\n              name: 'Dimensional Coiling',\n              description: 'Body that can loop through multiple dimensional planes, defying conventional physics.'\n            }\n          }\n        }]\n      },\n      amorphous: {\n        metabolism: [{\n          id: 'absorptive_assimilation',\n          name: 'Absorptive Assimilation',\n          tier: 2,\n          parentId: 'omnivore',\n          affinities: {\n            resource_scarcity: 0.9,\n            ether_density: 0.5,\n            terrain_harshness: 0.3,\n            temperature: 0.2,\n            light_conditions: -0.1,\n            pressure_gravity: 0\n          },\n          description: 'Ability to absorb and incorporate materials and traits from consumed entities.',\n          connections: ['shapeshifting', 'omnivore'],\n          compatible: ['amorphous'],\n          synthesis: {\n            condition: 'apex_adaptation',\n            result: {\n              name: 'Perfect Mimicry',\n              description: 'Complete assimilation of consumed entities, including memories, abilities, and consciousness.'\n            }\n          }\n        }]\n      },\n      insectoid: {\n        sensory: [{\n          id: 'compound_perception',\n          name: 'Compound Perception',\n          tier: 2,\n          parentId: 'acute_vision',\n          affinities: {\n            light_conditions: 0.7,\n            terrain_harshness: 0.5,\n            resource_scarcity: 0.2,\n            temperature: 0.1,\n            pressure_gravity: 0.1,\n            ether_density: 0.2\n          },\n          description: 'Multi-faceted visual system providing nearly 360-degree awareness.',\n          connections: ['acute_vision', 'vibration_detection'],\n          compatible: ['insectoid'],\n          synthesis: {\n            condition: 'omnidirectional_mastery',\n            result: {\n              name: 'Quantum Observer',\n              description: 'Simultaneous perception from all possible visual angles through quantum observation.'\n            }\n          }\n        }]\n      },\n      avian: {\n        sensory: [{\n          id: 'predictive_aerial_mapping',\n          name: 'Aerial Current Sensing',\n          tier: 2,\n          parentId: 'acute_vision',\n          affinities: {\n            light_conditions: 0.6,\n            pressure_gravity: -0.7,\n            terrain_harshness: -0.2,\n            temperature: 0.3,\n            resource_scarcity: 0.1,\n            ether_density: 0.4\n          },\n          description: 'Ability to sense and predict air currents and atmospheric patterns.',\n          connections: ['flight', 'ether_sensing'],\n          compatible: ['avian'],\n          synthesis: {\n            condition: 'atmospheric_mastery',\n            result: {\n              name: 'Weather Manipulation',\n              description: 'Control over local atmospheric conditions through etheric attunement to air currents.'\n            }\n          }\n        }]\n      },\n      aquatic: {\n        sensory: [{\n          id: 'pressure_sense',\n          name: 'Pressure Sense',\n          tier: 2,\n          parentId: 'vibration_detection',\n          affinities: {\n            pressure_gravity: 0.9,\n            terrain_harshness: 0.3,\n            light_conditions: -0.4,\n            temperature: -0.2,\n            resource_scarcity: 0.1,\n            ether_density: 0.3\n          },\n          description: 'Specialized organs that can detect minute changes in water pressure and currents.',\n          connections: ['webbed', 'vibration_detection'],\n          compatible: ['aquatic'],\n          synthesis: {\n            condition: 'aquatic_mastery',\n            result: {\n              name: 'Hydromancy',\n              description: 'Control over water through etheric attunement, manipulating currents and state changes.'\n            }\n          }\n        }]\n      }\n    };\n\n    // Combine traits based on selected body shape\n    const allTraits = {\n      ...baseTraits\n    };\n\n    // Add advanced traits\n    Object.keys(advancedTraits).forEach(category => {\n      if (!allTraits[category]) allTraits[category] = [];\n      allTraits[category] = [...allTraits[category], ...advancedTraits[category]];\n    });\n\n    // Add specialized traits for selected body shape\n    if (specializedTraits[bodyShapeId]) {\n      Object.keys(specializedTraits[bodyShapeId]).forEach(category => {\n        if (!allTraits[category]) allTraits[category] = [];\n        allTraits[category] = [...allTraits[category], ...specializedTraits[bodyShapeId][category]];\n      });\n    }\n    return allTraits;\n  };\n\n  // Get all traits as a flattened array\n  const getAllTraits = () => {\n    const traitsByCategory = getTraitsByBodyShape(selectedBodyShape);\n    let allTraits = [];\n    Object.keys(traitsByCategory).forEach(category => {\n      traitsByCategory[category].forEach(trait => {\n        // Add category to trait for easier reference\n        allTraits.push({\n          ...trait,\n          category\n        });\n      });\n    });\n    return allTraits;\n  };\n\n  // Find trait by ID\n  const findTraitById = id => {\n    const allTraits = getAllTraits();\n    return allTraits.find(trait => trait.id === id);\n  };\n\n  // Calculate trait compatibility with body shape\n  const isTraitCompatibleWithBodyShape = trait => {\n    if (!trait.compatible) return true;\n    if (trait.compatible.includes('all')) return true;\n    return trait.compatible.includes(selectedBodyShape);\n  };\n\n  // Calculate trait affinity compatibility\n  const calculateCompatibility = (trait1, trait2) => {\n    if (!trait1 || !trait2) return 0.3; // Baseline compatibility\n\n    const stressors = ['terrain_harshness', 'resource_scarcity', 'light_conditions', 'ether_density', 'temperature', 'pressure_gravity'];\n    let totalSimilarity = 0;\n    let totalWeight = 0;\n    stressors.forEach(stressor => {\n      const val1 = trait1.affinities[stressor] || 0;\n      const val2 = trait2.affinities[stressor] || 0;\n\n      // Calculate similarity (1 for identical, 0 for completely opposite)\n      const similarity = 1 - Math.min(1, Math.abs(val1 - val2) / 2);\n\n      // Weight based on how important this stressor is to either trait\n      const weight = (Math.abs(val1) + Math.abs(val2)) / 2;\n      totalSimilarity += similarity * (1 + weight * 0.5);\n      totalWeight += 1;\n    });\n\n    // Calculate compatibility score (0.3 to 1.0)\n    return 0.3 + 0.5 * (totalSimilarity / (totalWeight * 1.5));\n  };\n\n  // Calculate combined trait affinity for a stressor\n  const calculateCombinedAffinity = stressor => {\n    const allTraits = getAllTraits();\n    const traitsWithAffinity = allTraits.filter(trait => trait.affinities && trait.affinities[stressor] !== undefined && trait.affinities[stressor] !== 0 && isTraitCompatibleWithBodyShape(trait));\n    if (traitsWithAffinity.length === 0) return 0;\n\n    // Sum affinities and normalize by square root of trait count\n    const sum = traitsWithAffinity.reduce((total, trait) => total + trait.affinities[stressor], 0);\n\n    // Using tanh to constrain to [-1, 1] range\n    return Math.tanh(sum / Math.sqrt(traitsWithAffinity.length));\n  };\n\n  // Calculate effective stress for a stressor\n  const calculateEffectiveStress = stressor => {\n    const stressorValue = environment[stressor];\n    if (stressorValue === 0) return 0;\n    const combinedAffinity = calculateCombinedAffinity(stressor);\n\n    // Sigmoid ratio calculation\n    const ratio = combinedAffinity / stressorValue;\n    const sigmoid = 1 / (1 + Math.exp(-3 * (ratio - 0.8)));\n\n    // Effective stress calculation\n    return stressorValue * (1 - sigmoid);\n  };\n\n  // Calculate total effective stress\n  const calculateTotalEffectiveStress = () => {\n    const stressors = ['terrain_harshness', 'resource_scarcity', 'light_conditions', 'ether_density', 'temperature', 'pressure_gravity'];\n\n    // Calculate effective stress for all stressors\n    const stressorValues = stressors.map(stressor => calculateEffectiveStress(stressor));\n\n    // Sum and normalize\n    const sum = stressorValues.reduce((total, stress) => total + stress, 0);\n    const numStressors = stressors.length;\n\n    // Using tanh to constrain to [0, 1] range (mapping from [-1, 1] to [0, 1])\n    const stress = (Math.tanh(sum / Math.sqrt(numStressors)) + 1) / 2;\n    return stress;\n  };\n\n  // Calculate adaptation probability\n  const calculateAdaptationProbability = (stress, duration = 10, threshold = 0.5) => {\n    const adaptationPressure = stress * duration / 25 - threshold;\n    return 1 / (1 + Math.exp(-10 * adaptationPressure));\n  };\n\n  // Calculate environmental relevance for a trait\n  const calculateEnvironmentalRelevance = trait => {\n    if (!trait || !trait.affinities) return 0;\n    let relevanceScore = 0;\n    Object.keys(environment).forEach(stressor => {\n      if (trait.affinities[stressor] !== undefined) {\n        const stressorValue = environment[stressor];\n        const traitAffinity = trait.affinities[stressor];\n\n        // Calculate relevance based on formula from documentation\n        relevanceScore += Math.abs(stressorValue) * stressorValue * traitAffinity;\n      }\n    });\n\n    // Normalize using hyperbolic tangent\n    return Math.tanh(relevanceScore);\n  };\n\n  // Get trait category color\n  const getTraitCategoryColor = categoryId => {\n    const category = traitCategories.find(c => c.id === categoryId);\n    return category ? category.color : '#BFAD7F';\n  };\n\n  // Get trait glow intensity based on environmental relevance\n  const getTraitGlowIntensity = trait => {\n    const relevance = calculateEnvironmentalRelevance(trait);\n    // Scale from 0 to 1\n    const scaledRelevance = (relevance + 1) / 2;\n    return scaledRelevance;\n  };\n\n  // Handle mouse move for background effect\n  const handleMouseMove = e => {\n    setCursorPosition({\n      x: e.clientX,\n      y: e.clientY\n    });\n  };\n\n  // Handle trait selection\n  const handleTraitClick = trait => {\n    if (selectedTrait && selectedTrait.id === trait.id) {\n      setSelectedTrait(null);\n      setSelectedTraitConnections([]);\n    } else {\n      setSelectedTrait(trait);\n\n      // Get connected traits\n      const connections = [];\n      if (trait.connections && trait.connections.length > 0) {\n        trait.connections.forEach(connectionId => {\n          const connectedTrait = findTraitById(connectionId);\n          if (connectedTrait) {\n            connections.push(connectedTrait);\n          }\n        });\n      }\n\n      // If this is a tier > 0 trait, add parent trait\n      if (trait.tier > 0 && trait.parentId) {\n        const parentTrait = findTraitById(trait.parentId);\n        if (parentTrait && !connections.includes(parentTrait)) {\n          connections.push(parentTrait);\n        }\n      }\n\n      // Find traits where this trait is the parent\n      const allTraits = getAllTraits();\n      allTraits.forEach(t => {\n        if (t.parentId === trait.id && !connections.includes(t)) {\n          connections.push(t);\n        }\n      });\n      setSelectedTraitConnections(connections);\n    }\n  };\n\n  // Handle body shape click\n  const handleBodyShapeClick = () => {\n    setShowBodyShapeSelector(!showBodyShapeSelector);\n    setSelectedTrait(null);\n  };\n\n  // Change body shape\n  const changeBodyShape = shapeId => {\n    setSelectedBodyShape(shapeId);\n    setShowBodyShapeSelector(false);\n    setSelectedTrait(null);\n  };\n\n  // Setup the canvas and animation when component mounts or body shape changes\n  useEffect(() => {\n    if (!canvasRef.current || !containerRef.current) return;\n    const canvas = canvasRef.current;\n    const container = containerRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Set up canvas dimensions\n    const updateCanvasDimensions = () => {\n      const rect = container.getBoundingClientRect();\n      canvas.width = rect.width;\n      canvas.height = rect.height;\n      networkRef.current = {\n        width: rect.width,\n        height: rect.height,\n        centerX: rect.width / 2,\n        centerY: rect.height / 2\n      };\n    };\n    updateCanvasDimensions();\n    window.addEventListener('resize', updateCanvasDimensions);\n\n    // Animation function\n    const animate = () => {\n      if (!networkRef.current) return;\n\n      // Clear canvas\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      const {\n        centerX,\n        centerY\n      } = networkRef.current;\n      const allTraits = getAllTraits();\n      const traitPositions = {};\n      traitRefs.current = {};\n\n      // Draw background circles representing tiers\n      const tierRadius = [0, 180, 300, 420];\n\n      // Draw tier circles\n      for (let tier = 1; tier <= 3; tier++) {\n        ctx.beginPath();\n        ctx.arc(centerX, centerY, tierRadius[tier], 0, Math.PI * 2);\n        ctx.strokeStyle = 'rgba(191, 173, 127, 0.1)';\n        ctx.setLineDash(tier === 1 ? [] : [5, 5]);\n        ctx.lineWidth = 1;\n        ctx.stroke();\n        ctx.setLineDash([]);\n      }\n\n      // Group traits by category and tier\n      const traitsByCategory = {};\n      traitCategories.forEach(category => {\n        traitsByCategory[category.id] = {\n          tier1: [],\n          tier2: [],\n          tier3: []\n        };\n      });\n      allTraits.forEach(trait => {\n        const tier = trait.tier || 1;\n        if (tier <= 3 && traitsByCategory[trait.category]) {\n          traitsByCategory[trait.category][`tier${tier}`].push(trait);\n        }\n      });\n\n      // Calculate positions for all traits\n      traitCategories.forEach((category, categoryIndex) => {\n        const categoryId = category.id;\n        const categoryAngleOffset = categoryIndex / traitCategories.length * Math.PI * 2;\n        [1, 2, 3].forEach(tier => {\n          const traits = traitsByCategory[categoryId][`tier${tier}`] || [];\n          const traitCount = traits.length;\n          if (traitCount === 0) return;\n          const angleSpread = Math.PI * 2 / traitCategories.length * 0.8;\n          traits.forEach((trait, index) => {\n            const traitAngle = categoryAngleOffset + angleSpread / Math.max(1, traitCount - 1) * index - angleSpread / 2;\n            const radius = tierRadius[tier];\n            const x = centerX + Math.cos(traitAngle) * radius;\n            const y = centerY + Math.sin(traitAngle) * radius;\n            traitPositions[trait.id] = {\n              x,\n              y,\n              trait\n            };\n            traitRefs.current[trait.id] = {\n              x,\n              y,\n              radius: getNodeRadius(trait),\n              trait\n            };\n          });\n        });\n      });\n\n      // Draw connections\n      allTraits.forEach(trait => {\n        if (trait.connections) {\n          const sourcePos = traitPositions[trait.id];\n          if (!sourcePos) return;\n          trait.connections.forEach(targetId => {\n            const targetPos = traitPositions[targetId];\n            if (!targetPos) return;\n            const sourceVisible = showAllTraits || selectedTrait && (selectedTrait.id === trait.id || selectedTraitConnections.some(t => t.id === trait.id));\n            const targetVisible = showAllTraits || selectedTrait && (selectedTrait.id === targetId || selectedTraitConnections.some(t => t.id === targetId));\n            if (sourceVisible && targetVisible) {\n              const compatibility = calculateCompatibility(sourcePos.trait, targetPos.trait);\n\n              // Draw connection\n              ctx.beginPath();\n              ctx.moveTo(sourcePos.x, sourcePos.y);\n\n              // Create a gentle curve for the connection\n              const midX = (sourcePos.x + targetPos.x) / 2;\n              const midY = (sourcePos.y + targetPos.y) / 2;\n\n              // Pull toward center based on tier difference\n              const pullFactor = 0.2;\n              const controlX = midX + (centerX - midX) * pullFactor;\n              const controlY = midY + (centerY - midY) * pullFactor;\n              ctx.quadraticCurveTo(controlX, controlY, targetPos.x, targetPos.y);\n              const isSelected = selectedTrait && (selectedTrait.id === trait.id || selectedTrait.id === targetId);\n\n              // Gradient for connection\n              const gradient = ctx.createLinearGradient(sourcePos.x, sourcePos.y, targetPos.x, targetPos.y);\n              const sourceColor = getTraitCategoryColor(sourcePos.trait.category);\n              const targetColor = getTraitCategoryColor(targetPos.trait.category);\n              gradient.addColorStop(0, sourceColor);\n              gradient.addColorStop(1, targetColor);\n\n              // Set line style\n              ctx.strokeStyle = gradient;\n              ctx.lineWidth = isSelected ? 3 : 2;\n              ctx.globalAlpha = isSelected ? 0.8 : 0.5 * compatibility;\n              if (isSelected) {\n                ctx.shadowColor = 'rgba(255, 253, 227, 0.6)';\n                ctx.shadowBlur = 8;\n              }\n              ctx.stroke();\n              ctx.globalAlpha = 1;\n              ctx.shadowBlur = 0;\n            }\n          });\n        }\n\n        // Draw parent-child connections\n        if (trait.tier > 0 && trait.parentId) {\n          const childPos = traitPositions[trait.id];\n          const parentPos = traitPositions[trait.parentId];\n          if (childPos && parentPos) {\n            const childVisible = showAllTraits || selectedTrait && (selectedTrait.id === trait.id || selectedTraitConnections.some(t => t.id === trait.id));\n            const parentVisible = showAllTraits || selectedTrait && (selectedTrait.id === trait.parentId || selectedTraitConnections.some(t => t.id === trait.parentId));\n            if (childVisible && parentVisible) {\n              const isSelected = selectedTrait && (selectedTrait.id === trait.id || selectedTrait.id === trait.parentId);\n\n              // Draw evolutionary connection\n              ctx.beginPath();\n              ctx.moveTo(childPos.x, childPos.y);\n\n              // Create a curve toward center\n              const midX = (childPos.x + parentPos.x) / 2;\n              const midY = (childPos.y + parentPos.y) / 2;\n\n              // Pull toward center\n              const pullFactor = 0.25;\n              const controlX = midX + (centerX - midX) * pullFactor;\n              const controlY = midY + (centerY - midY) * pullFactor;\n              ctx.quadraticCurveTo(controlX, controlY, parentPos.x, parentPos.y);\n\n              // Special styling for evolutionary connections\n              const evolutionGradient = ctx.createLinearGradient(childPos.x, childPos.y, parentPos.x, parentPos.y);\n              const childColor = getTraitCategoryColor(childPos.trait.category);\n              const parentColor = getTraitCategoryColor(parentPos.trait.category);\n              evolutionGradient.addColorStop(0, childColor);\n              evolutionGradient.addColorStop(1, parentColor);\n              ctx.strokeStyle = evolutionGradient;\n              ctx.lineWidth = isSelected ? 3 : 2;\n              ctx.setLineDash([3, 3]);\n              ctx.globalAlpha = isSelected ? 0.9 : 0.6;\n              if (isSelected) {\n                ctx.shadowColor = 'rgba(255, 253, 227, 0.6)';\n                ctx.shadowBlur = 8;\n              }\n              ctx.stroke();\n              ctx.setLineDash([]);\n              ctx.globalAlpha = 1;\n              ctx.shadowBlur = 0;\n            }\n          }\n        }\n      });\n\n      // Draw nodes for each trait\n      Object.keys(traitPositions).forEach(traitId => {\n        const {\n          x,\n          y,\n          trait\n        } = traitPositions[traitId];\n        const category = trait.category;\n        const categoryColor = getTraitCategoryColor(category);\n        const isSelected = selectedTrait && selectedTrait.id === trait.id;\n        const isConnected = selectedTrait && selectedTraitConnections.some(t => t.id === trait.id);\n        const isVisible = showAllTraits || isSelected || isConnected;\n        if (!isVisible) return;\n\n        // Get trait size based on tier and state\n        const baseSize = trait.tier === 1 ? 16 : trait.tier === 2 ? 20 : 24;\n        const nodeSize = isSelected ? baseSize * 1.3 : isConnected ? baseSize * 1.1 : baseSize;\n\n        // Calculate glow based on environmental relevance\n        const glowIntensity = getTraitGlowIntensity(trait);\n\n        // Draw trait node with glow effect\n        ctx.beginPath();\n        ctx.arc(x, y, nodeSize, 0, Math.PI * 2);\n        ctx.fillStyle = categoryColor;\n\n        // Add glow based on environmental relevance\n        ctx.shadowColor = 'rgba(255, 253, 227, 0.8)';\n        ctx.shadowBlur = 10 + glowIntensity * 15;\n        ctx.fill();\n\n        // Add border\n        ctx.strokeStyle = isSelected ? '#FFFFFF' : categoryColor;\n        ctx.lineWidth = isSelected ? 3 : 2;\n        ctx.stroke();\n\n        // Reset shadow for text\n        ctx.shadowBlur = 0;\n\n        // Draw compatibility indicator for selected trait connections\n        if (isConnected && selectedTrait) {\n          const compatibility = calculateCompatibility(selectedTrait, trait);\n\n          // Draw compatibility arc around node\n          ctx.beginPath();\n          ctx.arc(x, y, nodeSize + 5, 0, Math.PI * 2 * compatibility);\n          ctx.strokeStyle = 'rgba(255, 255, 255, 0.8)';\n          ctx.lineWidth = 2;\n          ctx.stroke();\n        }\n\n        // Store node position and size for interaction\n        traitRefs.current[traitId] = {\n          x,\n          y,\n          radius: nodeSize,\n          trait\n        };\n      });\n\n      // Draw central body shape\n      if (bodyShapeIconRef.current) {\n        const bodyShape = bodyShapes.find(shape => shape.id === selectedBodyShape);\n        const bodyShapeSize = 50;\n\n        // Draw body shape background\n        ctx.beginPath();\n        ctx.arc(centerX, centerY, bodyShapeSize, 0, Math.PI * 2);\n        ctx.fillStyle = 'rgba(191, 173, 127, 0.8)';\n        ctx.shadowColor = 'rgba(191, 173, 127, 0.6)';\n        ctx.shadowBlur = 20;\n        ctx.fill();\n\n        // Draw body shape border\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.5)';\n        ctx.lineWidth = 2;\n        ctx.stroke();\n\n        // Reset shadow\n        ctx.shadowBlur = 0;\n\n        // Draw body shape text\n        ctx.font = 'bold 14px Arial';\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText((bodyShape === null || bodyShape === void 0 ? void 0 : bodyShape.name) || 'Body Shape', centerX, centerY);\n\n        // Store body shape position for interaction\n        bodyShapeIconRef.current = {\n          x: centerX,\n          y: centerY,\n          radius: bodyShapeSize\n        };\n      } else {\n        bodyShapeIconRef.current = {\n          x: centerX,\n          y: centerY,\n          radius: 50\n        };\n      }\n\n      // Continue animation\n      animationFrameRef.current = requestAnimationFrame(animate);\n    };\n\n    // Start animation loop\n    animate();\n\n    // Set loaded after a delay\n    const timer = setTimeout(() => {\n      setIsLoaded(true);\n    }, 1000);\n\n    // Cleanup on unmount\n    return () => {\n      window.removeEventListener('resize', updateCanvasDimensions);\n      clearTimeout(timer);\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [selectedBodyShape, selectedTrait, selectedTraitConnections, environment, showAllTraits, getTraitCategoryColor, calculateCompatibility, getTraitGlowIntensity]);\n\n  // Calculate stress and adaptation probability when environment changes\n  useEffect(() => {\n    const stress = calculateTotalEffectiveStress();\n    setTotalEffectiveStress(stress);\n    const probability = calculateAdaptationProbability(stress);\n    setAdaptationProbability(probability);\n  }, [environment, selectedBodyShape]);\n\n  // Handle canvas clicks to detect trait and body shape selection\n  const handleCanvasClick = e => {\n    if (!canvasRef.current || !bodyShapeIconRef.current) return;\n    const rect = canvasRef.current.getBoundingClientRect();\n    const mouseX = e.clientX - rect.left;\n    const mouseY = e.clientY - rect.top;\n\n    // Check if clicked on body shape\n    const {\n      x,\n      y,\n      radius\n    } = bodyShapeIconRef.current;\n    const distance = Math.sqrt((mouseX - x) ** 2 + (mouseY - y) ** 2);\n    if (distance <= radius) {\n      handleBodyShapeClick();\n      return;\n    }\n\n    // Check if clicked on any trait\n    let clickedTrait = null;\n    Object.keys(traitRefs.current).forEach(traitId => {\n      const traitRef = traitRefs.current[traitId];\n      const traitDistance = Math.sqrt((mouseX - traitRef.x) ** 2 + (mouseY - traitRef.y) ** 2);\n      if (traitDistance <= traitRef.radius) {\n        clickedTrait = traitRef.trait;\n      }\n    });\n    if (clickedTrait) {\n      handleTraitClick(clickedTrait);\n    } else if (selectedTrait) {\n      setSelectedTrait(null);\n      setSelectedTraitConnections([]);\n    }\n  };\n\n  // Handle canvas mouse movement for hover effects\n  const handleCanvasMouseMove = e => {\n    if (!canvasRef.current) return;\n    const rect = canvasRef.current.getBoundingClientRect();\n    const mouseX = e.clientX - rect.left;\n    const mouseY = e.clientY - rect.top;\n\n    // Check if mouse is over any trait\n    let hovered = null;\n    Object.keys(traitRefs.current).forEach(traitId => {\n      const traitRef = traitRefs.current[traitId];\n      const distance = Math.sqrt((mouseX - traitRef.x) ** 2 + (mouseY - traitRef.y) ** 2);\n      if (distance <= traitRef.radius) {\n        hovered = traitRef.trait;\n      }\n    });\n    setHoveredTrait(hovered);\n  };\n\n  // Handle filter mode changes\n  const handleFilterModeChange = mode => {\n    setFilterMode(mode);\n    if (mode === 'all') {\n      setShowAllTraits(true);\n    } else if (mode === 'relevance') {\n      // Show only traits with positive environmental relevance\n      setShowAllTraits(false);\n    } else if (mode === 'category' && selectedTrait) {\n      // Show only traits in the same category as selected trait\n      setShowAllTraits(false);\n    }\n  };\n\n  // Helper function to get node radius based on trait tier\n  const getNodeRadius = trait => {\n    if (!trait) return 16;\n    const tier = trait.tier || 1;\n    return tier === 1 ? 16 : tier === 2 ? 20 : 24;\n  };\n\n  // Render trait tooltip when hovering\n  const renderTraitTooltip = () => {\n    if (!hoveredTrait || selectedTrait) return null;\n    const trait = hoveredTrait;\n    const relevance = calculateEnvironmentalRelevance(trait);\n    return /*#__PURE__*/_jsxDEV(motion.div, {\n      initial: {\n        opacity: 0,\n        y: 10\n      },\n      animate: {\n        opacity: 1,\n        y: 0\n      },\n      exit: {\n        opacity: 0,\n        y: 10\n      },\n      transition: {\n        duration: 0.2\n      },\n      className: classes.traitTooltip,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.traitTooltipHeader,\n        style: {\n          backgroundColor: getTraitCategoryColor(trait.category)\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: trait.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1672,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Tier \", trait.tier, \" \", trait.category]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1673,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1669,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.traitTooltipContent,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: trait.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1676,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.traitTooltipStats,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.traitTooltipStat,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Environmental Relevance\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1679,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `${classes.traitTooltipStatValue} ${relevance > 0 ? classes.positive : relevance < 0 ? classes.negative : ''}`,\n              children: relevance.toFixed(2)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1680,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1678,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1677,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1675,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1662,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render environmental controls\n  const renderEnvironmentControls = () => {\n    const environmentControls = [{\n      id: 'temperature',\n      name: 'Temperature',\n      min: -1,\n      max: 1\n    }, {\n      id: 'light_conditions',\n      name: 'Light Conditions',\n      min: -1,\n      max: 1\n    }, {\n      id: 'terrain_harshness',\n      name: 'Terrain Harshness',\n      min: -1,\n      max: 1\n    }, {\n      id: 'resource_scarcity',\n      name: 'Resource Scarcity',\n      min: -1,\n      max: 1\n    }, {\n      id: 'ether_density',\n      name: 'Ether Density',\n      min: -1,\n      max: 1\n    }, {\n      id: 'pressure_gravity',\n      name: 'Pressure/Gravity',\n      min: -1,\n      max: 1\n    }];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.environmentControls,\n      children: [/*#__PURE__*/_jsxDEV(RevealText, {\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: classes.controlsTitle,\n          children: \"Environmental Stressors\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1704,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1703,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.environmentSliders,\n        children: environmentControls.map(control => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.sliderContainer,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.sliderLabel,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: control.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1711,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `\n                  ${classes.sliderValue} \n                  ${environment[control.id] > 0 ? classes.positive : environment[control.id] < 0 ? classes.negative : ''}\n                `,\n              children: environment[control.id].toFixed(1)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1712,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1710,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: control.min,\n            max: control.max,\n            step: \"0.1\",\n            value: environment[control.id],\n            onChange: e => setEnvironment(prev => ({\n              ...prev,\n              [control.id]: parseFloat(e.target.value)\n            })),\n            className: classes.slider\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1719,\n            columnNumber: 15\n          }, this)]\n        }, control.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1709,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1707,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.adaptationStats,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.adaptationStat,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Total Effective Stress:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1739,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.stressBar,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.stressBarFill,\n              style: {\n                width: `${totalEffectiveStress * 100}%`,\n                backgroundColor: totalEffectiveStress > 0.7 ? '#B54B4B' : totalEffectiveStress > 0.4 ? '#C99846' : '#5C9D8B'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1741,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: totalEffectiveStress.toFixed(2)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1751,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1740,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1738,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.adaptationStat,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Adaptation Probability:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1755,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.stressBar,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.stressBarFill,\n              style: {\n                width: `${adaptationProbability * 100}%`,\n                backgroundColor: adaptationProbability > 0.7 ? '#B54B4B' : adaptationProbability > 0.4 ? '#C99846' : '#5C9D8B'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1757,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: adaptationProbability.toFixed(2)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1767,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1756,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1754,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1737,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1702,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render body shape selector\n  const renderBodyShapeSelector = () => {\n    if (!showBodyShapeSelector) return null;\n    return /*#__PURE__*/_jsxDEV(motion.div, {\n      className: classes.bodyShapeSelector,\n      initial: {\n        opacity: 0,\n        scale: 0.95\n      },\n      animate: {\n        opacity: 1,\n        scale: 1\n      },\n      exit: {\n        opacity: 0,\n        scale: 0.95\n      },\n      transition: {\n        duration: 0.3\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: classes.selectorTitle,\n        children: \"Select Body Shape\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1787,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.bodyShapeOptions,\n        children: bodyShapes.map(shape => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `${classes.bodyShapeOption} ${selectedBodyShape === shape.id ? classes.selected : ''}`,\n          onClick: () => changeBodyShape(shape.id),\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.bodyShapeName,\n            children: shape.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1795,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.bodyShapeDescription,\n            children: shape.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1796,\n            columnNumber: 15\n          }, this)]\n        }, shape.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1790,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1788,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1780,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render trait details panel\n  const renderTraitDetails = () => {\n    var _traitCategories$find, _trait$synthesis, _traitCategories$find2;\n    if (!selectedTrait) return null;\n    const trait = selectedTrait;\n    const categoryName = ((_traitCategories$find = traitCategories.find(c => c.id === trait.category)) === null || _traitCategories$find === void 0 ? void 0 : _traitCategories$find.name) || trait.category;\n    const relevance = calculateEnvironmentalRelevance(trait);\n\n    // Find parent trait if available\n    let parentTrait = null;\n    if (trait.tier > 0 && trait.parentId) {\n      parentTrait = findTraitById(trait.parentId);\n    }\n\n    // Get synthesized trait if available\n    const synthesizedTrait = (_trait$synthesis = trait.synthesis) === null || _trait$synthesis === void 0 ? void 0 : _trait$synthesis.result;\n    return /*#__PURE__*/_jsxDEV(motion.div, {\n      className: classes.traitDetails,\n      initial: {\n        opacity: 0,\n        y: 20\n      },\n      animate: {\n        opacity: 1,\n        y: 0\n      },\n      exit: {\n        opacity: 0,\n        y: 20\n      },\n      transition: {\n        duration: 0.3\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.traitDetailsHeader,\n        style: {\n          backgroundColor: getTraitCategoryColor(trait.category)\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.traitHeaderContent,\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: classes.traitName,\n            children: trait.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1834,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.traitMeta,\n            children: [categoryName, \" \\u2022 Tier \", trait.tier]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1835,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1833,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: classes.closeButton,\n          onClick: () => setSelectedTrait(null),\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1839,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1829,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.traitDetailsContent,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.traitDescription,\n          children: trait.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1848,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.traitDetailsSection,\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: classes.sectionTitle,\n            children: \"Environmental Affinities\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1853,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.affinitiesGrid,\n            children: Object.entries(trait.affinities).map(([stressor, value]) => {\n              if (value === 0) return null;\n              const stressorName = stressor.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: classes.affinityItem,\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: classes.affinityName,\n                  children: stressorName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1864,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: `\n                      ${classes.affinityValue} \n                      ${value > 0 ? classes.positive : classes.negative}\n                    `,\n                  children: [value > 0 ? '+' : '', value.toFixed(1)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1865,\n                  columnNumber: 21\n                }, this)]\n              }, stressor, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1863,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1854,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.environmentalRelevance,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.relevanceLabel,\n              children: \"Environmental Relevance\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1877,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `\n                ${classes.relevanceValue} \n                ${relevance > 0 ? classes.positive : relevance < 0 ? classes.negative : ''}\n              `,\n              children: relevance.toFixed(2)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1880,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1876,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1852,\n          columnNumber: 11\n        }, this), parentTrait && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.traitDetailsSection,\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: classes.sectionTitle,\n            children: \"Evolutionary Origin\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1891,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.parentTrait,\n            onClick: () => handleTraitClick(parentTrait),\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.parentTraitIcon,\n              style: {\n                backgroundColor: getTraitCategoryColor(parentTrait.category)\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1896,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.parentTraitDetails,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: classes.parentTraitName,\n                children: parentTrait.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1900,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: classes.parentTraitCategory,\n                children: [(_traitCategories$find2 = traitCategories.find(c => c.id === parentTrait.category)) === null || _traitCategories$find2 === void 0 ? void 0 : _traitCategories$find2.name, \" \\u2022 Tier \", parentTrait.tier]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1901,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1899,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1892,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1890,\n          columnNumber: 13\n        }, this), selectedTraitConnections.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.traitDetailsSection,\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: classes.sectionTitle,\n            children: \"Connected Traits\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1911,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.connectionsList,\n            children: selectedTraitConnections.map(connection => {\n              var _traitCategories$find3;\n              const compatibility = calculateCompatibility(trait, connection);\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: classes.connectionItem,\n                onClick: () => handleTraitClick(connection),\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: classes.connectionItemLeft,\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: classes.connectionDot,\n                    style: {\n                      backgroundColor: getTraitCategoryColor(connection.category)\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1923,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: classes.connectionDetails,\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: classes.connectionName,\n                      children: connection.name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1928,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: classes.connectionCategory,\n                      children: [(_traitCategories$find3 = traitCategories.find(c => c.id === connection.category)) === null || _traitCategories$find3 === void 0 ? void 0 : _traitCategories$find3.name, \" \\u2022 Tier \", connection.tier]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1929,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1927,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1922,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `\n                        ${classes.compatibilityBadge}\n                        ${compatibility > 0.7 ? classes.highCompatibility : compatibility > 0.5 ? classes.mediumCompatibility : classes.lowCompatibility}\n                      `,\n                  children: compatibility.toFixed(2)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1934,\n                  columnNumber: 23\n                }, this)]\n              }, connection.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1917,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1912,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1910,\n          columnNumber: 13\n        }, this), synthesizedTrait && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.traitDetailsSection,\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: classes.sectionTitle,\n            children: \"Synthesis Potential\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1951,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.synthesisPotential,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.synthesisName,\n              children: synthesizedTrait.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1953,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.synthesisDescription,\n              children: synthesizedTrait.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1956,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.synthesisCondition,\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Trigger Condition:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1960,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: classes.conditionName,\n                children: trait.synthesis.condition.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1961,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1959,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1952,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1950,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1847,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1822,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Main render\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.evolutionSimulator,\n    onMouseMove: handleMouseMove,\n    children: [/*#__PURE__*/_jsxDEV(Background, {\n      cursorPosition: cursorPosition,\n      setCursorPosition: setCursorPosition\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1982,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MeteorShower, {\n      height: \"100vh\",\n      zIndex: 2,\n      trailColor: \"rgba(191, 173, 127, 0.8)\",\n      glowColor: \"rgba(207, 185, 130, 0.6)\",\n      coreColor: \"rgba(255, 248, 220, 1)\",\n      meteorDensity: 15,\n      meteorMinSize: 1,\n      meteorMaxSize: 2,\n      meteorSpeed: 0.08,\n      trailLength: 300,\n      trailSegments: 80,\n      enableParallax: true,\n      parallaxIntensity: 0.15,\n      mode: \"arc\",\n      staggered: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1985,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n      ref: headerRef,\n      className: classes.header,\n      children: /*#__PURE__*/_jsxDEV(ScrollingTextAnimation, {\n        scrollConfig: {\n          startPosition: 0,\n          endPosition: 300,\n          initialY: -30,\n          finalY: 0,\n          clampValues: true\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: classes.title,\n          children: \"Crescent Evolution System\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2014,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: classes.subtitle,\n          children: \"Explore the interconnected trait networks that drive evolution through Bayesian natural selection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2015,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2005,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2004,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: contentRef,\n      className: `${classes.content} ${isLoaded ? classes.loaded : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.filterControls,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `${classes.filterButton} ${filterMode === 'all' ? classes.active : ''}`,\n          onClick: () => handleFilterModeChange('all'),\n          children: \"All Traits\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2028,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `${classes.filterButton} ${filterMode === 'relevance' ? classes.active : ''}`,\n          onClick: () => handleFilterModeChange('relevance'),\n          children: \"By Relevance\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2034,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `${classes.filterButton} ${filterMode === 'category' ? classes.active : ''}`,\n          onClick: () => handleFilterModeChange('category'),\n          disabled: !selectedTrait,\n          children: \"By Category\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2040,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2027,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: containerRef,\n        className: classes.networkContainer,\n        onClick: handleCanvasClick,\n        onMouseMove: handleCanvasMouseMove,\n        children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: canvasRef,\n          className: classes.networkCanvas\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2056,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AnimatePresence, {\n          children: hoveredTrait && renderTraitTooltip()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2062,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AnimatePresence, {\n          children: renderBodyShapeSelector()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2067,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2050,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.sidePanel,\n        children: [renderEnvironmentControls(), /*#__PURE__*/_jsxDEV(AnimatePresence, {\n          children: selectedTrait && renderTraitDetails()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2078,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.categoryLegend,\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: classes.controlsTitle,\n            children: \"Trait Categories\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2084,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.legendItems,\n            children: traitCategories.map(category => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.legendItem,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: classes.legendColor,\n                style: {\n                  backgroundColor: category.color\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2088,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: classes.legendName,\n                children: category.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2092,\n                columnNumber: 19\n              }, this)]\n            }, category.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2087,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2085,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2083,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2073,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2022,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.instructions,\n      children: \"Click on body shape or traits to explore connections and adaptations\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"#content\",\n      className: classes.skipLink,\n      children: \"Skip to main content\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1977,\n    columnNumber: 5\n  }, this);\n};\n_s(EvolutionSimulator, \"/7VepYMsp6AHV/XgrQoiovcAlN8=\", false, function () {\n  return [useInView, useInView, useStyles];\n});\n_c = EvolutionSimulator;\nexport default EvolutionSimulator;\nvar _c;\n$RefreshReg$(_c, \"EvolutionSimulator\");","map":{"version":3,"names":["React","useState","useEffect","useRef","motion","AnimatePresence","useInView","Background","MeteorShower","ScrollingTextAnimation","RevealText","useStyles","jsxDEV","_jsxDEV","EvolutionSimulator","_s","cursorPosition","setCursorPosition","x","y","isLoaded","setIsLoaded","selectedBodyShape","setSelectedBodyShape","selectedTrait","setSelectedTrait","selectedTraitConnections","setSelectedTraitConnections","showBodyShapeSelector","setShowBodyShapeSelector","totalEffectiveStress","setTotalEffectiveStress","adaptationProbability","setAdaptationProbability","hoveredTrait","setHoveredTrait","showAllTraits","setShowAllTraits","filterMode","setFilterMode","environment","setEnvironment","temperature","light_conditions","terrain_harshness","resource_scarcity","ether_density","pressure_gravity","canvasRef","containerRef","networkRef","animationFrameRef","bodyShapeIconRef","traitRefs","headerRef","contentRef","headerInView","once","threshold","contentInView","classes","bodyShapes","id","name","description","traitCategories","color","getTraitsByBodyShape","bodyShapeId","baseTraits","locomotion","tier","affinities","connections","compatible","synthesis","condition","result","metabolism","sensory","etheric","thermal","advancedTraits","parentId","specializedTraits","bipedal","quadrupedal","serpentine","amorphous","insectoid","avian","aquatic","allTraits","Object","keys","forEach","category","getAllTraits","traitsByCategory","trait","push","findTraitById","find","isTraitCompatibleWithBodyShape","includes","calculateCompatibility","trait1","trait2","stressors","totalSimilarity","totalWeight","stressor","val1","val2","similarity","Math","min","abs","weight","calculateCombinedAffinity","traitsWithAffinity","filter","undefined","length","sum","reduce","total","tanh","sqrt","calculateEffectiveStress","stressorValue","combinedAffinity","ratio","sigmoid","exp","calculateTotalEffectiveStress","stressorValues","map","stress","numStressors","calculateAdaptationProbability","duration","adaptationPressure","calculateEnvironmentalRelevance","relevanceScore","traitAffinity","getTraitCategoryColor","categoryId","c","getTraitGlowIntensity","relevance","scaledRelevance","handleMouseMove","e","clientX","clientY","handleTraitClick","connectionId","connectedTrait","parentTrait","t","handleBodyShapeClick","changeBodyShape","shapeId","current","canvas","container","ctx","getContext","updateCanvasDimensions","rect","getBoundingClientRect","width","height","centerX","centerY","window","addEventListener","animate","clearRect","traitPositions","tierRadius","beginPath","arc","PI","strokeStyle","setLineDash","lineWidth","stroke","tier1","tier2","tier3","categoryIndex","categoryAngleOffset","traits","traitCount","angleSpread","index","traitAngle","max","radius","cos","sin","getNodeRadius","sourcePos","targetId","targetPos","sourceVisible","some","targetVisible","compatibility","moveTo","midX","midY","pullFactor","controlX","controlY","quadraticCurveTo","isSelected","gradient","createLinearGradient","sourceColor","targetColor","addColorStop","globalAlpha","shadowColor","shadowBlur","childPos","parentPos","childVisible","parentVisible","evolutionGradient","childColor","parentColor","traitId","categoryColor","isConnected","isVisible","baseSize","nodeSize","glowIntensity","fillStyle","fill","bodyShape","shape","bodyShapeSize","font","textAlign","textBaseline","fillText","requestAnimationFrame","timer","setTimeout","removeEventListener","clearTimeout","cancelAnimationFrame","probability","handleCanvasClick","mouseX","left","mouseY","top","distance","clickedTrait","traitRef","traitDistance","handleCanvasMouseMove","hovered","handleFilterModeChange","mode","renderTraitTooltip","div","initial","opacity","exit","transition","className","traitTooltip","children","traitTooltipHeader","style","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","traitTooltipContent","traitTooltipStats","traitTooltipStat","traitTooltipStatValue","positive","negative","toFixed","renderEnvironmentControls","environmentControls","controlsTitle","environmentSliders","control","sliderContainer","sliderLabel","sliderValue","type","step","value","onChange","prev","parseFloat","target","slider","adaptationStats","adaptationStat","stressBar","stressBarFill","renderBodyShapeSelector","bodyShapeSelector","scale","selectorTitle","bodyShapeOptions","bodyShapeOption","selected","onClick","bodyShapeName","bodyShapeDescription","renderTraitDetails","_traitCategories$find","_trait$synthesis","_traitCategories$find2","categoryName","synthesizedTrait","traitDetails","traitDetailsHeader","traitHeaderContent","traitName","traitMeta","closeButton","traitDetailsContent","traitDescription","traitDetailsSection","sectionTitle","affinitiesGrid","entries","stressorName","split","word","charAt","toUpperCase","slice","join","affinityItem","affinityName","affinityValue","environmentalRelevance","relevanceLabel","relevanceValue","parentTraitIcon","parentTraitDetails","parentTraitName","parentTraitCategory","connectionsList","connection","_traitCategories$find3","connectionItem","connectionItemLeft","connectionDot","connectionDetails","connectionName","connectionCategory","compatibilityBadge","highCompatibility","mediumCompatibility","lowCompatibility","synthesisPotential","synthesisName","synthesisDescription","synthesisCondition","conditionName","evolutionSimulator","onMouseMove","zIndex","trailColor","glowColor","coreColor","meteorDensity","meteorMinSize","meteorMaxSize","meteorSpeed","trailLength","trailSegments","enableParallax","parallaxIntensity","staggered","ref","header","scrollConfig","startPosition","endPosition","initialY","finalY","clampValues","title","subtitle","content","loaded","filterControls","filterButton","active","disabled","networkContainer","networkCanvas","sidePanel","categoryLegend","legendItems","legendItem","legendColor","legendName","instructions","href","skipLink","_c","$RefreshReg$"],"sources":["/home/valeria/Documents/Crucible/frontend/src/components/sections/codex/creators/creatorshowcase/EvolutionSimulatorConceptShowcase.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { motion, AnimatePresence, useInView } from 'framer-motion';\nimport Background from '../../../../core/Background';\nimport MeteorShower from '../../../../core/effects/cosmiceffects/MeteorShower';\nimport ScrollingTextAnimation from '../../../../core/effects/ScrollingTextAnimation';\nimport RevealText from '../../../../core/effects/RevealText';\nimport useStyles from './evolutionSimulatorStyles';\n\nconst EvolutionSimulator = () => {\n  // State management\n  const [cursorPosition, setCursorPosition] = useState({ x: 0, y: 0 });\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [selectedBodyShape, setSelectedBodyShape] = useState('quadrupedal');\n  const [selectedTrait, setSelectedTrait] = useState(null);\n  const [selectedTraitConnections, setSelectedTraitConnections] = useState([]);\n  const [showBodyShapeSelector, setShowBodyShapeSelector] = useState(false);\n  const [totalEffectiveStress, setTotalEffectiveStress] = useState(0);\n  const [adaptationProbability, setAdaptationProbability] = useState(0);\n  const [hoveredTrait, setHoveredTrait] = useState(null);\n  const [showAllTraits, setShowAllTraits] = useState(true);\n  const [filterMode, setFilterMode] = useState('all'); // 'all', 'category', 'relevance'\n\n  // Environment state with default values\n  const [environment, setEnvironment] = useState({\n    temperature: 0.4,\n    light_conditions: 0.3,\n    terrain_harshness: 0.5,\n    resource_scarcity: 0.2,\n    ether_density: 0.6,\n    pressure_gravity: 0.4\n  });\n\n  // Canvas and animation refs\n  const canvasRef = useRef(null);\n  const containerRef = useRef(null);\n  const networkRef = useRef(null);\n  const animationFrameRef = useRef(null);\n  const bodyShapeIconRef = useRef(null);\n  const traitRefs = useRef({});\n  const headerRef = useRef(null);\n  const contentRef = useRef(null);\n\n  // Header in view animation\n  const headerInView = useInView(headerRef, { once: true, threshold: 0.2 });\n  const contentInView = useInView(contentRef, { once: true, threshold: 0.1 });\n\n  // Custom styling hook\n  const classes = useStyles();\n\n  // Body shapes data\n  const bodyShapes = [\n    { id: 'bipedal', name: 'Bipedal', description: 'Upright forms with manipulative upper limbs' },\n    { id: 'quadrupedal', name: 'Quadrupedal', description: 'Four-limbed forms optimized for stability and movement' },\n    { id: 'serpentine', name: 'Serpentine', description: 'Elongated, limbless forms specialized for flexibility' },\n    { id: 'amorphous', name: 'Amorphous', description: 'Malleable forms without fixed structure' },\n    { id: 'insectoid', name: 'Multi-limbed', description: 'Multi-limbed, segmented forms' },\n    { id: 'avian', name: 'Avian', description: 'Forms optimized for flight and aerial movement' },\n    { id: 'aquatic', name: 'Aquatic', description: 'Forms specialized for water environments' }\n  ];\n\n  // Trait categories with color assignments\n  const traitCategories = [\n    { id: 'locomotion', name: 'Locomotion', color: '#7D6B9E' },\n    { id: 'metabolism', name: 'Metabolism', color: '#5C9D8B' },\n    { id: 'sensory', name: 'Sensory Acuity', color: '#C99846' },\n    { id: 'etheric', name: 'Etheric Adaptation', color: '#B54B4B' },\n    { id: 'thermal', name: 'Thermal Regulation', color: '#A67C52' }\n  ];\n\n  // Get traits based on selected body shape\n  const getTraitsByBodyShape = (bodyShapeId) => {\n    // Base traits that all body shapes share\n    const baseTraits = {\n      locomotion: [\n        {\n          id: 'running',\n          name: 'Swift Limbs',\n          tier: 1,\n          affinities: {\n            terrain_harshness: 0.7,\n            pressure_gravity: 0.4,\n            temperature: 0.2,\n            resource_scarcity: -0.3,\n            light_conditions: 0.1,\n            ether_density: 0\n          },\n          description: 'Limbs designed for quick locomotion across varied terrain.',\n          connections: ['enhanced_muscle', 'reflective_scales'],\n          compatible: ['quadrupedal', 'bipedal', 'insectoid'],\n          synthesis: {\n            condition: 'high_stress',\n            result: {\n              name: 'Phase Shifting Appendages',\n              description: 'Limbs that can temporarily phase through solid matter, allowing movement through obstacles.'\n            }\n          }\n        },\n        {\n          id: 'climbing',\n          name: 'Grasping Appendages',\n          tier: 1,\n          affinities: {\n            terrain_harshness: 0.8,\n            pressure_gravity: 0.3,\n            resource_scarcity: -0.2,\n            temperature: 0,\n            light_conditions: 0.1,\n            ether_density: 0\n          },\n          description: 'Specialized limb structures with superior grip for vertical movement.',\n          connections: ['enhanced_muscle', 'sonar_mapping'],\n          compatible: ['bipedal', 'quadrupedal', 'insectoid'],\n          synthesis: {\n            condition: 'extreme_gravity',\n            result: {\n              name: 'Gravity-Defying Grips',\n              description: 'Appendages capable of selectively negating gravitational forces at contact points.'\n            }\n          }\n        },\n        {\n          id: 'webbed',\n          name: 'Webbed Appendages',\n          tier: 1,\n          affinities: {\n            terrain_harshness: -0.4,\n            pressure_gravity: 0.1,\n            resource_scarcity: -0.1,\n            temperature: -0.2,\n            light_conditions: 0,\n            ether_density: 0\n          },\n          description: 'Limbs with membrane structures optimized for aquatic movement.',\n          connections: ['ether_sensing', 'thick_blubber'],\n          compatible: ['aquatic', 'bipedal', 'quadrupedal'],\n          synthesis: {\n            condition: 'aquatic_etheric',\n            result: {\n              name: 'Dimensional Current Webs',\n              description: 'Membranes that can manipulate water currents through subtle etheric manipulations.'\n            }\n          }\n        },\n        {\n          id: 'slithering',\n          name: 'Sinuous Musculature',\n          tier: 1,\n          affinities: {\n            terrain_harshness: 0.5,\n            pressure_gravity: 0.3,\n            resource_scarcity: -0.1,\n            temperature: 0.2,\n            light_conditions: -0.2,\n            ether_density: 0\n          },\n          description: 'Highly coordinated muscle structure allowing movement without limbs.',\n          connections: ['vibration_detection', 'reflective_scales'],\n          compatible: ['serpentine'],\n          synthesis: {\n            condition: 'extreme_adaptability',\n            result: {\n              name: 'Undulatory Phase Motion',\n              description: 'Movement through wave-like dimensional shifts rather than physical undulation.'\n            }\n          }\n        },\n        {\n          id: 'flight',\n          name: 'Aerial Locomotion',\n          tier: 1,\n          affinities: {\n            terrain_harshness: -0.3,\n            pressure_gravity: -0.7,\n            resource_scarcity: -0.2,\n            temperature: 0.1,\n            light_conditions: 0.6,\n            ether_density: 0.2\n          },\n          description: 'Wing structures and lightweight skeletal system enabling flight.',\n          connections: ['acute_vision', 'heat_vents'],\n          compatible: ['avian', 'insectoid'],\n          synthesis: {\n            condition: 'ethereal_skies',\n            result: {\n              name: 'Aetheric Glide',\n              description: 'Wings that interact with etheric currents, enabling flight through magical energy rather than air.'\n            }\n          }\n        },\n        {\n          id: 'shapeshifting',\n          name: 'Morphic Structure',\n          tier: 1,\n          affinities: {\n            terrain_harshness: 0.3,\n            pressure_gravity: 0.2,\n            resource_scarcity: -0.3,\n            temperature: 0.1,\n            light_conditions: 0,\n            ether_density: 0.6\n          },\n          description: 'Fluid body structure capable of adapting shape for mobility.',\n          connections: ['omnivore', 'ether_channeling'],\n          compatible: ['amorphous'],\n          synthesis: {\n            condition: 'etheric_saturation',\n            result: {\n              name: 'Dimensional Fluidity',\n              description: 'Ability to flow between dimensional planes, existing partially in multiple realities simultaneously.'\n            }\n          }\n        }\n      ],\n      metabolism: [\n        {\n          id: 'carnivore',\n          name: 'Carnivore Digestion',\n          tier: 1,\n          affinities: {\n            resource_scarcity: 0.5,\n            temperature: 0.3,\n            terrain_harshness: 0.1,\n            light_conditions: 0,\n            pressure_gravity: 0,\n            ether_density: 0\n          },\n          description: 'Specialized digestive system optimized for meat processing.',\n          connections: ['enhanced_muscle', 'acute_vision'],\n          compatible: ['all'],\n          synthesis: {\n            condition: 'apex_predator',\n            result: {\n              name: 'Essence Extraction',\n              description: 'Ability to consume and metabolize the life essence of prey beyond mere physical substance.'\n            }\n          }\n        },\n        {\n          id: 'omnivore',\n          name: 'Omnivore Adaptation',\n          tier: 1,\n          affinities: {\n            resource_scarcity: 0.6,\n            terrain_harshness: 0.2,\n            temperature: 0.1,\n            light_conditions: 0,\n            pressure_gravity: 0,\n            ether_density: 0\n          },\n          description: 'Versatile digestive system capable of processing diverse food sources.',\n          connections: ['bioluminescence', 'reflective_scales'],\n          compatible: ['all'],\n          synthesis: {\n            condition: 'scarce_resources',\n            result: {\n              name: 'Universal Digestion',\n              description: 'Capacity to derive nutrients from almost any organic or inorganic substance.'\n            }\n          }\n        },\n        {\n          id: 'photosynthetic',\n          name: 'Photosynthetic Cells',\n          tier: 1,\n          affinities: {\n            light_conditions: 0.9,\n            resource_scarcity: 0.7,\n            temperature: 0.4,\n            terrain_harshness: -0.2,\n            pressure_gravity: 0,\n            ether_density: 0.1\n          },\n          description: 'Cellular structures that can convert light into energy.',\n          connections: ['ether_sensing', 'reflective_scales'],\n          compatible: ['all'],\n          synthesis: {\n            condition: 'high_light_ether',\n            result: {\n              name: 'Etheric Photosynthesis',\n              description: 'Advanced cells that can convert ambient etheric energy into biological energy.'\n            }\n          }\n        },\n        {\n          id: 'ether_consumption',\n          name: 'Ether Consumption',\n          tier: 1,\n          affinities: {\n            ether_density: 0.9,\n            resource_scarcity: 0.6,\n            temperature: -0.1,\n            terrain_harshness: -0.1,\n            pressure_gravity: 0,\n            light_conditions: -0.3\n          },\n          description: 'Metabolic pathway that processes ambient etheric energy.',\n          connections: ['ether_channeling', 'bioluminescence'],\n          compatible: ['all'],\n          synthesis: {\n            condition: 'etheric_saturation',\n            result: {\n              name: 'Reality Consumption',\n              description: 'Ability to metabolize the fabric of reality itself, subsisting on dimensional energies.'\n            }\n          }\n        }\n      ],\n      sensory: [\n        {\n          id: 'acute_vision',\n          name: 'Acute Vision',\n          tier: 1,\n          affinities: {\n            light_conditions: 0.8,\n            terrain_harshness: 0.3,\n            resource_scarcity: 0.2,\n            temperature: 0,\n            pressure_gravity: 0,\n            ether_density: 0\n          },\n          description: 'Highly developed visual organs with exceptional acuity.',\n          connections: ['enhanced_muscle', 'eagle_eyes'],\n          compatible: ['all'],\n          synthesis: {\n            condition: 'extreme_light',\n            result: {\n              name: 'Reality Perception',\n              description: 'Vision that perceives multiple planes of reality simultaneously, seeing beyond physical existence.'\n            }\n          }\n        },\n        {\n          id: 'sonar_mapping',\n          name: 'Echolocation',\n          tier: 1,\n          affinities: {\n            light_conditions: -0.8,\n            terrain_harshness: 0.5,\n            pressure_gravity: 0.1,\n            temperature: 0,\n            resource_scarcity: 0,\n            ether_density: 0.2\n          },\n          description: 'Ability to emit and detect sound waves for environmental mapping.',\n          connections: ['vibration_detection', 'bioluminescence'],\n          compatible: ['all'],\n          synthesis: {\n            condition: 'extreme_darkness',\n            result: {\n              name: 'Dimensional Sonar',\n              description: 'Echolocation that can detect entities and structures across dimensional boundaries.'\n            }\n          }\n        },\n        {\n          id: 'vibration_detection',\n          name: 'Vibration Detection',\n          tier: 1,\n          affinities: {\n            terrain_harshness: 0.6,\n            pressure_gravity: 0.4,\n            light_conditions: -0.3,\n            temperature: 0,\n            resource_scarcity: 0,\n            ether_density: 0.1\n          },\n          description: 'Specialized organs that can detect minute vibrations through various media.',\n          connections: ['sonar_mapping', 'thick_blubber'],\n          compatible: ['all'],\n          synthesis: {\n            condition: 'extreme_sensitivity',\n            result: {\n              name: 'Temporal Tremor Sense',\n              description: 'Ability to detect vibrations through time, sensing events before they occur.'\n            }\n          }\n        },\n        {\n          id: 'ether_sensing',\n          name: 'Ether Sensing',\n          tier: 1,\n          affinities: {\n            ether_density: 0.8,\n            light_conditions: 0.2,\n            terrain_harshness: 0,\n            temperature: 0,\n            resource_scarcity: 0,\n            pressure_gravity: 0.1\n          },\n          description: 'Specialized organs that can detect and interpret etheric energy patterns.',\n          connections: ['photosynthetic', 'ether_channeling'],\n          compatible: ['all'],\n          synthesis: {\n            condition: 'etheric_saturation',\n            result: {\n              name: 'Soul Reading',\n              description: 'Perception that can detect and analyze the essence of living beings beyond physical form.'\n            }\n          }\n        }\n      ],\n      etheric: [\n        {\n          id: 'ether_sensing',\n          name: 'Ether Sensing',\n          tier: 1,\n          affinities: {\n            ether_density: 0.8,\n            light_conditions: 0.2,\n            terrain_harshness: 0,\n            temperature: 0,\n            resource_scarcity: 0,\n            pressure_gravity: 0.1\n          },\n          description: 'Specialized organs that can detect and interpret etheric energy patterns.',\n          connections: ['photosynthetic', 'ether_channeling'],\n          compatible: ['all'],\n          synthesis: {\n            condition: 'etheric_saturation',\n            result: {\n              name: 'Soul Reading',\n              description: 'Perception that can detect and analyze the essence of living beings beyond physical form.'\n            }\n          }\n        },\n        {\n          id: 'ether_channeling',\n          name: 'Ether Channeling',\n          tier: 1,\n          affinities: {\n            ether_density: 0.9,\n            temperature: 0.3,\n            light_conditions: 0.3,\n            terrain_harshness: 0,\n            resource_scarcity: -0.2,\n            pressure_gravity: 0.1\n          },\n          description: 'Biological structures capable of directing and manipulating etheric energies.',\n          connections: ['ether_sensing', 'bioluminescence'],\n          compatible: ['all'],\n          synthesis: {\n            condition: 'etheric_mastery',\n            result: {\n              name: 'Reality Weaving',\n              description: 'Ability to manipulate the fabric of reality through precise etheric control.'\n            }\n          }\n        },\n        {\n          id: 'bioluminescence',\n          name: 'Bioluminescence',\n          tier: 1,\n          affinities: {\n            light_conditions: -0.6,\n            ether_density: 0.5,\n            resource_scarcity: -0.3,\n            temperature: 0,\n            terrain_harshness: 0,\n            pressure_gravity: 0\n          },\n          description: 'Ability to produce light through biochemical processes.',\n          connections: ['ether_channeling', 'omnivore'],\n          compatible: ['all'],\n          synthesis: {\n            condition: 'dark_ethereal',\n            result: {\n              name: 'Hypnotic Patterns',\n              description: 'Light displays that can induce altered states of consciousness in observers.'\n            }\n          }\n        },\n        {\n          id: 'dimensional_anchor',\n          name: 'Dimensional Anchor',\n          tier: 1,\n          affinities: {\n            ether_density: 0.7,\n            pressure_gravity: 0.6,\n            resource_scarcity: -0.2,\n            temperature: 0,\n            terrain_harshness: 0.2,\n            light_conditions: 0.1\n          },\n          description: 'Etheric organ that stabilizes the creature\\'s position within reality.',\n          connections: ['ether_sensing', 'vibration_detection'],\n          compatible: ['all'],\n          synthesis: {\n            condition: 'reality_flux',\n            result: {\n              name: 'Dimensional Phasing',\n              description: 'Control over personal dimensional state, allowing phasing between planes of existence.'\n            }\n          }\n        }\n      ],\n      thermal: [\n        {\n          id: 'thick_blubber',\n          name: 'Thick Blubber',\n          tier: 1,\n          affinities: {\n            temperature: -0.8,\n            pressure_gravity: 0.3,\n            resource_scarcity: -0.4,\n            terrain_harshness: 0.1,\n            light_conditions: 0,\n            ether_density: 0\n          },\n          description: 'Dense fatty tissue layer providing insulation in cold environments.',\n          connections: ['vibration_detection', 'enhanced_muscle'],\n          compatible: ['all'],\n          synthesis: {\n            condition: 'extreme_cold',\n            result: {\n              name: 'Thermal Void',\n              description: 'Tissues that create a pocket of absolute thermal isolation from the environment.'\n            }\n          }\n        },\n        {\n          id: 'reflective_scales',\n          name: 'Reflective Scales',\n          tier: 1,\n          affinities: {\n            temperature: 0.7,\n            light_conditions: 0.6,\n            terrain_harshness: 0.3,\n            resource_scarcity: -0.2,\n            pressure_gravity: 0,\n            ether_density: 0.1\n          },\n          description: 'Light-reflecting scales that help regulate heat absorption.',\n          connections: ['running', 'photosynthetic'],\n          compatible: ['all'],\n          synthesis: {\n            condition: 'extreme_heat',\n            result: {\n              name: 'Thermal Manipulator Scales',\n              description: 'Scales that can actively redirect and manipulate thermal energy in the environment.'\n            }\n          }\n        },\n        {\n          id: 'heat_vents',\n          name: 'Heat Vents',\n          tier: 1,\n          affinities: {\n            temperature: 0.8,\n            ether_density: 0.3,\n            resource_scarcity: -0.3,\n            terrain_harshness: 0,\n            light_conditions: 0,\n            pressure_gravity: 0\n          },\n          description: 'Specialized structures that can rapidly dissipate excess heat.',\n          connections: ['running', 'ether_channeling'],\n          compatible: ['all'],\n          synthesis: {\n            condition: 'volcanic_environment',\n            result: {\n              name: 'Plasma Channeling',\n              description: 'Ability to vent superheated plasma as a defensive weapon or environmental tool.'\n            }\n          }\n        },\n        {\n          id: 'thermal_conversion',\n          name: 'Thermal Conversion',\n          tier: 1,\n          affinities: {\n            temperature: 0.4,\n            temperature: -0.4, // Adapts to both extremes\n            resource_scarcity: 0.5,\n            ether_density: 0.3,\n            terrain_harshness: 0,\n            light_conditions: 0.1,\n            pressure_gravity: 0\n          },\n          description: 'Cellular structures that convert temperature differentials into usable energy.',\n          connections: ['omnivore', 'ether_sensing'],\n          compatible: ['all'],\n          synthesis: {\n            condition: 'thermal_extremes',\n            result: {\n              name: 'Entropic Manipulation',\n              description: 'Control over thermodynamic entropy, creating areas of perfect order or chaos.'\n            }\n          }\n        }\n      ]\n    };\n    \n    // Advanced traits (tier 2)\n    const advancedTraits = {\n      sensory: [\n        {\n          id: 'eagle_eyes',\n          name: 'Eagle-like Vision',\n          tier: 2,\n          parentId: 'acute_vision',\n          affinities: {\n            light_conditions: 0.9,\n            terrain_harshness: 0.5,\n            resource_scarcity: 0.4,\n            temperature: 0,\n            pressure_gravity: 0,\n            ether_density: 0.1\n          },\n          description: 'Exceptionally developed vision with incredible range and detail perception.',\n          connections: ['acute_vision'],\n          compatible: ['all'],\n          synthesis: {\n            condition: 'apex_perception',\n            result: {\n              name: 'Omniscient Perception',\n              description: 'Vision that transcends physical limitations, seeing through all obstacles across vast distances.'\n            }\n          }\n        },\n        {\n          id: 'void_perception',\n          name: 'Void Perception',\n          tier: 2,\n          parentId: 'ether_sensing',\n          affinities: {\n            ether_density: 0.9,\n            light_conditions: -0.7,\n            resource_scarcity: 0.2,\n            temperature: -0.3,\n            pressure_gravity: 0.5,\n            terrain_harshness: 0.1\n          },\n          description: 'Perception beyond normal reality, sensing the void between dimensions.',\n          connections: ['ether_sensing', 'dimensional_anchor'],\n          compatible: ['all'],\n          synthesis: {\n            condition: 'interdimensional',\n            result: {\n              name: 'Cosmic Awareness',\n              description: 'Consciousness that expands beyond individual perception, connecting to the universe itself.'\n            }\n          }\n        }\n      ],\n      locomotion: [\n        {\n          id: 'enhanced_muscle',\n          name: 'Enhanced Musculature',\n          tier: 2,\n          parentId: 'running',\n          affinities: {\n            terrain_harshness: 0.8,\n            pressure_gravity: 0.7,\n            resource_scarcity: -0.4,\n            temperature: 0.1,\n            light_conditions: 0,\n            ether_density: 0\n          },\n          description: 'Highly developed muscle structures with exceptional strength and endurance.',\n          connections: ['running', 'climbing', 'carnivore', 'acute_vision', 'thick_blubber'],\n          compatible: ['bipedal', 'quadrupedal', 'insectoid'],\n          synthesis: {\n            condition: 'apex_physical',\n            result: {\n              name: 'Force Multiplication Tissues',\n              description: 'Muscles that multiply applied force through micro-dimensional folding.'\n            }\n          }\n        },\n        {\n          id: 'ethereal_movement',\n          name: 'Ethereal Movement',\n          tier: 2,\n          parentId: 'ether_channeling',\n          affinities: {\n            ether_density: 0.9,\n            terrain_harshness: 0.4,\n            pressure_gravity: -0.6,\n            resource_scarcity: -0.3,\n            light_conditions: 0.2,\n            temperature: 0\n          },\n          description: 'Partial phasing allowing movement through solid objects and across dimensional boundaries.',\n          connections: ['ether_channeling', 'dimensional_anchor'],\n          compatible: ['all'],\n          synthesis: {\n            condition: 'ethereal_mastery',\n            result: {\n              name: 'Quantum Teleportation',\n              description: 'Instantaneous movement across any distance through precise manipulation of quantum states.'\n            }\n          }\n        }\n      ],\n      etheric: [\n        {\n          id: 'reality_manipulation',\n          name: 'Reality Manipulation',\n          tier: 2,\n          parentId: 'ether_channeling',\n          affinities: {\n            ether_density: 1.0,\n            pressure_gravity: 0.6,\n            light_conditions: 0.5,\n            resource_scarcity: -0.5,\n            temperature: 0.3,\n            terrain_harshness: 0.4\n          },\n          description: 'Advanced etheric organs capable of warping local reality in limited ways.',\n          connections: ['ether_channeling', 'dimensional_anchor'],\n          compatible: ['all'],\n          synthesis: {\n            condition: 'reality_mastery',\n            result: {\n              name: 'Creation Principle',\n              description: 'Ability to manifest thoughts into physical reality through pure will and etheric control.'\n            }\n          }\n        }\n      ],\n      metabolism: [\n        {\n          id: 'essence_consumption',\n          name: 'Essence Consumption',\n          tier: 2,\n          parentId: 'carnivore',\n          affinities: {\n            resource_scarcity: 0.9,\n            ether_density: 0.7,\n            temperature: 0.2,\n            light_conditions: -0.3,\n            pressure_gravity: 0.1,\n            terrain_harshness: 0.1\n          },\n          description: 'Ability to consume and absorb the essence of prey, including traits and memories.',\n          connections: ['carnivore', 'ether_sensing'],\n          compatible: ['all'],\n          synthesis: {\n            condition: 'apex_consumption',\n            result: {\n              name: 'Soul Assimilation',\n              description: 'Complete absorption of preys consciousness, memories, and spiritual essence.',\n            }\n          }\n        }\n      ],\n      thermal: [\n        {\n          id: 'thermal_projection',\n          name: 'Thermal Projection',\n          tier: 2,\n          parentId: 'heat_vents',\n          affinities: {\n            temperature: 0.9,\n            temperature: -0.5, // Works at both extremes\n            ether_density: 0.6,\n            resource_scarcity: -0.4,\n            terrain_harshness: 0.3,\n            light_conditions: 0.2,\n            pressure_gravity: 0\n          },\n          description: 'Ability to project thermal energy in controlled beams or waves.',\n          connections: ['heat_vents', 'ether_channeling'],\n          compatible: ['all'],\n          synthesis: {\n            condition: 'thermal_mastery',\n            result: {\n              name: 'Absolute Zero Projection',\n              description: 'Projection of perfect cold that freezes all molecular motion in the target area.'\n            }\n          }\n        }\n      ]\n    };\n    \n    // Specialized traits for specific body shapes\n    const specializedTraits = {\n      bipedal: {\n        locomotion: [\n          {\n            id: 'bipedal_agility',\n            name: 'Bipedal Agility',\n            tier: 2,\n            parentId: 'running',\n            affinities: {\n              terrain_harshness: 0.8,\n              pressure_gravity: 0.5,\n              resource_scarcity: -0.2,\n              temperature: 0.2,\n              light_conditions: 0.3,\n              ether_density: 0\n            },\n            description: 'Specialized balance and coordination optimized for upright movement.',\n            connections: ['running', 'climbing'],\n            compatible: ['bipedal'],\n            synthesis: {\n              condition: 'extreme_agility',\n              result: {\n                name: 'Temporal Reflex',\n                description: 'Movement occurring slightly before the decision to move, through temporal manipulation.'\n              }\n            }\n          }\n        ]\n      },\n      quadrupedal: {\n        locomotion: [\n          {\n            id: 'quadrupedal_stability',\n            name: 'Quadrupedal Stability',\n            tier: 2,\n            parentId: 'running',\n            affinities: {\n              terrain_harshness: 0.9,\n              pressure_gravity: 0.7,\n              resource_scarcity: -0.1,\n              temperature: 0.1,\n              light_conditions: 0.1,\n              ether_density: 0\n            },\n            description: 'Enhanced stability and load-bearing capacity from four-limb structure.',\n            connections: ['running', 'enhanced_muscle'],\n            compatible: ['quadrupedal'],\n            synthesis: {\n              condition: 'extreme_stability',\n              result: {\n                name: 'Gravitational Anchor',\n                description: 'Selective control over personal gravitational field providing perfect stability in any conditions.'\n              }\n            }\n          }\n        ]\n      },\n      serpentine: {\n        locomotion: [\n          {\n            id: 'serpentine_flexibility',\n            name: 'Serpentine Flexibility',\n            tier: 2,\n            parentId: 'slithering',\n            affinities: {\n              terrain_harshness: 0.7,\n              pressure_gravity: 0.4,\n              resource_scarcity: -0.1,\n              temperature: 0.1,\n              light_conditions: 0,\n              ether_density: 0.1\n            },\n            description: 'Extreme body flexibility allowing navigation of confined spaces.',\n            connections: ['vibration_detection', 'reflective_scales'],\n            compatible: ['serpentine'],\n            synthesis: {\n              condition: 'extreme_adaptation',\n              result: {\n                name: 'Dimensional Coiling',\n                description: 'Body that can loop through multiple dimensional planes, defying conventional physics.'\n              }\n            }\n          }\n        ]\n      },\n      amorphous: {\n        metabolism: [\n          {\n            id: 'absorptive_assimilation',\n            name: 'Absorptive Assimilation',\n            tier: 2,\n            parentId: 'omnivore',\n            affinities: {\n              resource_scarcity: 0.9,\n              ether_density: 0.5,\n              terrain_harshness: 0.3,\n              temperature: 0.2,\n              light_conditions: -0.1,\n              pressure_gravity: 0\n            },\n            description: 'Ability to absorb and incorporate materials and traits from consumed entities.',\n            connections: ['shapeshifting', 'omnivore'],\n            compatible: ['amorphous'],\n            synthesis: {\n              condition: 'apex_adaptation',\n              result: {\n                name: 'Perfect Mimicry',\n                description: 'Complete assimilation of consumed entities, including memories, abilities, and consciousness.'\n              }\n            }\n          }\n        ]\n      },\n      insectoid: {\n        sensory: [\n          {\n            id: 'compound_perception',\n            name: 'Compound Perception',\n            tier: 2,\n            parentId: 'acute_vision',\n            affinities: {\n              light_conditions: 0.7,\n              terrain_harshness: 0.5,\n              resource_scarcity: 0.2,\n              temperature: 0.1,\n              pressure_gravity: 0.1,\n              ether_density: 0.2\n            },\n            description: 'Multi-faceted visual system providing nearly 360-degree awareness.',\n            connections: ['acute_vision', 'vibration_detection'],\n            compatible: ['insectoid'],\n            synthesis: {\n              condition: 'omnidirectional_mastery',\n              result: {\n                name: 'Quantum Observer',\n                description: 'Simultaneous perception from all possible visual angles through quantum observation.'\n              }\n            }\n          }\n        ]\n      },\n      avian: {\n        sensory: [\n          {\n            id: 'predictive_aerial_mapping',\n            name: 'Aerial Current Sensing',\n            tier: 2,\n            parentId: 'acute_vision',\n            affinities: {\n              light_conditions: 0.6,\n              pressure_gravity: -0.7,\n              terrain_harshness: -0.2,\n              temperature: 0.3,\n              resource_scarcity: 0.1,\n              ether_density: 0.4\n            },\n            description: 'Ability to sense and predict air currents and atmospheric patterns.',\n            connections: ['flight', 'ether_sensing'],\n            compatible: ['avian'],\n            synthesis: {\n              condition: 'atmospheric_mastery',\n              result: {\n                name: 'Weather Manipulation',\n                description: 'Control over local atmospheric conditions through etheric attunement to air currents.'\n              }\n            }\n          }\n        ]\n      },\n      aquatic: {\n        sensory: [\n          {\n            id: 'pressure_sense',\n            name: 'Pressure Sense',\n            tier: 2,\n            parentId: 'vibration_detection',\n            affinities: {\n              pressure_gravity: 0.9,\n              terrain_harshness: 0.3,\n              light_conditions: -0.4,\n              temperature: -0.2,\n              resource_scarcity: 0.1,\n              ether_density: 0.3\n            },\n            description: 'Specialized organs that can detect minute changes in water pressure and currents.',\n            connections: ['webbed', 'vibration_detection'],\n            compatible: ['aquatic'],\n            synthesis: {\n              condition: 'aquatic_mastery',\n              result: {\n                name: 'Hydromancy',\n                description: 'Control over water through etheric attunement, manipulating currents and state changes.'\n              }\n            }\n          }\n        ]\n      }\n    };\n    \n    // Combine traits based on selected body shape\n    const allTraits = { ...baseTraits };\n    \n    // Add advanced traits\n    Object.keys(advancedTraits).forEach(category => {\n      if (!allTraits[category]) allTraits[category] = [];\n      allTraits[category] = [...allTraits[category], ...advancedTraits[category]];\n    });\n    \n    // Add specialized traits for selected body shape\n    if (specializedTraits[bodyShapeId]) {\n      Object.keys(specializedTraits[bodyShapeId]).forEach(category => {\n        if (!allTraits[category]) allTraits[category] = [];\n        allTraits[category] = [...allTraits[category], ...specializedTraits[bodyShapeId][category]];\n      });\n    }\n    \n    return allTraits;\n  };\n\n  // Get all traits as a flattened array\n  const getAllTraits = () => {\n    const traitsByCategory = getTraitsByBodyShape(selectedBodyShape);\n    let allTraits = [];\n    \n    Object.keys(traitsByCategory).forEach(category => {\n      traitsByCategory[category].forEach(trait => {\n        // Add category to trait for easier reference\n        allTraits.push({\n          ...trait,\n          category\n        });\n      });\n    });\n    \n    return allTraits;\n  };\n\n  // Find trait by ID\n  const findTraitById = (id) => {\n    const allTraits = getAllTraits();\n    return allTraits.find(trait => trait.id === id);\n  };\n\n  // Calculate trait compatibility with body shape\n  const isTraitCompatibleWithBodyShape = (trait) => {\n    if (!trait.compatible) return true;\n    if (trait.compatible.includes('all')) return true;\n    return trait.compatible.includes(selectedBodyShape);\n  };\n\n  // Calculate trait affinity compatibility\n  const calculateCompatibility = (trait1, trait2) => {\n    if (!trait1 || !trait2) return 0.3; // Baseline compatibility\n    \n    const stressors = ['terrain_harshness', 'resource_scarcity', 'light_conditions', \n                     'ether_density', 'temperature', 'pressure_gravity'];\n    \n    let totalSimilarity = 0;\n    let totalWeight = 0;\n    \n    stressors.forEach(stressor => {\n      const val1 = trait1.affinities[stressor] || 0;\n      const val2 = trait2.affinities[stressor] || 0;\n      \n      // Calculate similarity (1 for identical, 0 for completely opposite)\n      const similarity = 1 - Math.min(1, Math.abs(val1 - val2) / 2);\n      \n      // Weight based on how important this stressor is to either trait\n      const weight = (Math.abs(val1) + Math.abs(val2)) / 2;\n      \n      totalSimilarity += similarity * (1 + weight * 0.5);\n      totalWeight += 1;\n    });\n    \n    // Calculate compatibility score (0.3 to 1.0)\n    return 0.3 + 0.5 * (totalSimilarity / (totalWeight * 1.5));\n  };\n\n  // Calculate combined trait affinity for a stressor\n  const calculateCombinedAffinity = (stressor) => {\n    const allTraits = getAllTraits();\n    const traitsWithAffinity = allTraits.filter(trait => \n      trait.affinities && trait.affinities[stressor] !== undefined && \n      trait.affinities[stressor] !== 0 && \n      isTraitCompatibleWithBodyShape(trait)\n    );\n    \n    if (traitsWithAffinity.length === 0) return 0;\n    \n    // Sum affinities and normalize by square root of trait count\n    const sum = traitsWithAffinity.reduce(\n      (total, trait) => total + trait.affinities[stressor], 0\n    );\n    \n    // Using tanh to constrain to [-1, 1] range\n    return Math.tanh(sum / Math.sqrt(traitsWithAffinity.length));\n  };\n\n  // Calculate effective stress for a stressor\n  const calculateEffectiveStress = (stressor) => {\n    const stressorValue = environment[stressor];\n    if (stressorValue === 0) return 0;\n    \n    const combinedAffinity = calculateCombinedAffinity(stressor);\n    \n    // Sigmoid ratio calculation\n    const ratio = combinedAffinity / stressorValue;\n    const sigmoid = 1 / (1 + Math.exp(-3 * (ratio - 0.8)));\n    \n    // Effective stress calculation\n    return stressorValue * (1 - sigmoid);\n  };\n\n  // Calculate total effective stress\n  const calculateTotalEffectiveStress = () => {\n    const stressors = ['terrain_harshness', 'resource_scarcity', 'light_conditions', \n                      'ether_density', 'temperature', 'pressure_gravity'];\n    \n    // Calculate effective stress for all stressors\n    const stressorValues = stressors.map(stressor => calculateEffectiveStress(stressor));\n    \n    // Sum and normalize\n    const sum = stressorValues.reduce((total, stress) => total + stress, 0);\n    const numStressors = stressors.length;\n    \n    // Using tanh to constrain to [0, 1] range (mapping from [-1, 1] to [0, 1])\n    const stress = (Math.tanh(sum / Math.sqrt(numStressors)) + 1) / 2;\n    \n    return stress;\n  };\n\n  // Calculate adaptation probability\n  const calculateAdaptationProbability = (stress, duration = 10, threshold = 0.5) => {\n    const adaptationPressure = (stress * duration / 25) - threshold;\n    return 1 / (1 + Math.exp(-10 * adaptationPressure));\n  };\n\n  // Calculate environmental relevance for a trait\n  const calculateEnvironmentalRelevance = (trait) => {\n    if (!trait || !trait.affinities) return 0;\n    \n    let relevanceScore = 0;\n    \n    Object.keys(environment).forEach(stressor => {\n      if (trait.affinities[stressor] !== undefined) {\n        const stressorValue = environment[stressor];\n        const traitAffinity = trait.affinities[stressor];\n        \n        // Calculate relevance based on formula from documentation\n        relevanceScore += Math.abs(stressorValue) * stressorValue * traitAffinity;\n      }\n    });\n    \n    // Normalize using hyperbolic tangent\n    return Math.tanh(relevanceScore);\n  };\n\n  // Get trait category color\n  const getTraitCategoryColor = (categoryId) => {\n    const category = traitCategories.find(c => c.id === categoryId);\n    return category ? category.color : '#BFAD7F';\n  };\n\n  // Get trait glow intensity based on environmental relevance\n  const getTraitGlowIntensity = (trait) => {\n    const relevance = calculateEnvironmentalRelevance(trait);\n    // Scale from 0 to 1\n    const scaledRelevance = (relevance + 1) / 2;\n    return scaledRelevance;\n  };\n\n  // Handle mouse move for background effect\n  const handleMouseMove = (e) => {\n    setCursorPosition({ x: e.clientX, y: e.clientY });\n  };\n\n  // Handle trait selection\n  const handleTraitClick = (trait) => {\n    if (selectedTrait && selectedTrait.id === trait.id) {\n      setSelectedTrait(null);\n      setSelectedTraitConnections([]);\n    } else {\n      setSelectedTrait(trait);\n      \n      // Get connected traits\n      const connections = [];\n      if (trait.connections && trait.connections.length > 0) {\n        trait.connections.forEach(connectionId => {\n          const connectedTrait = findTraitById(connectionId);\n          if (connectedTrait) {\n            connections.push(connectedTrait);\n          }\n        });\n      }\n      \n      // If this is a tier > 0 trait, add parent trait\n      if (trait.tier > 0 && trait.parentId) {\n        const parentTrait = findTraitById(trait.parentId);\n        if (parentTrait && !connections.includes(parentTrait)) {\n          connections.push(parentTrait);\n        }\n      }\n      \n      // Find traits where this trait is the parent\n      const allTraits = getAllTraits();\n      allTraits.forEach(t => {\n        if (t.parentId === trait.id && !connections.includes(t)) {\n          connections.push(t);\n        }\n      });\n      \n      setSelectedTraitConnections(connections);\n    }\n  };\n\n  // Handle body shape click\n  const handleBodyShapeClick = () => {\n    setShowBodyShapeSelector(!showBodyShapeSelector);\n    setSelectedTrait(null);\n  };\n\n  // Change body shape\n  const changeBodyShape = (shapeId) => {\n    setSelectedBodyShape(shapeId);\n    setShowBodyShapeSelector(false);\n    setSelectedTrait(null);\n  };\n\n  // Setup the canvas and animation when component mounts or body shape changes\n  useEffect(() => {\n    if (!canvasRef.current || !containerRef.current) return;\n    \n    const canvas = canvasRef.current;\n    const container = containerRef.current;\n    const ctx = canvas.getContext('2d');\n    \n    // Set up canvas dimensions\n    const updateCanvasDimensions = () => {\n      const rect = container.getBoundingClientRect();\n      canvas.width = rect.width;\n      canvas.height = rect.height;\n      \n      networkRef.current = {\n        width: rect.width,\n        height: rect.height,\n        centerX: rect.width / 2,\n        centerY: rect.height / 2\n      };\n    };\n    \n    updateCanvasDimensions();\n    window.addEventListener('resize', updateCanvasDimensions);\n    \n    // Animation function\n    const animate = () => {\n      if (!networkRef.current) return;\n      \n      // Clear canvas\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      \n      const { centerX, centerY } = networkRef.current;\n      const allTraits = getAllTraits();\n      const traitPositions = {};\n      traitRefs.current = {};\n      \n      // Draw background circles representing tiers\n      const tierRadius = [0, 180, 300, 420];\n      \n      // Draw tier circles\n      for (let tier = 1; tier <= 3; tier++) {\n        ctx.beginPath();\n        ctx.arc(centerX, centerY, tierRadius[tier], 0, Math.PI * 2);\n        ctx.strokeStyle = 'rgba(191, 173, 127, 0.1)';\n        ctx.setLineDash(tier === 1 ? [] : [5, 5]);\n        ctx.lineWidth = 1;\n        ctx.stroke();\n        ctx.setLineDash([]);\n      }\n      \n      // Group traits by category and tier\n      const traitsByCategory = {};\n      traitCategories.forEach(category => {\n        traitsByCategory[category.id] = {\n          tier1: [],\n          tier2: [],\n          tier3: []\n        };\n      });\n      \n      allTraits.forEach(trait => {\n        const tier = trait.tier || 1;\n        if (tier <= 3 && traitsByCategory[trait.category]) {\n          traitsByCategory[trait.category][`tier${tier}`].push(trait);\n        }\n      });\n      \n      // Calculate positions for all traits\n      traitCategories.forEach((category, categoryIndex) => {\n        const categoryId = category.id;\n        const categoryAngleOffset = (categoryIndex / traitCategories.length) * Math.PI * 2;\n        \n        [1, 2, 3].forEach(tier => {\n          const traits = traitsByCategory[categoryId][`tier${tier}`] || [];\n          const traitCount = traits.length;\n          \n          if (traitCount === 0) return;\n          \n          const angleSpread = (Math.PI * 2) / traitCategories.length * 0.8;\n          \n          traits.forEach((trait, index) => {\n            const traitAngle = categoryAngleOffset + \n              (angleSpread / Math.max(1, traitCount - 1) * index) - \n              (angleSpread / 2);\n            \n            const radius = tierRadius[tier];\n            const x = centerX + Math.cos(traitAngle) * radius;\n            const y = centerY + Math.sin(traitAngle) * radius;\n            \n            traitPositions[trait.id] = { x, y, trait };\n            traitRefs.current[trait.id] = { x, y, radius: getNodeRadius(trait), trait };\n          });\n        });\n      });\n      \n      // Draw connections\n      allTraits.forEach(trait => {\n        if (trait.connections) {\n          const sourcePos = traitPositions[trait.id];\n          \n          if (!sourcePos) return;\n          \n          trait.connections.forEach(targetId => {\n            const targetPos = traitPositions[targetId];\n            \n            if (!targetPos) return;\n            \n            const sourceVisible = showAllTraits || \n              (selectedTrait && (selectedTrait.id === trait.id || \n                selectedTraitConnections.some(t => t.id === trait.id)));\n                \n            const targetVisible = showAllTraits || \n              (selectedTrait && (selectedTrait.id === targetId || \n                selectedTraitConnections.some(t => t.id === targetId)));\n            \n            if (sourceVisible && targetVisible) {\n              const compatibility = calculateCompatibility(sourcePos.trait, targetPos.trait);\n              \n              // Draw connection\n              ctx.beginPath();\n              ctx.moveTo(sourcePos.x, sourcePos.y);\n              \n              // Create a gentle curve for the connection\n              const midX = (sourcePos.x + targetPos.x) / 2;\n              const midY = (sourcePos.y + targetPos.y) / 2;\n              \n              // Pull toward center based on tier difference\n              const pullFactor = 0.2;\n              const controlX = midX + (centerX - midX) * pullFactor;\n              const controlY = midY + (centerY - midY) * pullFactor;\n              \n              ctx.quadraticCurveTo(controlX, controlY, targetPos.x, targetPos.y);\n              \n              const isSelected = selectedTrait && \n                (selectedTrait.id === trait.id || selectedTrait.id === targetId);\n              \n              // Gradient for connection\n              const gradient = ctx.createLinearGradient(\n                sourcePos.x, sourcePos.y, targetPos.x, targetPos.y\n              );\n              \n              const sourceColor = getTraitCategoryColor(sourcePos.trait.category);\n              const targetColor = getTraitCategoryColor(targetPos.trait.category);\n              \n              gradient.addColorStop(0, sourceColor);\n              gradient.addColorStop(1, targetColor);\n              \n              // Set line style\n              ctx.strokeStyle = gradient;\n              ctx.lineWidth = isSelected ? 3 : 2;\n              ctx.globalAlpha = isSelected ? 0.8 : 0.5 * compatibility;\n              \n              if (isSelected) {\n                ctx.shadowColor = 'rgba(255, 253, 227, 0.6)';\n                ctx.shadowBlur = 8;\n              }\n              \n              ctx.stroke();\n              ctx.globalAlpha = 1;\n              ctx.shadowBlur = 0;\n            }\n          });\n        }\n        \n        // Draw parent-child connections\n        if (trait.tier > 0 && trait.parentId) {\n          const childPos = traitPositions[trait.id];\n          const parentPos = traitPositions[trait.parentId];\n          \n          if (childPos && parentPos) {\n            const childVisible = showAllTraits || \n              (selectedTrait && (selectedTrait.id === trait.id || \n                selectedTraitConnections.some(t => t.id === trait.id)));\n                \n            const parentVisible = showAllTraits || \n              (selectedTrait && (selectedTrait.id === trait.parentId || \n                selectedTraitConnections.some(t => t.id === trait.parentId)));\n            \n            if (childVisible && parentVisible) {\n              const isSelected = selectedTrait && \n                (selectedTrait.id === trait.id || selectedTrait.id === trait.parentId);\n              \n              // Draw evolutionary connection\n              ctx.beginPath();\n              ctx.moveTo(childPos.x, childPos.y);\n              \n              // Create a curve toward center\n              const midX = (childPos.x + parentPos.x) / 2;\n              const midY = (childPos.y + parentPos.y) / 2;\n              \n              // Pull toward center\n              const pullFactor = 0.25;\n              const controlX = midX + (centerX - midX) * pullFactor;\n              const controlY = midY + (centerY - midY) * pullFactor;\n              \n              ctx.quadraticCurveTo(controlX, controlY, parentPos.x, parentPos.y);\n              \n              // Special styling for evolutionary connections\n              const evolutionGradient = ctx.createLinearGradient(\n                childPos.x, childPos.y, parentPos.x, parentPos.y\n              );\n              \n              const childColor = getTraitCategoryColor(childPos.trait.category);\n              const parentColor = getTraitCategoryColor(parentPos.trait.category);\n              \n              evolutionGradient.addColorStop(0, childColor);\n              evolutionGradient.addColorStop(1, parentColor);\n              \n              ctx.strokeStyle = evolutionGradient;\n              ctx.lineWidth = isSelected ? 3 : 2;\n              ctx.setLineDash([3, 3]);\n              ctx.globalAlpha = isSelected ? 0.9 : 0.6;\n              \n              if (isSelected) {\n                ctx.shadowColor = 'rgba(255, 253, 227, 0.6)';\n                ctx.shadowBlur = 8;\n              }\n              \n              ctx.stroke();\n              ctx.setLineDash([]);\n              ctx.globalAlpha = 1;\n              ctx.shadowBlur = 0;\n            }\n          }\n        }\n      });\n      \n      // Draw nodes for each trait\n      Object.keys(traitPositions).forEach(traitId => {\n        const { x, y, trait } = traitPositions[traitId];\n        const category = trait.category;\n        const categoryColor = getTraitCategoryColor(category);\n        \n        const isSelected = selectedTrait && selectedTrait.id === trait.id;\n        const isConnected = selectedTrait && selectedTraitConnections.some(t => t.id === trait.id);\n        const isVisible = showAllTraits || isSelected || isConnected;\n        \n        if (!isVisible) return;\n        \n        // Get trait size based on tier and state\n        const baseSize = trait.tier === 1 ? 16 : trait.tier === 2 ? 20 : 24;\n        const nodeSize = isSelected ? baseSize * 1.3 : isConnected ? baseSize * 1.1 : baseSize;\n        \n        // Calculate glow based on environmental relevance\n        const glowIntensity = getTraitGlowIntensity(trait);\n        \n        // Draw trait node with glow effect\n        ctx.beginPath();\n        ctx.arc(x, y, nodeSize, 0, Math.PI * 2);\n        ctx.fillStyle = categoryColor;\n        \n        // Add glow based on environmental relevance\n        ctx.shadowColor = 'rgba(255, 253, 227, 0.8)';\n        ctx.shadowBlur = 10 + glowIntensity * 15;\n        ctx.fill();\n        \n        // Add border\n        ctx.strokeStyle = isSelected ? '#FFFFFF' : categoryColor;\n        ctx.lineWidth = isSelected ? 3 : 2;\n        ctx.stroke();\n        \n        // Reset shadow for text\n        ctx.shadowBlur = 0;\n        \n        // Draw compatibility indicator for selected trait connections\n        if (isConnected && selectedTrait) {\n          const compatibility = calculateCompatibility(selectedTrait, trait);\n          \n          // Draw compatibility arc around node\n          ctx.beginPath();\n          ctx.arc(x, y, nodeSize + 5, 0, Math.PI * 2 * compatibility);\n          ctx.strokeStyle = 'rgba(255, 255, 255, 0.8)';\n          ctx.lineWidth = 2;\n          ctx.stroke();\n        }\n        \n        // Store node position and size for interaction\n        traitRefs.current[traitId] = { x, y, radius: nodeSize, trait };\n      });\n      \n      // Draw central body shape\n      if (bodyShapeIconRef.current) {\n        const bodyShape = bodyShapes.find(shape => shape.id === selectedBodyShape);\n        const bodyShapeSize = 50;\n        \n        // Draw body shape background\n        ctx.beginPath();\n        ctx.arc(centerX, centerY, bodyShapeSize, 0, Math.PI * 2);\n        ctx.fillStyle = 'rgba(191, 173, 127, 0.8)';\n        ctx.shadowColor = 'rgba(191, 173, 127, 0.6)';\n        ctx.shadowBlur = 20;\n        ctx.fill();\n        \n        // Draw body shape border\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.5)';\n        ctx.lineWidth = 2;\n        ctx.stroke();\n        \n        // Reset shadow\n        ctx.shadowBlur = 0;\n        \n        // Draw body shape text\n        ctx.font = 'bold 14px Arial';\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText(bodyShape?.name || 'Body Shape', centerX, centerY);\n        \n        // Store body shape position for interaction\n        bodyShapeIconRef.current = {\n          x: centerX,\n          y: centerY,\n          radius: bodyShapeSize\n        };\n      } else {\n        bodyShapeIconRef.current = {\n          x: centerX,\n          y: centerY,\n          radius: 50\n        };\n      }\n      \n      // Continue animation\n      animationFrameRef.current = requestAnimationFrame(animate);\n    };\n    \n    // Start animation loop\n    animate();\n    \n    // Set loaded after a delay\n    const timer = setTimeout(() => {\n      setIsLoaded(true);\n    }, 1000);\n    \n    // Cleanup on unmount\n    return () => {\n      window.removeEventListener('resize', updateCanvasDimensions);\n      clearTimeout(timer);\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [\n    selectedBodyShape, \n    selectedTrait, \n    selectedTraitConnections, \n    environment, \n    showAllTraits,\n    getTraitCategoryColor,\n    calculateCompatibility,\n    getTraitGlowIntensity\n  ]);\n\n  // Calculate stress and adaptation probability when environment changes\n  useEffect(() => {\n    const stress = calculateTotalEffectiveStress();\n    setTotalEffectiveStress(stress);\n    \n    const probability = calculateAdaptationProbability(stress);\n    setAdaptationProbability(probability);\n  }, [environment, selectedBodyShape]);\n\n  // Handle canvas clicks to detect trait and body shape selection\n  const handleCanvasClick = (e) => {\n    if (!canvasRef.current || !bodyShapeIconRef.current) return;\n    \n    const rect = canvasRef.current.getBoundingClientRect();\n    const mouseX = e.clientX - rect.left;\n    const mouseY = e.clientY - rect.top;\n    \n    // Check if clicked on body shape\n    const { x, y, radius } = bodyShapeIconRef.current;\n    const distance = Math.sqrt((mouseX - x) ** 2 + (mouseY - y) ** 2);\n    \n    if (distance <= radius) {\n      handleBodyShapeClick();\n      return;\n    }\n    \n    // Check if clicked on any trait\n    let clickedTrait = null;\n    \n    Object.keys(traitRefs.current).forEach(traitId => {\n      const traitRef = traitRefs.current[traitId];\n      const traitDistance = Math.sqrt(\n        (mouseX - traitRef.x) ** 2 + (mouseY - traitRef.y) ** 2\n      );\n      \n      if (traitDistance <= traitRef.radius) {\n        clickedTrait = traitRef.trait;\n      }\n    });\n    \n    if (clickedTrait) {\n      handleTraitClick(clickedTrait);\n    } else if (selectedTrait) {\n      setSelectedTrait(null);\n      setSelectedTraitConnections([]);\n    }\n  };\n\n  // Handle canvas mouse movement for hover effects\n  const handleCanvasMouseMove = (e) => {\n    if (!canvasRef.current) return;\n    \n    const rect = canvasRef.current.getBoundingClientRect();\n    const mouseX = e.clientX - rect.left;\n    const mouseY = e.clientY - rect.top;\n    \n    // Check if mouse is over any trait\n    let hovered = null;\n    \n    Object.keys(traitRefs.current).forEach(traitId => {\n      const traitRef = traitRefs.current[traitId];\n      const distance = Math.sqrt(\n        (mouseX - traitRef.x) ** 2 + (mouseY - traitRef.y) ** 2\n      );\n      \n      if (distance <= traitRef.radius) {\n        hovered = traitRef.trait;\n      }\n    });\n    \n    setHoveredTrait(hovered);\n  };\n\n  // Handle filter mode changes\n  const handleFilterModeChange = (mode) => {\n    setFilterMode(mode);\n    \n    if (mode === 'all') {\n      setShowAllTraits(true);\n    } else if (mode === 'relevance') {\n      // Show only traits with positive environmental relevance\n      setShowAllTraits(false);\n    } else if (mode === 'category' && selectedTrait) {\n      // Show only traits in the same category as selected trait\n      setShowAllTraits(false);\n    }\n  };\n\n  // Helper function to get node radius based on trait tier\n  const getNodeRadius = (trait) => {\n    if (!trait) return 16;\n    const tier = trait.tier || 1;\n    return tier === 1 ? 16 : tier === 2 ? 20 : 24;\n  };\n\n  // Render trait tooltip when hovering\n  const renderTraitTooltip = () => {\n    if (!hoveredTrait || selectedTrait) return null;\n    \n    const trait = hoveredTrait;\n    const relevance = calculateEnvironmentalRelevance(trait);\n    \n    return (\n      <motion.div\n        initial={{ opacity: 0, y: 10 }}\n        animate={{ opacity: 1, y: 0 }}\n        exit={{ opacity: 0, y: 10 }}\n        transition={{ duration: 0.2 }}\n        className={classes.traitTooltip}\n      >\n        <div className={classes.traitTooltipHeader} style={{ \n          backgroundColor: getTraitCategoryColor(trait.category) \n        }}>\n          <h3>{trait.name}</h3>\n          <span>Tier {trait.tier} {trait.category}</span>\n        </div>\n        <div className={classes.traitTooltipContent}>\n          <p>{trait.description}</p>\n          <div className={classes.traitTooltipStats}>\n            <div className={classes.traitTooltipStat}>\n              <span>Environmental Relevance</span>\n              <span className={`${classes.traitTooltipStatValue} ${relevance > 0 ? classes.positive : relevance < 0 ? classes.negative : ''}`}>\n                {relevance.toFixed(2)}\n              </span>\n            </div>\n          </div>\n        </div>\n      </motion.div>\n    );\n  };\n\n  // Render environmental controls\n  const renderEnvironmentControls = () => {\n    const environmentControls = [\n      { id: 'temperature', name: 'Temperature', min: -1, max: 1 },\n      { id: 'light_conditions', name: 'Light Conditions', min: -1, max: 1 },\n      { id: 'terrain_harshness', name: 'Terrain Harshness', min: -1, max: 1 },\n      { id: 'resource_scarcity', name: 'Resource Scarcity', min: -1, max: 1 },\n      { id: 'ether_density', name: 'Ether Density', min: -1, max: 1 },\n      { id: 'pressure_gravity', name: 'Pressure/Gravity', min: -1, max: 1 }\n    ];\n    \n    return (\n      <div className={classes.environmentControls}>\n        <RevealText>\n          <h3 className={classes.controlsTitle}>Environmental Stressors</h3>\n        </RevealText>\n        \n        <div className={classes.environmentSliders}>\n          {environmentControls.map(control => (\n            <div key={control.id} className={classes.sliderContainer}>\n              <div className={classes.sliderLabel}>\n                <span>{control.name}</span>\n                <span className={`\n                  ${classes.sliderValue} \n                  ${environment[control.id] > 0 ? classes.positive : environment[control.id] < 0 ? classes.negative : ''}\n                `}>\n                  {environment[control.id].toFixed(1)}\n                </span>\n              </div>\n              <input\n                type=\"range\"\n                min={control.min}\n                max={control.max}\n                step=\"0.1\"\n                value={environment[control.id]}\n                onChange={(e) => \n                  setEnvironment(prev => ({\n                    ...prev,\n                    [control.id]: parseFloat(e.target.value)\n                  }))\n                }\n                className={classes.slider}\n              />\n            </div>\n          ))}\n        </div>\n        \n        <div className={classes.adaptationStats}>\n          <div className={classes.adaptationStat}>\n            <span>Total Effective Stress:</span>\n            <div className={classes.stressBar}>\n              <div \n                className={classes.stressBarFill} \n                style={{ \n                  width: `${totalEffectiveStress * 100}%`,\n                  backgroundColor: \n                    totalEffectiveStress > 0.7 ? '#B54B4B' : \n                    totalEffectiveStress > 0.4 ? '#C99846' : \n                    '#5C9D8B'\n                }}\n              ></div>\n              <span>{(totalEffectiveStress).toFixed(2)}</span>\n            </div>\n          </div>\n          <div className={classes.adaptationStat}>\n            <span>Adaptation Probability:</span>\n            <div className={classes.stressBar}>\n              <div \n                className={classes.stressBarFill}\n                style={{ \n                  width: `${adaptationProbability * 100}%`,\n                  backgroundColor: \n                    adaptationProbability > 0.7 ? '#B54B4B' : \n                    adaptationProbability > 0.4 ? '#C99846' : \n                    '#5C9D8B'\n                }}\n              ></div>\n              <span>{(adaptationProbability).toFixed(2)}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  // Render body shape selector\n  const renderBodyShapeSelector = () => {\n    if (!showBodyShapeSelector) return null;\n    \n    return (\n      <motion.div \n        className={classes.bodyShapeSelector}\n        initial={{ opacity: 0, scale: 0.95 }}\n        animate={{ opacity: 1, scale: 1 }}\n        exit={{ opacity: 0, scale: 0.95 }}\n        transition={{ duration: 0.3 }}\n      >\n        <h3 className={classes.selectorTitle}>Select Body Shape</h3>\n        <div className={classes.bodyShapeOptions}>\n          {bodyShapes.map(shape => (\n            <div \n              key={shape.id}\n              className={`${classes.bodyShapeOption} ${selectedBodyShape === shape.id ? classes.selected : ''}`}\n              onClick={() => changeBodyShape(shape.id)}\n            >\n              <div className={classes.bodyShapeName}>{shape.name}</div>\n              <div className={classes.bodyShapeDescription}>{shape.description}</div>\n            </div>\n          ))}\n        </div>\n      </motion.div>\n    );\n  };\n\n  // Render trait details panel\n  const renderTraitDetails = () => {\n    if (!selectedTrait) return null;\n    \n    const trait = selectedTrait;\n    const categoryName = traitCategories.find(c => c.id === trait.category)?.name || trait.category;\n    const relevance = calculateEnvironmentalRelevance(trait);\n    \n    // Find parent trait if available\n    let parentTrait = null;\n    if (trait.tier > 0 && trait.parentId) {\n      parentTrait = findTraitById(trait.parentId);\n    }\n    \n    // Get synthesized trait if available\n    const synthesizedTrait = trait.synthesis?.result;\n    \n    return (\n      <motion.div \n        className={classes.traitDetails}\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        exit={{ opacity: 0, y: 20 }}\n        transition={{ duration: 0.3 }}\n      >\n        <div \n          className={classes.traitDetailsHeader}\n          style={{ backgroundColor: getTraitCategoryColor(trait.category) }}\n        >\n          <div className={classes.traitHeaderContent}>\n            <h2 className={classes.traitName}>{trait.name}</h2>\n            <div className={classes.traitMeta}>\n              {categoryName} • Tier {trait.tier}\n            </div>\n          </div>\n          <button \n            className={classes.closeButton}\n            onClick={() => setSelectedTrait(null)}\n          >\n            ×\n          </button>\n        </div>\n        \n        <div className={classes.traitDetailsContent}>\n          <div className={classes.traitDescription}>\n            {trait.description}\n          </div>\n          \n          <div className={classes.traitDetailsSection}>\n            <h3 className={classes.sectionTitle}>Environmental Affinities</h3>\n            <div className={classes.affinitiesGrid}>\n              {Object.entries(trait.affinities).map(([stressor, value]) => {\n                if (value === 0) return null;\n                \n                const stressorName = stressor.split('_').map(word => \n                  word.charAt(0).toUpperCase() + word.slice(1)\n                ).join(' ');\n                \n                return (\n                  <div key={stressor} className={classes.affinityItem}>\n                    <span className={classes.affinityName}>{stressorName}</span>\n                    <span className={`\n                      ${classes.affinityValue} \n                      ${value > 0 ? classes.positive : classes.negative}\n                    `}>\n                      {value > 0 ? '+' : ''}{value.toFixed(1)}\n                    </span>\n                  </div>\n                );\n              })}\n            </div>\n            \n            <div className={classes.environmentalRelevance}>\n              <div className={classes.relevanceLabel}>\n                Environmental Relevance\n              </div>\n              <div className={`\n                ${classes.relevanceValue} \n                ${relevance > 0 ? classes.positive : relevance < 0 ? classes.negative : ''}\n              `}>\n                {relevance.toFixed(2)}\n              </div>\n            </div>\n          </div>\n          \n          {parentTrait && (\n            <div className={classes.traitDetailsSection}>\n              <h3 className={classes.sectionTitle}>Evolutionary Origin</h3>\n              <div\n                className={classes.parentTrait}\n                onClick={() => handleTraitClick(parentTrait)}\n              >\n                <div className={classes.parentTraitIcon} style={{ \n                  backgroundColor: getTraitCategoryColor(parentTrait.category) \n                }}></div>\n                <div className={classes.parentTraitDetails}>\n                  <div className={classes.parentTraitName}>{parentTrait.name}</div>\n                  <div className={classes.parentTraitCategory}>\n                    {traitCategories.find(c => c.id === parentTrait.category)?.name} • Tier {parentTrait.tier}\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n          \n          {selectedTraitConnections.length > 0 && (\n            <div className={classes.traitDetailsSection}>\n              <h3 className={classes.sectionTitle}>Connected Traits</h3>\n              <div className={classes.connectionsList}>\n                {selectedTraitConnections.map(connection => {\n                  const compatibility = calculateCompatibility(trait, connection);\n                  \n                  return (\n                    <div\n                      key={connection.id}\n                      className={classes.connectionItem}\n                      onClick={() => handleTraitClick(connection)}\n                    >\n                      <div className={classes.connectionItemLeft}>\n                        <div \n                          className={classes.connectionDot} \n                          style={{ backgroundColor: getTraitCategoryColor(connection.category) }}\n                        ></div>\n                        <div className={classes.connectionDetails}>\n                          <div className={classes.connectionName}>{connection.name}</div>\n                          <div className={classes.connectionCategory}>\n                            {traitCategories.find(c => c.id === connection.category)?.name} • Tier {connection.tier}\n                          </div>\n                        </div>\n                      </div>\n                      <div className={`\n                        ${classes.compatibilityBadge}\n                        ${compatibility > 0.7 ? classes.highCompatibility : \n                          compatibility > 0.5 ? classes.mediumCompatibility : \n                          classes.lowCompatibility}\n                      `}>\n                        {compatibility.toFixed(2)}\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          )}\n          \n          {synthesizedTrait && (\n            <div className={classes.traitDetailsSection}>\n              <h3 className={classes.sectionTitle}>Synthesis Potential</h3>\n              <div className={classes.synthesisPotential}>\n                <div className={classes.synthesisName}>\n                  {synthesizedTrait.name}\n                </div>\n                <div className={classes.synthesisDescription}>\n                  {synthesizedTrait.description}\n                </div>\n                <div className={classes.synthesisCondition}>\n                  <span>Trigger Condition:</span> \n                  <span className={classes.conditionName}>\n                    {trait.synthesis.condition.split('_').map(word => \n                      word.charAt(0).toUpperCase() + word.slice(1)\n                    ).join(' ')}\n                  </span>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </motion.div>\n    );\n  };\n\n  // Main render\n  return (\n    <div \n      className={classes.evolutionSimulator}\n      onMouseMove={handleMouseMove}\n    >\n      {/* Background with stars */}\n      <Background cursorPosition={cursorPosition} setCursorPosition={setCursorPosition} />\n      \n      {/* Meteor shower effect */}\n      <MeteorShower \n        height=\"100vh\"\n        zIndex={2}\n        trailColor=\"rgba(191, 173, 127, 0.8)\"\n        glowColor=\"rgba(207, 185, 130, 0.6)\"\n        coreColor=\"rgba(255, 248, 220, 1)\"\n        meteorDensity={15}\n        meteorMinSize={1}\n        meteorMaxSize={2}\n        meteorSpeed={0.08}\n        trailLength={300}\n        trailSegments={80}\n        enableParallax={true}\n        parallaxIntensity={0.15}\n        mode=\"arc\"\n        staggered={true}\n      />\n      \n      {/* Header section */}\n      <header ref={headerRef} className={classes.header}>\n        <ScrollingTextAnimation\n          scrollConfig={{\n            startPosition: 0,\n            endPosition: 300,\n            initialY: -30,\n            finalY: 0,\n            clampValues: true\n          }}\n        >\n          <h1 className={classes.title}>Crescent Evolution System</h1>\n          <p className={classes.subtitle}>\n            Explore the interconnected trait networks that drive evolution through Bayesian natural selection\n          </p>\n        </ScrollingTextAnimation>\n      </header>\n      \n      {/* Main content */}\n      <div \n        ref={contentRef}\n        className={`${classes.content} ${isLoaded ? classes.loaded : ''}`}\n      >\n        {/* Filter modes */}\n        <div className={classes.filterControls}>\n          <button \n            className={`${classes.filterButton} ${filterMode === 'all' ? classes.active : ''}`}\n            onClick={() => handleFilterModeChange('all')}\n          >\n            All Traits\n          </button>\n          <button \n            className={`${classes.filterButton} ${filterMode === 'relevance' ? classes.active : ''}`}\n            onClick={() => handleFilterModeChange('relevance')}\n          >\n            By Relevance\n          </button>\n          <button \n            className={`${classes.filterButton} ${filterMode === 'category' ? classes.active : ''}`}\n            onClick={() => handleFilterModeChange('category')}\n            disabled={!selectedTrait}\n          >\n            By Category\n          </button>\n        </div>\n        \n        {/* Network visualization */}\n        <div \n          ref={containerRef}\n          className={classes.networkContainer}\n          onClick={handleCanvasClick}\n          onMouseMove={handleCanvasMouseMove}\n        >\n          <canvas \n            ref={canvasRef}\n            className={classes.networkCanvas}\n          />\n          \n          {/* Trait tooltip on hover */}\n          <AnimatePresence>\n            {hoveredTrait && renderTraitTooltip()}\n          </AnimatePresence>\n          \n          {/* Body shape selector popup */}\n          <AnimatePresence>\n            {renderBodyShapeSelector()}\n          </AnimatePresence>\n        </div>\n        \n        {/* Side panel */}\n        <div className={classes.sidePanel}>\n          {/* Environmental controls */}\n          {renderEnvironmentControls()}\n          \n          {/* Trait details when selected */}\n          <AnimatePresence>\n            {selectedTrait && renderTraitDetails()}\n          </AnimatePresence>\n          \n          {/* Category legend */}\n          <div className={classes.categoryLegend}>\n            <h3 className={classes.controlsTitle}>Trait Categories</h3>\n            <div className={classes.legendItems}>\n              {traitCategories.map(category => (\n                <div key={category.id} className={classes.legendItem}>\n                  <div \n                    className={classes.legendColor}\n                    style={{ backgroundColor: category.color }}\n                  ></div>\n                  <span className={classes.legendName}>{category.name}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Usage instructions */}\n      <div className={classes.instructions}>\n        Click on body shape or traits to explore connections and adaptations\n      </div>\n      \n      {/* Accessibility skip link */}\n      <a href=\"#content\" className={classes.skipLink}>\n        Skip to main content\n      </a>\n    </div>\n  );\n};\n\nexport default EvolutionSimulator;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}