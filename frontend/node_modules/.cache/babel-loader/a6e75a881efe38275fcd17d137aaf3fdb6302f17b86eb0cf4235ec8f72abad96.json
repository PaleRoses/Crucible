{"ast":null,"code":"var _jsxFileName = \"/home/valeria/Documents/Crucible/frontend/src/components/core/Background.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useCallback, useMemo } from 'react';\n\n/**\n * Optimized Background Component\n * \n * Creates an immersive stellar background with realistic star particles\n * with performance optimizations and session persistence.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Background = () => {\n  _s();\n  // Refs for DOM elements and animation state\n  const containerRef = useRef(null);\n  const canvasRef = useRef(null);\n  const starsRef = useRef([]);\n  const animationFrameRef = useRef(null);\n  const lastTimeRef = useRef(0);\n\n  // Use refs instead of state to prevent re-renders during initialization\n  const isInitializedRef = useRef(false);\n  const firstRenderCompleteRef = useRef(false);\n\n  // Store dimensions in a ref to avoid re-renders when they change\n  const dimensionsRef = useRef({\n    width: 0,\n    height: 0,\n    pixelRatio: 1\n  });\n\n  // Configuration - wrapped in useMemo to prevent recreation on each render\n  const CONFIG = useMemo(() => ({\n    // Reduced star count for better performance\n    starCount: 100,\n    starSizeMin: 0.8,\n    starSizeMax: 2.5,\n    starOpacityMin: 0.15,\n    starOpacityMax: 0.85,\n    // Simplified motion parameters\n    baseMovementSpeed: 0.00008,\n    // Reduced movement speed\n    pulseFrequency: 0.00003,\n    // Disabled parallax effect for better performance\n    parallaxEnabled: false,\n    // Performance parameters\n    maxFPS: 30,\n    useRays: false,\n    // Disable ray rendering for better performance\n\n    // Session persistence\n    sessionKey: 'star_background_config'\n  }), []);\n\n  // Warm, golden color palette - wrapped in useMemo\n  const COLORS = useMemo(() => ({\n    // Simplified color palette\n    stars: ['rgba(255, 243, 200, alpha)',\n    // Warm yellow\n    'rgba(255, 231, 164, alpha)',\n    // Golden\n    'rgba(252, 249, 231, alpha)' // Off-white gold\n    ],\n    // Background gradient colors\n    background: {\n      topColor: 'rgb(8, 8, 12)',\n      bottomColor: 'rgb(15, 15, 20)'\n    }\n  }), []);\n\n  // Pre-generated color values to avoid string replacements during animation\n  const colorCache = useMemo(() => {\n    const cache = {};\n    COLORS.stars.forEach(baseColor => {\n      cache[baseColor] = {};\n      for (let opacity = 0; opacity <= 10; opacity++) {\n        const value = opacity / 10;\n        cache[baseColor][value] = baseColor.replace(/alpha\\)$/, `${value})`);\n      }\n    });\n    return cache;\n  }, [COLORS.stars]);\n\n  // Get color with opacity from cache (faster than string replacement)\n  const getColor = useCallback((baseColor, opacity) => {\n    const safeOpacity = Math.max(0, Math.min(1, opacity || 0));\n    // Round to nearest 0.1 to use cached values\n    const roundedOpacity = Math.round(safeOpacity * 10) / 10;\n    return colorCache[baseColor][roundedOpacity] || baseColor.replace(/alpha\\)$/, `${safeOpacity})`);\n  }, [colorCache]);\n\n  // Load or generate session-persistent configuration\n  const getSessionConfiguration = useCallback(() => {\n    try {\n      // Try to load existing configuration from sessionStorage\n      const storedConfig = sessionStorage.getItem(CONFIG.sessionKey);\n      if (storedConfig) {\n        return JSON.parse(storedConfig);\n      }\n    } catch (error) {\n      console.warn('Could not load star configuration from session storage', error);\n    }\n\n    // Generate new configuration if none exists\n    const starSeeds = [];\n    for (let i = 0; i < CONFIG.starCount; i++) {\n      starSeeds.push({\n        xSeed: Math.random(),\n        ySeed: Math.random(),\n        zSeed: Math.random() * 0.8 + 0.1,\n        sizeSeed: Math.random(),\n        opacitySeed: Math.random(),\n        phaseSeed: Math.random() * Math.PI * 2,\n        speedSeed: Math.random() * 0.2 + 0.9,\n        pulseSpeedSeed: Math.random() * 0.002 + 0.001,\n        colorIndex: Math.floor(Math.random() * COLORS.stars.length)\n      });\n    }\n\n    // Store new configuration in sessionStorage\n    const newConfig = {\n      starSeeds,\n      timestamp: Date.now()\n    };\n    try {\n      sessionStorage.setItem(CONFIG.sessionKey, JSON.stringify(newConfig));\n    } catch (error) {\n      console.warn('Could not save star configuration to session storage', error);\n    }\n    return newConfig;\n  }, [CONFIG.sessionKey, CONFIG.starCount, COLORS.stars.length]);\n\n  // Initialize canvas with proper resolution\n  const setupCanvas = useCallback(() => {\n    if (!canvasRef.current) return false;\n    const canvas = canvasRef.current;\n\n    // Get viewport dimensions\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    const pixelRatio = window.devicePixelRatio || 1;\n\n    // Set canvas size accounting for pixel ratio\n    canvas.width = width * pixelRatio;\n    canvas.height = height * pixelRatio;\n    canvas.style.width = `${width}px`;\n    canvas.style.height = `${height}px`;\n\n    // Ensure canvas is visible with a background color\n    const ctx = canvas.getContext('2d', {\n      alpha: false\n    }); // Optimize for non-transparent canvas\n    if (ctx) {\n      ctx.fillStyle = 'rgb(15, 15, 20)';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n    }\n\n    // Update dimensions ref instead of state\n    dimensionsRef.current = {\n      width,\n      height,\n      pixelRatio\n    };\n    return true;\n  }, []);\n\n  // Initialize stars with session-persistent configuration\n  const initializeStars = useCallback(() => {\n    const {\n      width,\n      height\n    } = dimensionsRef.current;\n    if (!width || !height) return;\n\n    // Get or create session-persistent configuration\n    const sessionConfig = getSessionConfiguration();\n    const {\n      starSeeds\n    } = sessionConfig;\n\n    // Clear existing stars\n    starsRef.current = [];\n\n    // Create stars using the persistent seeds\n    for (let i = 0; i < starSeeds.length; i++) {\n      const seed = starSeeds[i];\n      const star = {};\n\n      // Position - use seeds but adapt to current screen dimensions\n      star.x = seed.xSeed * width;\n      star.y = seed.ySeed * height;\n      star.z = seed.zSeed; // Depth (0.1 to 0.9)\n\n      // Visual properties\n      star.size = (seed.sizeSeed * (CONFIG.starSizeMax - CONFIG.starSizeMin) + CONFIG.starSizeMin) * star.z;\n      star.baseOpacity = seed.opacitySeed * (CONFIG.starOpacityMax - CONFIG.starOpacityMin) + CONFIG.starOpacityMin;\n      star.opacity = star.baseOpacity;\n\n      // Animation properties\n      star.pulsePhase = seed.phaseSeed;\n      star.pulseSpeed = seed.pulseSpeedSeed;\n      star.movementSpeed = seed.speedSeed * CONFIG.baseMovementSpeed * (1.1 - star.z);\n\n      // Color variation\n      star.color = COLORS.stars[seed.colorIndex];\n\n      // Store in ref\n      starsRef.current.push(star);\n    }\n  }, [CONFIG, COLORS.stars, getSessionConfiguration]);\n\n  // Optimized star rendering\n  const drawStar = useCallback((ctx, star) => {\n    // Skip rendering almost invisible stars\n    if (star.opacity < 0.05) return;\n\n    // Simplified star rendering without creating new gradients every frame\n    ctx.beginPath();\n    ctx.arc(star.x, star.y, star.size, 0, Math.PI * 2);\n    ctx.fillStyle = getColor(star.color, star.opacity);\n    ctx.fill();\n\n    // Simplified glow effect without expensive gradient creation\n    if (star.opacity > 0.3) {\n      ctx.beginPath();\n      ctx.arc(star.x, star.y, star.size * 1.8, 0, Math.PI * 2);\n      ctx.fillStyle = getColor(star.color, star.opacity * 0.4);\n      ctx.fill();\n    }\n  }, [getColor]);\n\n  // Render the scene - optimized for performance\n  const renderScene = useCallback(() => {\n    if (!canvasRef.current) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d', {\n      alpha: false\n    });\n    if (!ctx) return;\n    const {\n      width,\n      height,\n      pixelRatio\n    } = dimensionsRef.current;\n\n    // Clear canvas\n    ctx.fillStyle = COLORS.background.topColor;\n    ctx.fillRect(0, 0, width * pixelRatio, height * pixelRatio);\n\n    // Apply device pixel ratio scaling only once\n    ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n\n    // Enable global composition for better glow effect\n    ctx.globalCompositeOperation = 'lighter';\n\n    // Draw stars\n    for (let i = 0; i < starsRef.current.length; i++) {\n      drawStar(ctx, starsRef.current[i]);\n    }\n\n    // Reset global composition\n    ctx.globalCompositeOperation = 'source-over';\n  }, [COLORS.background.topColor, drawStar]);\n\n  // Update animation state - optimized for performance\n  const updateAnimation = useCallback((deltaTime, timestamp) => {\n    const {\n      width,\n      height\n    } = dimensionsRef.current;\n\n    // Global time factor for animations\n    const timeFactor = timestamp * 0.001;\n\n    // Update stars\n    for (let i = 0; i < starsRef.current.length; i++) {\n      const star = starsRef.current[i];\n\n      // Simplified movement based on time\n      star.x += Math.sin(timeFactor * 0.2 + star.pulsePhase) * star.movementSpeed * deltaTime;\n      star.y += Math.cos(timeFactor * 0.3 + star.pulsePhase * 1.3) * star.movementSpeed * deltaTime;\n\n      // Wrap around screen edges\n      if (star.x < 0) star.x = width;\n      if (star.x > width) star.x = 0;\n      if (star.y < 0) star.y = height;\n      if (star.y > height) star.y = 0;\n\n      // Simplified pulsing effect\n      const pulseFactor = Math.sin(timeFactor * star.pulseSpeed + star.pulsePhase) * 0.15 + 0.85;\n      star.opacity = star.baseOpacity * pulseFactor;\n    }\n  }, []);\n\n  // Define the animation loop function\n  const animate = useCallback(function animationLoop(timestamp) {\n    if (!isInitializedRef.current) {\n      animationFrameRef.current = requestAnimationFrame(animationLoop);\n      return;\n    }\n\n    // Limit FPS\n    const minFrameTime = 1000 / CONFIG.maxFPS;\n    const elapsed = timestamp - (lastTimeRef.current || 0);\n    if (elapsed < minFrameTime) {\n      animationFrameRef.current = requestAnimationFrame(animationLoop);\n      return;\n    }\n\n    // Calculate delta time with cap to prevent large jumps\n    const deltaTime = lastTimeRef.current ? Math.min(elapsed, 50) : 16;\n    lastTimeRef.current = timestamp;\n\n    // Update animation state\n    updateAnimation(deltaTime, timestamp);\n\n    // Render scene\n    renderScene();\n\n    // Schedule next frame\n    animationFrameRef.current = requestAnimationFrame(animationLoop);\n  }, [CONFIG.maxFPS, updateAnimation, renderScene]);\n\n  // Comprehensive initialization and resize handling\n  useEffect(() => {\n    // One-time initialization function\n    const initialize = () => {\n      if (setupCanvas()) {\n        // Create stars only after canvas is ready\n        initializeStars();\n        // Mark as initialized but don't trigger re-render\n        isInitializedRef.current = true;\n        // Start animation only after everything is ready\n        animationFrameRef.current = requestAnimationFrame(animate);\n      }\n    };\n\n    // Handle resize events\n    const handleResize = () => {\n      // Only re-initialize if already initialized\n      if (isInitializedRef.current) {\n        setupCanvas();\n        initializeStars();\n        // No need to change initialization state\n      }\n    };\n\n    // Throttle resize events\n    let resizeTimer;\n    const throttledResize = () => {\n      if (!resizeTimer) {\n        resizeTimer = setTimeout(() => {\n          resizeTimer = null;\n          handleResize();\n        }, 200); // 200ms throttle\n      }\n    };\n\n    // Add resize listener\n    window.addEventListener('resize', throttledResize);\n\n    // Run initialization after first render is complete\n    // This prevents the \"double load\" effect\n    requestAnimationFrame(() => {\n      firstRenderCompleteRef.current = true;\n      initialize();\n    });\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', throttledResize);\n      if (resizeTimer) clearTimeout(resizeTimer);\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [setupCanvas, initializeStars, animate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    style: {\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      width: '100vw',\n      height: '100vh',\n      overflow: 'hidden',\n      zIndex: -1,\n      pointerEvents: 'none'\n    },\n    \"aria-hidden\": \"true\",\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 358,\n    columnNumber: 5\n  }, this);\n};\n_s(Background, \"u3ErHSBj9cQFxpngPpIZyvEp7A0=\");\n_c = Background;\nexport default Background;\nvar _c;\n$RefreshReg$(_c, \"Background\");","map":{"version":3,"names":["React","useRef","useEffect","useCallback","useMemo","jsxDEV","_jsxDEV","Background","_s","containerRef","canvasRef","starsRef","animationFrameRef","lastTimeRef","isInitializedRef","firstRenderCompleteRef","dimensionsRef","width","height","pixelRatio","CONFIG","starCount","starSizeMin","starSizeMax","starOpacityMin","starOpacityMax","baseMovementSpeed","pulseFrequency","parallaxEnabled","maxFPS","useRays","sessionKey","COLORS","stars","background","topColor","bottomColor","colorCache","cache","forEach","baseColor","opacity","value","replace","getColor","safeOpacity","Math","max","min","roundedOpacity","round","getSessionConfiguration","storedConfig","sessionStorage","getItem","JSON","parse","error","console","warn","starSeeds","i","push","xSeed","random","ySeed","zSeed","sizeSeed","opacitySeed","phaseSeed","PI","speedSeed","pulseSpeedSeed","colorIndex","floor","length","newConfig","timestamp","Date","now","setItem","stringify","setupCanvas","current","canvas","window","innerWidth","innerHeight","devicePixelRatio","style","ctx","getContext","alpha","fillStyle","fillRect","initializeStars","sessionConfig","seed","star","x","y","z","size","baseOpacity","pulsePhase","pulseSpeed","movementSpeed","color","drawStar","beginPath","arc","fill","renderScene","setTransform","globalCompositeOperation","updateAnimation","deltaTime","timeFactor","sin","cos","pulseFactor","animate","animationLoop","requestAnimationFrame","minFrameTime","elapsed","initialize","handleResize","resizeTimer","throttledResize","setTimeout","addEventListener","removeEventListener","clearTimeout","cancelAnimationFrame","ref","position","top","left","overflow","zIndex","pointerEvents","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/valeria/Documents/Crucible/frontend/src/components/core/Background.jsx"],"sourcesContent":["import React, { useRef, useEffect, useCallback, useMemo } from 'react';\n\n/**\n * Optimized Background Component\n * \n * Creates an immersive stellar background with realistic star particles\n * with performance optimizations and session persistence.\n */\nconst Background = () => {\n  // Refs for DOM elements and animation state\n  const containerRef = useRef(null);\n  const canvasRef = useRef(null);\n  const starsRef = useRef([]);\n  const animationFrameRef = useRef(null);\n  const lastTimeRef = useRef(0);\n  \n  // Use refs instead of state to prevent re-renders during initialization\n  const isInitializedRef = useRef(false);\n  const firstRenderCompleteRef = useRef(false);\n  \n  // Store dimensions in a ref to avoid re-renders when they change\n  const dimensionsRef = useRef({ width: 0, height: 0, pixelRatio: 1 });\n  \n  // Configuration - wrapped in useMemo to prevent recreation on each render\n  const CONFIG = useMemo(() => ({\n    // Reduced star count for better performance\n    starCount: 100,\n    starSizeMin: 0.8,\n    starSizeMax: 2.5,\n    starOpacityMin: 0.15,\n    starOpacityMax: 0.85,\n    \n    // Simplified motion parameters\n    baseMovementSpeed: 0.00008,  // Reduced movement speed\n    pulseFrequency: 0.00003,\n    \n    // Disabled parallax effect for better performance\n    parallaxEnabled: false,\n    \n    // Performance parameters\n    maxFPS: 30,\n    useRays: false,  // Disable ray rendering for better performance\n    \n    // Session persistence\n    sessionKey: 'star_background_config'\n  }), []);\n  \n  // Warm, golden color palette - wrapped in useMemo\n  const COLORS = useMemo(() => ({\n    // Simplified color palette\n    stars: [\n      'rgba(255, 243, 200, alpha)', // Warm yellow\n      'rgba(255, 231, 164, alpha)', // Golden\n      'rgba(252, 249, 231, alpha)'  // Off-white gold\n    ],\n    \n    // Background gradient colors\n    background: {\n      topColor: 'rgb(8, 8, 12)',\n      bottomColor: 'rgb(15, 15, 20)'\n    }\n  }), []);\n  \n  // Pre-generated color values to avoid string replacements during animation\n  const colorCache = useMemo(() => {\n    const cache = {};\n    COLORS.stars.forEach(baseColor => {\n      cache[baseColor] = {};\n      for (let opacity = 0; opacity <= 10; opacity++) {\n        const value = opacity / 10;\n        cache[baseColor][value] = baseColor.replace(/alpha\\)$/, `${value})`);\n      }\n    });\n    return cache;\n  }, [COLORS.stars]);\n  \n  // Get color with opacity from cache (faster than string replacement)\n  const getColor = useCallback((baseColor, opacity) => {\n    const safeOpacity = Math.max(0, Math.min(1, opacity || 0));\n    // Round to nearest 0.1 to use cached values\n    const roundedOpacity = Math.round(safeOpacity * 10) / 10;\n    return colorCache[baseColor][roundedOpacity] || baseColor.replace(/alpha\\)$/, `${safeOpacity})`);\n  }, [colorCache]);\n  \n  // Load or generate session-persistent configuration\n  const getSessionConfiguration = useCallback(() => {\n    try {\n      // Try to load existing configuration from sessionStorage\n      const storedConfig = sessionStorage.getItem(CONFIG.sessionKey);\n      \n      if (storedConfig) {\n        return JSON.parse(storedConfig);\n      }\n    } catch (error) {\n      console.warn('Could not load star configuration from session storage', error);\n    }\n    \n    // Generate new configuration if none exists\n    const starSeeds = [];\n    for (let i = 0; i < CONFIG.starCount; i++) {\n      starSeeds.push({\n        xSeed: Math.random(),\n        ySeed: Math.random(),\n        zSeed: Math.random() * 0.8 + 0.1,\n        sizeSeed: Math.random(),\n        opacitySeed: Math.random(),\n        phaseSeed: Math.random() * Math.PI * 2,\n        speedSeed: Math.random() * 0.2 + 0.9,\n        pulseSpeedSeed: Math.random() * 0.002 + 0.001,\n        colorIndex: Math.floor(Math.random() * COLORS.stars.length)\n      });\n    }\n    \n    // Store new configuration in sessionStorage\n    const newConfig = { starSeeds, timestamp: Date.now() };\n    try {\n      sessionStorage.setItem(CONFIG.sessionKey, JSON.stringify(newConfig));\n    } catch (error) {\n      console.warn('Could not save star configuration to session storage', error);\n    }\n    \n    return newConfig;\n  }, [CONFIG.sessionKey, CONFIG.starCount, COLORS.stars.length]);\n  \n  // Initialize canvas with proper resolution\n  const setupCanvas = useCallback(() => {\n    if (!canvasRef.current) return false;\n    \n    const canvas = canvasRef.current;\n    \n    // Get viewport dimensions\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    const pixelRatio = window.devicePixelRatio || 1;\n    \n    // Set canvas size accounting for pixel ratio\n    canvas.width = width * pixelRatio;\n    canvas.height = height * pixelRatio;\n    canvas.style.width = `${width}px`;\n    canvas.style.height = `${height}px`;\n    \n    // Ensure canvas is visible with a background color\n    const ctx = canvas.getContext('2d', { alpha: false }); // Optimize for non-transparent canvas\n    if (ctx) {\n      ctx.fillStyle = 'rgb(15, 15, 20)';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n    }\n    \n    // Update dimensions ref instead of state\n    dimensionsRef.current = { width, height, pixelRatio };\n    \n    return true;\n  }, []);\n  \n  // Initialize stars with session-persistent configuration\n  const initializeStars = useCallback(() => {\n    const { width, height } = dimensionsRef.current;\n    if (!width || !height) return;\n    \n    // Get or create session-persistent configuration\n    const sessionConfig = getSessionConfiguration();\n    const { starSeeds } = sessionConfig;\n    \n    // Clear existing stars\n    starsRef.current = [];\n    \n    // Create stars using the persistent seeds\n    for (let i = 0; i < starSeeds.length; i++) {\n      const seed = starSeeds[i];\n      const star = {};\n      \n      // Position - use seeds but adapt to current screen dimensions\n      star.x = seed.xSeed * width;\n      star.y = seed.ySeed * height;\n      star.z = seed.zSeed; // Depth (0.1 to 0.9)\n      \n      // Visual properties\n      star.size = (seed.sizeSeed * (CONFIG.starSizeMax - CONFIG.starSizeMin) + CONFIG.starSizeMin) * star.z;\n      star.baseOpacity = seed.opacitySeed * (CONFIG.starOpacityMax - CONFIG.starOpacityMin) + CONFIG.starOpacityMin;\n      star.opacity = star.baseOpacity;\n      \n      // Animation properties\n      star.pulsePhase = seed.phaseSeed;\n      star.pulseSpeed = seed.pulseSpeedSeed;\n      star.movementSpeed = seed.speedSeed * CONFIG.baseMovementSpeed * (1.1 - star.z);\n      \n      // Color variation\n      star.color = COLORS.stars[seed.colorIndex];\n      \n      // Store in ref\n      starsRef.current.push(star);\n    }\n  }, [CONFIG, COLORS.stars, getSessionConfiguration]);\n  \n  // Optimized star rendering\n  const drawStar = useCallback((ctx, star) => {\n    // Skip rendering almost invisible stars\n    if (star.opacity < 0.05) return;\n\n    // Simplified star rendering without creating new gradients every frame\n    ctx.beginPath();\n    ctx.arc(star.x, star.y, star.size, 0, Math.PI * 2);\n    ctx.fillStyle = getColor(star.color, star.opacity);\n    ctx.fill();\n    \n    // Simplified glow effect without expensive gradient creation\n    if (star.opacity > 0.3) {\n      ctx.beginPath();\n      ctx.arc(star.x, star.y, star.size * 1.8, 0, Math.PI * 2);\n      ctx.fillStyle = getColor(star.color, star.opacity * 0.4);\n      ctx.fill();\n    }\n  }, [getColor]);\n  \n  // Render the scene - optimized for performance\n  const renderScene = useCallback(() => {\n    if (!canvasRef.current) return;\n    \n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d', { alpha: false });\n    \n    if (!ctx) return;\n    \n    const { width, height, pixelRatio } = dimensionsRef.current;\n    \n    // Clear canvas\n    ctx.fillStyle = COLORS.background.topColor;\n    ctx.fillRect(0, 0, width * pixelRatio, height * pixelRatio);\n    \n    // Apply device pixel ratio scaling only once\n    ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n    \n    // Enable global composition for better glow effect\n    ctx.globalCompositeOperation = 'lighter';\n    \n    // Draw stars\n    for (let i = 0; i < starsRef.current.length; i++) {\n      drawStar(ctx, starsRef.current[i]);\n    }\n    \n    // Reset global composition\n    ctx.globalCompositeOperation = 'source-over';\n  }, [COLORS.background.topColor, drawStar]);\n  \n  // Update animation state - optimized for performance\n  const updateAnimation = useCallback((deltaTime, timestamp) => {\n    const { width, height } = dimensionsRef.current;\n    \n    // Global time factor for animations\n    const timeFactor = timestamp * 0.001;\n    \n    // Update stars\n    for (let i = 0; i < starsRef.current.length; i++) {\n      const star = starsRef.current[i];\n      \n      // Simplified movement based on time\n      star.x += Math.sin(timeFactor * 0.2 + star.pulsePhase) * star.movementSpeed * deltaTime;\n      star.y += Math.cos(timeFactor * 0.3 + star.pulsePhase * 1.3) * star.movementSpeed * deltaTime;\n      \n      // Wrap around screen edges\n      if (star.x < 0) star.x = width;\n      if (star.x > width) star.x = 0;\n      if (star.y < 0) star.y = height;\n      if (star.y > height) star.y = 0;\n      \n      // Simplified pulsing effect\n      const pulseFactor = Math.sin(timeFactor * star.pulseSpeed + star.pulsePhase) * 0.15 + 0.85;\n      star.opacity = star.baseOpacity * pulseFactor;\n    }\n  }, []);\n  \n  // Define the animation loop function\n  const animate = useCallback(function animationLoop(timestamp) {\n    if (!isInitializedRef.current) {\n      animationFrameRef.current = requestAnimationFrame(animationLoop);\n      return;\n    }\n    \n    // Limit FPS\n    const minFrameTime = 1000 / CONFIG.maxFPS;\n    const elapsed = timestamp - (lastTimeRef.current || 0);\n    \n    if (elapsed < minFrameTime) {\n      animationFrameRef.current = requestAnimationFrame(animationLoop);\n      return;\n    }\n    \n    // Calculate delta time with cap to prevent large jumps\n    const deltaTime = lastTimeRef.current ? Math.min(elapsed, 50) : 16;\n    lastTimeRef.current = timestamp;\n    \n    // Update animation state\n    updateAnimation(deltaTime, timestamp);\n    \n    // Render scene\n    renderScene();\n    \n    // Schedule next frame\n    animationFrameRef.current = requestAnimationFrame(animationLoop);\n  }, [CONFIG.maxFPS, updateAnimation, renderScene]);\n  \n  // Comprehensive initialization and resize handling\n  useEffect(() => {\n    // One-time initialization function\n    const initialize = () => {\n      if (setupCanvas()) {\n        // Create stars only after canvas is ready\n        initializeStars();\n        // Mark as initialized but don't trigger re-render\n        isInitializedRef.current = true;\n        // Start animation only after everything is ready\n        animationFrameRef.current = requestAnimationFrame(animate);\n      }\n    };\n    \n    // Handle resize events\n    const handleResize = () => {\n      // Only re-initialize if already initialized\n      if (isInitializedRef.current) {\n        setupCanvas();\n        initializeStars();\n        // No need to change initialization state\n      }\n    };\n    \n    // Throttle resize events\n    let resizeTimer;\n    const throttledResize = () => {\n      if (!resizeTimer) {\n        resizeTimer = setTimeout(() => {\n          resizeTimer = null;\n          handleResize();\n        }, 200); // 200ms throttle\n      }\n    };\n    \n    // Add resize listener\n    window.addEventListener('resize', throttledResize);\n    \n    // Run initialization after first render is complete\n    // This prevents the \"double load\" effect\n    requestAnimationFrame(() => {\n      firstRenderCompleteRef.current = true;\n      initialize();\n    });\n    \n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', throttledResize);\n      if (resizeTimer) clearTimeout(resizeTimer);\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [setupCanvas, initializeStars, animate]);\n  \n  return (\n    <div\n      ref={containerRef}\n      style={{\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        width: '100vw',\n        height: '100vh',\n        overflow: 'hidden',\n        zIndex: -1,\n        pointerEvents: 'none'\n      }}\n      aria-hidden=\"true\"\n    >\n      <canvas\n        ref={canvasRef}\n        style={{\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%',\n          height: '100%'\n        }}\n      />\n    </div>\n  );\n};\n\nexport default Background;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,EAAEC,WAAW,EAAEC,OAAO,QAAQ,OAAO;;AAEtE;AACA;AACA;AACA;AACA;AACA;AALA,SAAAC,MAAA,IAAAC,OAAA;AAMA,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB;EACA,MAAMC,YAAY,GAAGR,MAAM,CAAC,IAAI,CAAC;EACjC,MAAMS,SAAS,GAAGT,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMU,QAAQ,GAAGV,MAAM,CAAC,EAAE,CAAC;EAC3B,MAAMW,iBAAiB,GAAGX,MAAM,CAAC,IAAI,CAAC;EACtC,MAAMY,WAAW,GAAGZ,MAAM,CAAC,CAAC,CAAC;;EAE7B;EACA,MAAMa,gBAAgB,GAAGb,MAAM,CAAC,KAAK,CAAC;EACtC,MAAMc,sBAAsB,GAAGd,MAAM,CAAC,KAAK,CAAC;;EAE5C;EACA,MAAMe,aAAa,GAAGf,MAAM,CAAC;IAAEgB,KAAK,EAAE,CAAC;IAAEC,MAAM,EAAE,CAAC;IAAEC,UAAU,EAAE;EAAE,CAAC,CAAC;;EAEpE;EACA,MAAMC,MAAM,GAAGhB,OAAO,CAAC,OAAO;IAC5B;IACAiB,SAAS,EAAE,GAAG;IACdC,WAAW,EAAE,GAAG;IAChBC,WAAW,EAAE,GAAG;IAChBC,cAAc,EAAE,IAAI;IACpBC,cAAc,EAAE,IAAI;IAEpB;IACAC,iBAAiB,EAAE,OAAO;IAAG;IAC7BC,cAAc,EAAE,OAAO;IAEvB;IACAC,eAAe,EAAE,KAAK;IAEtB;IACAC,MAAM,EAAE,EAAE;IACVC,OAAO,EAAE,KAAK;IAAG;;IAEjB;IACAC,UAAU,EAAE;EACd,CAAC,CAAC,EAAE,EAAE,CAAC;;EAEP;EACA,MAAMC,MAAM,GAAG5B,OAAO,CAAC,OAAO;IAC5B;IACA6B,KAAK,EAAE,CACL,4BAA4B;IAAE;IAC9B,4BAA4B;IAAE;IAC9B,4BAA4B,CAAE;IAAA,CAC/B;IAED;IACAC,UAAU,EAAE;MACVC,QAAQ,EAAE,eAAe;MACzBC,WAAW,EAAE;IACf;EACF,CAAC,CAAC,EAAE,EAAE,CAAC;;EAEP;EACA,MAAMC,UAAU,GAAGjC,OAAO,CAAC,MAAM;IAC/B,MAAMkC,KAAK,GAAG,CAAC,CAAC;IAChBN,MAAM,CAACC,KAAK,CAACM,OAAO,CAACC,SAAS,IAAI;MAChCF,KAAK,CAACE,SAAS,CAAC,GAAG,CAAC,CAAC;MACrB,KAAK,IAAIC,OAAO,GAAG,CAAC,EAAEA,OAAO,IAAI,EAAE,EAAEA,OAAO,EAAE,EAAE;QAC9C,MAAMC,KAAK,GAAGD,OAAO,GAAG,EAAE;QAC1BH,KAAK,CAACE,SAAS,CAAC,CAACE,KAAK,CAAC,GAAGF,SAAS,CAACG,OAAO,CAAC,UAAU,EAAE,GAAGD,KAAK,GAAG,CAAC;MACtE;IACF,CAAC,CAAC;IACF,OAAOJ,KAAK;EACd,CAAC,EAAE,CAACN,MAAM,CAACC,KAAK,CAAC,CAAC;;EAElB;EACA,MAAMW,QAAQ,GAAGzC,WAAW,CAAC,CAACqC,SAAS,EAAEC,OAAO,KAAK;IACnD,MAAMI,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEP,OAAO,IAAI,CAAC,CAAC,CAAC;IAC1D;IACA,MAAMQ,cAAc,GAAGH,IAAI,CAACI,KAAK,CAACL,WAAW,GAAG,EAAE,CAAC,GAAG,EAAE;IACxD,OAAOR,UAAU,CAACG,SAAS,CAAC,CAACS,cAAc,CAAC,IAAIT,SAAS,CAACG,OAAO,CAAC,UAAU,EAAE,GAAGE,WAAW,GAAG,CAAC;EAClG,CAAC,EAAE,CAACR,UAAU,CAAC,CAAC;;EAEhB;EACA,MAAMc,uBAAuB,GAAGhD,WAAW,CAAC,MAAM;IAChD,IAAI;MACF;MACA,MAAMiD,YAAY,GAAGC,cAAc,CAACC,OAAO,CAAClC,MAAM,CAACW,UAAU,CAAC;MAE9D,IAAIqB,YAAY,EAAE;QAChB,OAAOG,IAAI,CAACC,KAAK,CAACJ,YAAY,CAAC;MACjC;IACF,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACC,IAAI,CAAC,wDAAwD,EAAEF,KAAK,CAAC;IAC/E;;IAEA;IACA,MAAMG,SAAS,GAAG,EAAE;IACpB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGzC,MAAM,CAACC,SAAS,EAAEwC,CAAC,EAAE,EAAE;MACzCD,SAAS,CAACE,IAAI,CAAC;QACbC,KAAK,EAAEjB,IAAI,CAACkB,MAAM,CAAC,CAAC;QACpBC,KAAK,EAAEnB,IAAI,CAACkB,MAAM,CAAC,CAAC;QACpBE,KAAK,EAAEpB,IAAI,CAACkB,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG;QAChCG,QAAQ,EAAErB,IAAI,CAACkB,MAAM,CAAC,CAAC;QACvBI,WAAW,EAAEtB,IAAI,CAACkB,MAAM,CAAC,CAAC;QAC1BK,SAAS,EAAEvB,IAAI,CAACkB,MAAM,CAAC,CAAC,GAAGlB,IAAI,CAACwB,EAAE,GAAG,CAAC;QACtCC,SAAS,EAAEzB,IAAI,CAACkB,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG;QACpCQ,cAAc,EAAE1B,IAAI,CAACkB,MAAM,CAAC,CAAC,GAAG,KAAK,GAAG,KAAK;QAC7CS,UAAU,EAAE3B,IAAI,CAAC4B,KAAK,CAAC5B,IAAI,CAACkB,MAAM,CAAC,CAAC,GAAGhC,MAAM,CAACC,KAAK,CAAC0C,MAAM;MAC5D,CAAC,CAAC;IACJ;;IAEA;IACA,MAAMC,SAAS,GAAG;MAAEhB,SAAS;MAAEiB,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC;IAAE,CAAC;IACtD,IAAI;MACF1B,cAAc,CAAC2B,OAAO,CAAC5D,MAAM,CAACW,UAAU,EAAEwB,IAAI,CAAC0B,SAAS,CAACL,SAAS,CAAC,CAAC;IACtE,CAAC,CAAC,OAAOnB,KAAK,EAAE;MACdC,OAAO,CAACC,IAAI,CAAC,sDAAsD,EAAEF,KAAK,CAAC;IAC7E;IAEA,OAAOmB,SAAS;EAClB,CAAC,EAAE,CAACxD,MAAM,CAACW,UAAU,EAAEX,MAAM,CAACC,SAAS,EAAEW,MAAM,CAACC,KAAK,CAAC0C,MAAM,CAAC,CAAC;;EAE9D;EACA,MAAMO,WAAW,GAAG/E,WAAW,CAAC,MAAM;IACpC,IAAI,CAACO,SAAS,CAACyE,OAAO,EAAE,OAAO,KAAK;IAEpC,MAAMC,MAAM,GAAG1E,SAAS,CAACyE,OAAO;;IAEhC;IACA,MAAMlE,KAAK,GAAGoE,MAAM,CAACC,UAAU;IAC/B,MAAMpE,MAAM,GAAGmE,MAAM,CAACE,WAAW;IACjC,MAAMpE,UAAU,GAAGkE,MAAM,CAACG,gBAAgB,IAAI,CAAC;;IAE/C;IACAJ,MAAM,CAACnE,KAAK,GAAGA,KAAK,GAAGE,UAAU;IACjCiE,MAAM,CAAClE,MAAM,GAAGA,MAAM,GAAGC,UAAU;IACnCiE,MAAM,CAACK,KAAK,CAACxE,KAAK,GAAG,GAAGA,KAAK,IAAI;IACjCmE,MAAM,CAACK,KAAK,CAACvE,MAAM,GAAG,GAAGA,MAAM,IAAI;;IAEnC;IACA,MAAMwE,GAAG,GAAGN,MAAM,CAACO,UAAU,CAAC,IAAI,EAAE;MAAEC,KAAK,EAAE;IAAM,CAAC,CAAC,CAAC,CAAC;IACvD,IAAIF,GAAG,EAAE;MACPA,GAAG,CAACG,SAAS,GAAG,iBAAiB;MACjCH,GAAG,CAACI,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAEV,MAAM,CAACnE,KAAK,EAAEmE,MAAM,CAAClE,MAAM,CAAC;IACjD;;IAEA;IACAF,aAAa,CAACmE,OAAO,GAAG;MAAElE,KAAK;MAAEC,MAAM;MAAEC;IAAW,CAAC;IAErD,OAAO,IAAI;EACb,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAM4E,eAAe,GAAG5F,WAAW,CAAC,MAAM;IACxC,MAAM;MAAEc,KAAK;MAAEC;IAAO,CAAC,GAAGF,aAAa,CAACmE,OAAO;IAC/C,IAAI,CAAClE,KAAK,IAAI,CAACC,MAAM,EAAE;;IAEvB;IACA,MAAM8E,aAAa,GAAG7C,uBAAuB,CAAC,CAAC;IAC/C,MAAM;MAAES;IAAU,CAAC,GAAGoC,aAAa;;IAEnC;IACArF,QAAQ,CAACwE,OAAO,GAAG,EAAE;;IAErB;IACA,KAAK,IAAItB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,SAAS,CAACe,MAAM,EAAEd,CAAC,EAAE,EAAE;MACzC,MAAMoC,IAAI,GAAGrC,SAAS,CAACC,CAAC,CAAC;MACzB,MAAMqC,IAAI,GAAG,CAAC,CAAC;;MAEf;MACAA,IAAI,CAACC,CAAC,GAAGF,IAAI,CAAClC,KAAK,GAAG9C,KAAK;MAC3BiF,IAAI,CAACE,CAAC,GAAGH,IAAI,CAAChC,KAAK,GAAG/C,MAAM;MAC5BgF,IAAI,CAACG,CAAC,GAAGJ,IAAI,CAAC/B,KAAK,CAAC,CAAC;;MAErB;MACAgC,IAAI,CAACI,IAAI,GAAG,CAACL,IAAI,CAAC9B,QAAQ,IAAI/C,MAAM,CAACG,WAAW,GAAGH,MAAM,CAACE,WAAW,CAAC,GAAGF,MAAM,CAACE,WAAW,IAAI4E,IAAI,CAACG,CAAC;MACrGH,IAAI,CAACK,WAAW,GAAGN,IAAI,CAAC7B,WAAW,IAAIhD,MAAM,CAACK,cAAc,GAAGL,MAAM,CAACI,cAAc,CAAC,GAAGJ,MAAM,CAACI,cAAc;MAC7G0E,IAAI,CAACzD,OAAO,GAAGyD,IAAI,CAACK,WAAW;;MAE/B;MACAL,IAAI,CAACM,UAAU,GAAGP,IAAI,CAAC5B,SAAS;MAChC6B,IAAI,CAACO,UAAU,GAAGR,IAAI,CAACzB,cAAc;MACrC0B,IAAI,CAACQ,aAAa,GAAGT,IAAI,CAAC1B,SAAS,GAAGnD,MAAM,CAACM,iBAAiB,IAAI,GAAG,GAAGwE,IAAI,CAACG,CAAC,CAAC;;MAE/E;MACAH,IAAI,CAACS,KAAK,GAAG3E,MAAM,CAACC,KAAK,CAACgE,IAAI,CAACxB,UAAU,CAAC;;MAE1C;MACA9D,QAAQ,CAACwE,OAAO,CAACrB,IAAI,CAACoC,IAAI,CAAC;IAC7B;EACF,CAAC,EAAE,CAAC9E,MAAM,EAAEY,MAAM,CAACC,KAAK,EAAEkB,uBAAuB,CAAC,CAAC;;EAEnD;EACA,MAAMyD,QAAQ,GAAGzG,WAAW,CAAC,CAACuF,GAAG,EAAEQ,IAAI,KAAK;IAC1C;IACA,IAAIA,IAAI,CAACzD,OAAO,GAAG,IAAI,EAAE;;IAEzB;IACAiD,GAAG,CAACmB,SAAS,CAAC,CAAC;IACfnB,GAAG,CAACoB,GAAG,CAACZ,IAAI,CAACC,CAAC,EAAED,IAAI,CAACE,CAAC,EAAEF,IAAI,CAACI,IAAI,EAAE,CAAC,EAAExD,IAAI,CAACwB,EAAE,GAAG,CAAC,CAAC;IAClDoB,GAAG,CAACG,SAAS,GAAGjD,QAAQ,CAACsD,IAAI,CAACS,KAAK,EAAET,IAAI,CAACzD,OAAO,CAAC;IAClDiD,GAAG,CAACqB,IAAI,CAAC,CAAC;;IAEV;IACA,IAAIb,IAAI,CAACzD,OAAO,GAAG,GAAG,EAAE;MACtBiD,GAAG,CAACmB,SAAS,CAAC,CAAC;MACfnB,GAAG,CAACoB,GAAG,CAACZ,IAAI,CAACC,CAAC,EAAED,IAAI,CAACE,CAAC,EAAEF,IAAI,CAACI,IAAI,GAAG,GAAG,EAAE,CAAC,EAAExD,IAAI,CAACwB,EAAE,GAAG,CAAC,CAAC;MACxDoB,GAAG,CAACG,SAAS,GAAGjD,QAAQ,CAACsD,IAAI,CAACS,KAAK,EAAET,IAAI,CAACzD,OAAO,GAAG,GAAG,CAAC;MACxDiD,GAAG,CAACqB,IAAI,CAAC,CAAC;IACZ;EACF,CAAC,EAAE,CAACnE,QAAQ,CAAC,CAAC;;EAEd;EACA,MAAMoE,WAAW,GAAG7G,WAAW,CAAC,MAAM;IACpC,IAAI,CAACO,SAAS,CAACyE,OAAO,EAAE;IAExB,MAAMC,MAAM,GAAG1E,SAAS,CAACyE,OAAO;IAChC,MAAMO,GAAG,GAAGN,MAAM,CAACO,UAAU,CAAC,IAAI,EAAE;MAAEC,KAAK,EAAE;IAAM,CAAC,CAAC;IAErD,IAAI,CAACF,GAAG,EAAE;IAEV,MAAM;MAAEzE,KAAK;MAAEC,MAAM;MAAEC;IAAW,CAAC,GAAGH,aAAa,CAACmE,OAAO;;IAE3D;IACAO,GAAG,CAACG,SAAS,GAAG7D,MAAM,CAACE,UAAU,CAACC,QAAQ;IAC1CuD,GAAG,CAACI,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE7E,KAAK,GAAGE,UAAU,EAAED,MAAM,GAAGC,UAAU,CAAC;;IAE3D;IACAuE,GAAG,CAACuB,YAAY,CAAC9F,UAAU,EAAE,CAAC,EAAE,CAAC,EAAEA,UAAU,EAAE,CAAC,EAAE,CAAC,CAAC;;IAEpD;IACAuE,GAAG,CAACwB,wBAAwB,GAAG,SAAS;;IAExC;IACA,KAAK,IAAIrD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGlD,QAAQ,CAACwE,OAAO,CAACR,MAAM,EAAEd,CAAC,EAAE,EAAE;MAChD+C,QAAQ,CAAClB,GAAG,EAAE/E,QAAQ,CAACwE,OAAO,CAACtB,CAAC,CAAC,CAAC;IACpC;;IAEA;IACA6B,GAAG,CAACwB,wBAAwB,GAAG,aAAa;EAC9C,CAAC,EAAE,CAAClF,MAAM,CAACE,UAAU,CAACC,QAAQ,EAAEyE,QAAQ,CAAC,CAAC;;EAE1C;EACA,MAAMO,eAAe,GAAGhH,WAAW,CAAC,CAACiH,SAAS,EAAEvC,SAAS,KAAK;IAC5D,MAAM;MAAE5D,KAAK;MAAEC;IAAO,CAAC,GAAGF,aAAa,CAACmE,OAAO;;IAE/C;IACA,MAAMkC,UAAU,GAAGxC,SAAS,GAAG,KAAK;;IAEpC;IACA,KAAK,IAAIhB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGlD,QAAQ,CAACwE,OAAO,CAACR,MAAM,EAAEd,CAAC,EAAE,EAAE;MAChD,MAAMqC,IAAI,GAAGvF,QAAQ,CAACwE,OAAO,CAACtB,CAAC,CAAC;;MAEhC;MACAqC,IAAI,CAACC,CAAC,IAAIrD,IAAI,CAACwE,GAAG,CAACD,UAAU,GAAG,GAAG,GAAGnB,IAAI,CAACM,UAAU,CAAC,GAAGN,IAAI,CAACQ,aAAa,GAAGU,SAAS;MACvFlB,IAAI,CAACE,CAAC,IAAItD,IAAI,CAACyE,GAAG,CAACF,UAAU,GAAG,GAAG,GAAGnB,IAAI,CAACM,UAAU,GAAG,GAAG,CAAC,GAAGN,IAAI,CAACQ,aAAa,GAAGU,SAAS;;MAE7F;MACA,IAAIlB,IAAI,CAACC,CAAC,GAAG,CAAC,EAAED,IAAI,CAACC,CAAC,GAAGlF,KAAK;MAC9B,IAAIiF,IAAI,CAACC,CAAC,GAAGlF,KAAK,EAAEiF,IAAI,CAACC,CAAC,GAAG,CAAC;MAC9B,IAAID,IAAI,CAACE,CAAC,GAAG,CAAC,EAAEF,IAAI,CAACE,CAAC,GAAGlF,MAAM;MAC/B,IAAIgF,IAAI,CAACE,CAAC,GAAGlF,MAAM,EAAEgF,IAAI,CAACE,CAAC,GAAG,CAAC;;MAE/B;MACA,MAAMoB,WAAW,GAAG1E,IAAI,CAACwE,GAAG,CAACD,UAAU,GAAGnB,IAAI,CAACO,UAAU,GAAGP,IAAI,CAACM,UAAU,CAAC,GAAG,IAAI,GAAG,IAAI;MAC1FN,IAAI,CAACzD,OAAO,GAAGyD,IAAI,CAACK,WAAW,GAAGiB,WAAW;IAC/C;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,OAAO,GAAGtH,WAAW,CAAC,SAASuH,aAAaA,CAAC7C,SAAS,EAAE;IAC5D,IAAI,CAAC/D,gBAAgB,CAACqE,OAAO,EAAE;MAC7BvE,iBAAiB,CAACuE,OAAO,GAAGwC,qBAAqB,CAACD,aAAa,CAAC;MAChE;IACF;;IAEA;IACA,MAAME,YAAY,GAAG,IAAI,GAAGxG,MAAM,CAACS,MAAM;IACzC,MAAMgG,OAAO,GAAGhD,SAAS,IAAIhE,WAAW,CAACsE,OAAO,IAAI,CAAC,CAAC;IAEtD,IAAI0C,OAAO,GAAGD,YAAY,EAAE;MAC1BhH,iBAAiB,CAACuE,OAAO,GAAGwC,qBAAqB,CAACD,aAAa,CAAC;MAChE;IACF;;IAEA;IACA,MAAMN,SAAS,GAAGvG,WAAW,CAACsE,OAAO,GAAGrC,IAAI,CAACE,GAAG,CAAC6E,OAAO,EAAE,EAAE,CAAC,GAAG,EAAE;IAClEhH,WAAW,CAACsE,OAAO,GAAGN,SAAS;;IAE/B;IACAsC,eAAe,CAACC,SAAS,EAAEvC,SAAS,CAAC;;IAErC;IACAmC,WAAW,CAAC,CAAC;;IAEb;IACApG,iBAAiB,CAACuE,OAAO,GAAGwC,qBAAqB,CAACD,aAAa,CAAC;EAClE,CAAC,EAAE,CAACtG,MAAM,CAACS,MAAM,EAAEsF,eAAe,EAAEH,WAAW,CAAC,CAAC;;EAEjD;EACA9G,SAAS,CAAC,MAAM;IACd;IACA,MAAM4H,UAAU,GAAGA,CAAA,KAAM;MACvB,IAAI5C,WAAW,CAAC,CAAC,EAAE;QACjB;QACAa,eAAe,CAAC,CAAC;QACjB;QACAjF,gBAAgB,CAACqE,OAAO,GAAG,IAAI;QAC/B;QACAvE,iBAAiB,CAACuE,OAAO,GAAGwC,qBAAqB,CAACF,OAAO,CAAC;MAC5D;IACF,CAAC;;IAED;IACA,MAAMM,YAAY,GAAGA,CAAA,KAAM;MACzB;MACA,IAAIjH,gBAAgB,CAACqE,OAAO,EAAE;QAC5BD,WAAW,CAAC,CAAC;QACba,eAAe,CAAC,CAAC;QACjB;MACF;IACF,CAAC;;IAED;IACA,IAAIiC,WAAW;IACf,MAAMC,eAAe,GAAGA,CAAA,KAAM;MAC5B,IAAI,CAACD,WAAW,EAAE;QAChBA,WAAW,GAAGE,UAAU,CAAC,MAAM;UAC7BF,WAAW,GAAG,IAAI;UAClBD,YAAY,CAAC,CAAC;QAChB,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;MACX;IACF,CAAC;;IAED;IACA1C,MAAM,CAAC8C,gBAAgB,CAAC,QAAQ,EAAEF,eAAe,CAAC;;IAElD;IACA;IACAN,qBAAqB,CAAC,MAAM;MAC1B5G,sBAAsB,CAACoE,OAAO,GAAG,IAAI;MACrC2C,UAAU,CAAC,CAAC;IACd,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACXzC,MAAM,CAAC+C,mBAAmB,CAAC,QAAQ,EAAEH,eAAe,CAAC;MACrD,IAAID,WAAW,EAAEK,YAAY,CAACL,WAAW,CAAC;MAC1C,IAAIpH,iBAAiB,CAACuE,OAAO,EAAE;QAC7BmD,oBAAoB,CAAC1H,iBAAiB,CAACuE,OAAO,CAAC;MACjD;IACF,CAAC;EACH,CAAC,EAAE,CAACD,WAAW,EAAEa,eAAe,EAAE0B,OAAO,CAAC,CAAC;EAE3C,oBACEnH,OAAA;IACEiI,GAAG,EAAE9H,YAAa;IAClBgF,KAAK,EAAE;MACL+C,QAAQ,EAAE,OAAO;MACjBC,GAAG,EAAE,CAAC;MACNC,IAAI,EAAE,CAAC;MACPzH,KAAK,EAAE,OAAO;MACdC,MAAM,EAAE,OAAO;MACfyH,QAAQ,EAAE,QAAQ;MAClBC,MAAM,EAAE,CAAC,CAAC;MACVC,aAAa,EAAE;IACjB,CAAE;IACF,eAAY,MAAM;IAAAC,QAAA,eAElBxI,OAAA;MACEiI,GAAG,EAAE7H,SAAU;MACf+E,KAAK,EAAE;QACL+C,QAAQ,EAAE,UAAU;QACpBC,GAAG,EAAE,CAAC;QACNC,IAAI,EAAE,CAAC;QACPzH,KAAK,EAAE,MAAM;QACbC,MAAM,EAAE;MACV;IAAE;MAAA6H,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC1I,EAAA,CAvXID,UAAU;AAAA4I,EAAA,GAAV5I,UAAU;AAyXhB,eAAeA,UAAU;AAAC,IAAA4I,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}