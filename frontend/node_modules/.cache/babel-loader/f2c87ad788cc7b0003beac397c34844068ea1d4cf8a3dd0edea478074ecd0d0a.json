{"ast":null,"code":"var _jsxFileName = \"/home/valeria/Documents/Crucible/frontend/src/components/core/effects/cosmiceffects/CosmicStars.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useCallback, useMemo } from 'react';\nimport { useScroll, useSpring } from 'framer-motion';\n\n/**\n * CosmicStars Component\n * \n * Renders an immersive, performance-optimized starry background\n * with parallax scrolling, gentle random drifting, and state persistence.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CosmicStars = ({\n  config = {}\n}) => {\n  _s();\n  // Refs for DOM elements and animation state\n  const canvasRef = useRef(null);\n  const starsRef = useRef([]);\n  const animationFrameRef = useRef(null);\n  const lastTimeRef = useRef(0);\n  const lastScrollYRef = useRef(0);\n\n  // Use refs instead of state to prevent re-renders\n  const isInitializedRef = useRef(false);\n\n  // Store dimensions in a ref to avoid re-renders when they change\n  const dimensionsRef = useRef({\n    width: 0,\n    height: 0,\n    pixelRatio: 1\n  });\n\n  // Get scroll position using framer-motion\n  const {\n    scrollY\n  } = useScroll({\n    smooth: 0.05 // Smoother scrolling for high-framerate animations\n  });\n\n  // Use spring physics for smoother scrolling effect\n  const springScrollY = useSpring(scrollY, {\n    stiffness: 1,\n    damping: 5,\n    mass: 0.5,\n    restDelta: 0.001,\n    restSpeed: 0.001\n  });\n\n  // Track spring scrollY value without causing re-renders\n  const springScrollYRef = useRef(0);\n  useEffect(() => {\n    const unsubscribe = springScrollY.onChange(value => {\n      springScrollYRef.current = value;\n    });\n    return () => unsubscribe();\n  }, [springScrollY]);\n\n  // Configuration - wrapped in useMemo to prevent recreation on each render\n  // Merge default config with user-provided config\n  const CONFIG = useMemo(() => ({\n    // Star appearance\n    starCount: 100,\n    starSizeMin: 1.0,\n    starSizeMax: 1.9,\n    starOpacityMin: 0.2,\n    starOpacityMax: 0.55,\n    // Parallax and movement parameters\n    baseMovementSpeed: 0.00001,\n    // Reduced for slower movement\n    pulseFrequency: 0.00002,\n    // Slower pulsing\n    parallaxEnabled: true,\n    parallaxFactor: 0.2,\n    // How much stars move relative to scroll (0-1)\n\n    // Trail effect parameters\n    trailEnabled: true,\n    // Enable subtle trails\n    trailLength: 2,\n    // Very short trail length (in pixels)\n    trailOpacityFactor: 0.5,\n    // Trail opacity relative to star opacity\n\n    // Twinkling effect parameters\n    twinkleEnabled: true,\n    // Enable stars to fade in and out\n    twinkleProbability: 0.01,\n    // Probability of a star beginning to twinkle each frame\n    twinkleDuration: [2000, 4000],\n    // Min and max duration of a twinkle cycle in ms\n\n    // Random fading parameters\n    randomFadingEnabled: true,\n    // Enable random fading of stars\n    randomFadeOutProbability: 0.0003,\n    // Probability of a star randomly starting to fade out per frame\n    maxSimultaneousFading: 10,\n    // Maximum number of stars that can be fading at once\n\n    // Drifting movement parameters\n    driftEnabled: true,\n    // Enable slow drifting movement\n    driftSpeed: 0.01,\n    // Base speed of drift movement (pixels per second)\n    driftSpeedVariation: 0.005,\n    // Variation in drift speed between stars\n    directionChangeFrequency: 0.0005,\n    // Probability of changing direction each frame\n    directionChangeAmount: 0.05,\n    // How much direction can change at once (lower = smoother)\n\n    // Star regeneration parameters\n    regenerateOffscreenStars: true,\n    // Replace off-screen stars instead of wrapping\n    fadeInDuration: 2000,\n    // Duration for new stars to fade in (ms)\n    fadeOutDuration: 1500,\n    // Duration for off-screen stars to fade out (ms)\n    offscreenBuffer: 50,\n    // Distance beyond viewport to trigger regeneration (px)\n\n    // Physics parameters for bouncy effect\n    springStrength: 0.03,\n    // Higher = snappier\n    dampingFactor: 0.95,\n    // Higher = less bouncy (0-1)\n\n    // Star distribution parameters\n    verticalSpreadFactor: 3,\n    // How many screen heights to spread stars across\n    offscreenBufferFactor: 1,\n    // How many screen heights above viewport to generate stars\n\n    // Performance parameters\n    maxFPS: 60,\n    // Enhanced persistence settings\n    persistenceEnabled: true,\n    // Enable persistence features\n    persistenceInterval: 3000,\n    // Save every 3 seconds (milliseconds)\n    timeBasedFallback: true,\n    // Use time-based generation as fallback\n    persistenceMaxAge: 7 * 24 * 60 * 60 * 1000,\n    // 7 days before regenerating (milliseconds)\n\n    // Session persistence keys - namespaced for stars\n    sessionKey: 'cosmic_stars_background_config',\n    scrollPositionKey: 'cosmic_stars_background_scroll',\n    lastVisitKey: 'cosmic_stars_background_last_visit',\n    // Override with user config\n    ...config\n  }), [config]);\n\n  // Warm, golden color palette - wrapped in useMemo\n  const COLORS = useMemo(() => ({\n    // Star colors\n    stars: ['rgba(255, 243, 200, alpha)',\n    // Warm yellow\n    'rgba(255, 231, 164, alpha)',\n    // Golden\n    'rgba(252, 249, 231, alpha)' // Off-white gold\n    ],\n    // Background gradient colors\n    background: {\n      topColor: 'rgb(8, 8, 12)',\n      bottomColor: 'rgb(15, 15, 20)'\n    },\n    // Override with user config if provided\n    ...(config.colors || {})\n  }), [config.colors]);\n\n  // Pre-generated color values to avoid string replacements during animation\n  const colorCache = useMemo(() => {\n    const cache = {};\n    COLORS.stars.forEach(baseColor => {\n      cache[baseColor] = {};\n      for (let opacity = 0; opacity <= 10; opacity++) {\n        const value = opacity / 10;\n        cache[baseColor][value] = baseColor.replace(/alpha\\)$/, `${value})`);\n      }\n    });\n    return cache;\n  }, [COLORS.stars]);\n\n  // Get color with opacity from cache (faster than string replacement)\n  const getColor = useCallback((baseColor, opacity) => {\n    const safeOpacity = Math.max(0, Math.min(1, opacity || 0));\n    // Round to nearest 0.1 to use cached values\n    const roundedOpacity = Math.round(safeOpacity * 10) / 10;\n    return colorCache[baseColor][roundedOpacity] || baseColor.replace(/alpha\\)$/, `${safeOpacity})`);\n  }, [colorCache]);\n\n  // Create a deterministic seeded random function\n  const seededRandom = useCallback(seed => {\n    return () => {\n      seed = (seed * 9301 + 49297) % 233280;\n      return seed / 233280;\n    };\n  }, []);\n\n  // Get a seed based on current date (changes daily)\n  const getDateSeed = useCallback(() => {\n    const now = new Date();\n    return now.getFullYear() * 10000 + (now.getMonth() + 1) * 100 + now.getDate();\n  }, []);\n\n  // Initialize canvas with proper resolution\n  const setupCanvas = useCallback(() => {\n    if (!canvasRef.current) return false;\n    const canvas = canvasRef.current;\n\n    // Get viewport dimensions\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    const pixelRatio = window.devicePixelRatio || 1;\n\n    // Set canvas size accounting for pixel ratio\n    canvas.width = width * pixelRatio;\n    canvas.height = height * pixelRatio;\n    canvas.style.width = `${width}px`;\n    canvas.style.height = `${height}px`;\n\n    // Ensure canvas is visible with a background color (use alpha: false for no flicker)\n    const ctx = canvas.getContext('2d', {\n      alpha: false\n    });\n    if (ctx) {\n      // Fill with background color immediately to prevent flickering\n      ctx.fillStyle = COLORS.background.topColor;\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n    }\n\n    // Update dimensions ref instead of state\n    dimensionsRef.current = {\n      width,\n      height,\n      pixelRatio\n    };\n    return true;\n  }, [canvasRef, COLORS.background]);\n\n  // Generate a new star configuration\n  const generateStarSeeds = useCallback(() => {\n    const {\n      width,\n      height\n    } = dimensionsRef.current;\n    if (!width || !height) return [];\n    const starSeeds = [];\n    for (let i = 0; i < CONFIG.starCount; i++) {\n      starSeeds.push({\n        xSeed: Math.random(),\n        // Distribute stars vertically across multiple screen heights\n        // Including above the viewport for continuous scrolling effect\n        ySeed: Math.random() * CONFIG.verticalSpreadFactor - CONFIG.offscreenBufferFactor,\n        zSeed: Math.random() * 0.8 + 0.1,\n        sizeSeed: Math.random(),\n        opacitySeed: Math.random(),\n        phaseSeed: Math.random() * Math.PI * 2,\n        speedSeed: Math.random() * 0.2 + 0.9,\n        pulseSpeedSeed: Math.random() * 0.002 + 0.001,\n        colorIndex: Math.floor(Math.random() * COLORS.stars.length),\n        // Parallax factor determines how much this star moves with scrolling\n        // Deeper stars (higher z) move less for realistic parallax\n        parallaxFactorSeed: Math.random() * 0.5 + 0.1,\n        // Drift movement properties\n        driftDirectionXSeed: Math.random() * 2 - 1,\n        driftDirectionYSeed: Math.random() * 2 - 1,\n        driftSpeedSeed: Math.random()\n      });\n    }\n    return starSeeds;\n  }, [CONFIG, COLORS.stars.length]);\n\n  // Enhanced time-based star generation for consistency\n  const generateTimeBasedStars = useCallback(() => {\n    const {\n      width,\n      height\n    } = dimensionsRef.current;\n    if (!width || !height) return [];\n\n    // Create seed based on date\n    const dateSeed = getDateSeed();\n\n    // Generate new stars with deterministic positioning\n    const stars = [];\n    for (let i = 0; i < CONFIG.starCount; i++) {\n      // Generate a seed for this specific star (that will be the same each day)\n      const starSeed = dateSeed + i;\n      const starRandom = seededRandom(starSeed);\n\n      // Create the star using deterministic properties\n      const star = {};\n\n      // Position with some variance but tied to the date\n      star.x = starRandom() * width;\n      star.baseY = (starRandom() * CONFIG.verticalSpreadFactor - CONFIG.offscreenBufferFactor) * height;\n      star.y = star.baseY;\n      star.z = starRandom() * 0.8 + 0.1;\n\n      // Visual properties\n      star.size = (starRandom() * (CONFIG.starSizeMax - CONFIG.starSizeMin) + CONFIG.starSizeMin) * star.z;\n      star.baseOpacity = starRandom() * (CONFIG.starOpacityMax - CONFIG.starOpacityMin) + CONFIG.starOpacityMin;\n      star.opacity = star.baseOpacity;\n      star.color = COLORS.stars[Math.floor(starRandom() * COLORS.stars.length)];\n\n      // Animation properties\n      star.pulsePhase = starRandom() * Math.PI * 2;\n      star.pulseSpeed = starRandom() * 0.002 + 0.001;\n      star.movementSpeed = (starRandom() * 0.2 + 0.9) * CONFIG.baseMovementSpeed * (1.1 - star.z);\n\n      // Drift properties\n      star.driftDirectionX = starRandom() * 2 - 1;\n      star.driftDirectionY = starRandom() * 2 - 1;\n      // Normalize direction\n      const dirMagnitude = Math.sqrt(star.driftDirectionX ** 2 + star.driftDirectionY ** 2) || 1;\n      star.driftDirectionX /= dirMagnitude;\n      star.driftDirectionY /= dirMagnitude;\n      star.driftSpeed = CONFIG.driftSpeed + (starRandom() * 2 - 1) * CONFIG.driftSpeedVariation;\n      star.directionChangeTimer = 0;\n\n      // Initial state\n      star.state = 'visible';\n      star.fadeProgress = 1;\n      star.targetY = star.y;\n      star.velocity = 0;\n      star.lastX = star.x;\n      star.lastY = star.y;\n\n      // Parallax properties\n      star.parallaxFactor = starRandom() * 0.5 * CONFIG.parallaxFactor * (1 - star.z * 0.5);\n\n      // Initialize twinkling properties\n      star.twinkleState = 'visible';\n      star.twinkleProgress = 0;\n      star.twinkleDuration = starRandom() * (CONFIG.twinkleDuration[1] - CONFIG.twinkleDuration[0]) + CONFIG.twinkleDuration[0];\n\n      // Store original seed for future reference\n      star.originalSeed = starSeed;\n      stars.push(star);\n    }\n    return stars;\n  }, [CONFIG, COLORS.stars, getDateSeed, seededRandom]);\n\n  // Save the current star state and scroll position\n  const saveCurrentState = useCallback(() => {\n    if (!starsRef.current.length || !dimensionsRef.current.width || !CONFIG.persistenceEnabled) {\n      return;\n    }\n    try {\n      // Record current time\n      const currentTime = Date.now();\n\n      // Save current scroll position separately for quick access\n      localStorage.setItem(CONFIG.scrollPositionKey, springScrollYRef.current.toString());\n\n      // Save last visit time\n      localStorage.setItem(CONFIG.lastVisitKey, currentTime.toString());\n\n      // Prepare complete star state \n      const completeState = {\n        version: \"1.0\",\n        // For future compatibility\n        timestamp: currentTime,\n        dateSeed: getDateSeed(),\n        // Store the seed for time-based fallback\n        scrollY: springScrollYRef.current,\n        viewport: {\n          width: dimensionsRef.current.width,\n          height: dimensionsRef.current.height,\n          pixelRatio: dimensionsRef.current.pixelRatio\n        },\n        stars: starsRef.current.map(star => ({\n          // Position data\n          x: star.x,\n          y: star.y,\n          baseY: star.baseY,\n          z: star.z,\n          // Visual properties\n          size: star.size,\n          baseOpacity: star.baseOpacity,\n          opacity: star.opacity,\n          color: COLORS.stars.indexOf(star.color),\n          // Animation data\n          pulsePhase: star.pulsePhase,\n          pulseSpeed: star.pulseSpeed,\n          driftDirectionX: star.driftDirectionX,\n          driftDirectionY: star.driftDirectionY,\n          driftSpeed: star.driftSpeed,\n          movementSpeed: star.movementSpeed,\n          parallaxFactor: star.parallaxFactor,\n          // State\n          state: star.state,\n          fadeProgress: star.fadeProgress,\n          fadeStart: star.fadeStart ? currentTime - (currentTime - star.fadeStart) : null,\n          // For fallback/time consistency\n          originalSeed: star.originalSeed || Math.random()\n        }))\n      };\n\n      // Save complete state\n      localStorage.setItem(CONFIG.sessionKey, JSON.stringify(completeState));\n    } catch (error) {\n      console.warn('Could not save star state to session storage', error);\n    }\n  }, [CONFIG, COLORS.stars, getDateSeed]);\n\n  // Create a new star at random position\n  const createNewStar = useCallback((offScreenStar = null) => {\n    const {\n      width,\n      height\n    } = dimensionsRef.current;\n    const star = {};\n\n    // If replacing an existing star, preserve some properties\n    if (offScreenStar) {\n      star.z = offScreenStar.z;\n      star.size = offScreenStar.size;\n      star.baseOpacity = offScreenStar.baseOpacity;\n      star.pulsePhase = Math.random() * Math.PI * 2; // New phase\n      star.color = offScreenStar.color;\n      star.parallaxFactor = offScreenStar.parallaxFactor;\n      star.originalSeed = offScreenStar.originalSeed; // Preserve seed if available\n    } else {\n      // Otherwise generate new properties\n      star.z = Math.random() * 0.8 + 0.1;\n      star.size = (Math.random() * (CONFIG.starSizeMax - CONFIG.starSizeMin) + CONFIG.starSizeMin) * star.z;\n      star.baseOpacity = Math.random() * (CONFIG.starOpacityMax - CONFIG.starOpacityMin) + CONFIG.starOpacityMin;\n      star.pulsePhase = Math.random() * Math.PI * 2;\n      star.color = COLORS.stars[Math.floor(Math.random() * COLORS.stars.length)];\n      star.parallaxFactor = Math.random() * 0.5 * CONFIG.parallaxFactor * (1 - star.z * 0.5);\n      star.originalSeed = Math.random(); // New random seed\n    }\n\n    // Generate position\n    // Avoid edges by using 10% inset from the viewport dimensions\n    const edgeBuffer = Math.min(width, height) * 0.1;\n    star.x = edgeBuffer + Math.random() * (width - 2 * edgeBuffer);\n    star.baseY = edgeBuffer + Math.random() * (height - 2 * edgeBuffer);\n    star.y = star.baseY;\n    star.targetY = star.y;\n\n    // For new stars during runtime, fade them in\n    // For initial stars, start them fully visible\n    const isInitialCreation = !isInitializedRef.current;\n    if (isInitialCreation) {\n      star.opacity = star.baseOpacity;\n      star.state = 'visible';\n      star.fadeProgress = 1;\n    } else {\n      star.opacity = 0;\n      star.state = 'fading-in';\n      star.fadeProgress = 0;\n      star.fadeStart = Date.now();\n    }\n\n    // Movement properties\n    star.pulseSpeed = Math.random() * 0.002 + 0.001;\n    star.movementSpeed = (Math.random() * 0.2 + 0.9) * CONFIG.baseMovementSpeed * (1.1 - star.z);\n\n    // Drift movement properties\n    star.driftDirectionX = Math.random() * 2 - 1;\n    star.driftDirectionY = Math.random() * 2 - 1;\n    // Normalize the direction vector\n    const dirMagnitude = Math.sqrt(star.driftDirectionX ** 2 + star.driftDirectionY ** 2);\n    star.driftDirectionX /= dirMagnitude;\n    star.driftDirectionY /= dirMagnitude;\n    // Vary the drift speed between stars\n    star.driftSpeed = CONFIG.driftSpeed + (Math.random() * 2 - 1) * CONFIG.driftSpeedVariation;\n    star.directionChangeTimer = 0;\n\n    // Initialize velocity and position tracking for trails\n    star.velocity = 0;\n    star.lastX = star.x;\n    star.lastY = star.y;\n\n    // Initialize twinkling properties\n    star.twinkleState = 'visible';\n    star.twinkleProgress = 0;\n    star.twinkleDuration = Math.random() * (CONFIG.twinkleDuration[1] - CONFIG.twinkleDuration[0]) + CONFIG.twinkleDuration[0];\n\n    // Physics properties\n    star.velocity = 0;\n    return star;\n  }, [CONFIG, COLORS.stars]);\n\n  // Enhanced version of getSessionConfiguration with time-based fallback\n  const getSessionConfiguration = useCallback(() => {\n    // First ensure dimensions are set\n    if (!dimensionsRef.current.width) return {\n      starSeeds: []\n    };\n\n    // Check if we have a valid stored configuration\n    if (CONFIG.persistenceEnabled) {\n      try {\n        // Try to load existing configuration from localStorage\n        const storedState = localStorage.getItem(CONFIG.sessionKey);\n        if (storedState) {\n          const savedState = JSON.parse(storedState);\n\n          // Check if the saved state is still valid and not too old\n          const currentTime = Date.now();\n          const stateAge = currentTime - savedState.timestamp;\n\n          // Use saved state if it's not too old and has the right number of stars\n          if (stateAge < CONFIG.persistenceMaxAge && savedState.stars && savedState.stars.length === CONFIG.starCount) {\n            // Retrieve stored scroll position if available\n            if (savedState.scrollY !== undefined) {\n              // Store in ref to use in animation\n              springScrollYRef.current = savedState.scrollY;\n            }\n\n            // Calculate scaling factors if viewport changed\n            const prevViewport = savedState.viewport || {\n              width: dimensionsRef.current.width,\n              height: dimensionsRef.current.height\n            };\n            const scaleX = dimensionsRef.current.width / prevViewport.width;\n            const scaleY = dimensionsRef.current.height / prevViewport.height;\n\n            // Return a starSeeds-compatible object for our existing code\n            return {\n              source: 'sessionStorage',\n              timestamp: savedState.timestamp,\n              starSeeds: savedState.stars.map(star => ({\n                // Convert saved stars to the seed format our initialization expects\n                x: star.x * scaleX,\n                y: star.y * scaleY,\n                baseY: star.baseY * scaleY,\n                z: star.z,\n                size: star.size,\n                baseOpacity: star.baseOpacity,\n                opacity: star.opacity,\n                color: star.color,\n                pulsePhase: star.pulsePhase,\n                pulseSpeed: star.pulseSpeed,\n                driftDirectionX: star.driftDirectionX,\n                driftDirectionY: star.driftDirectionY,\n                driftSpeed: star.driftSpeed,\n                movementSpeed: star.movementSpeed,\n                parallaxFactor: star.parallaxFactor,\n                state: star.state,\n                fadeProgress: star.fadeProgress,\n                fadeStart: star.fadeStart,\n                originalSeed: star.originalSeed\n              }))\n            };\n          }\n        }\n      } catch (error) {\n        console.warn('Could not load star configuration from session storage', error);\n      }\n    }\n\n    // If no valid saved state or persistence disabled, use time-based approach\n    if (CONFIG.timeBasedFallback) {\n      const timeBasedStars = generateTimeBasedStars();\n\n      // Convert to starSeeds format\n      return {\n        source: 'timeBasedGeneration',\n        timestamp: Date.now(),\n        starSeeds: timeBasedStars.map(star => ({\n          x: star.x,\n          y: star.y,\n          baseY: star.baseY,\n          z: star.z,\n          size: star.size,\n          baseOpacity: star.baseOpacity,\n          opacity: star.opacity,\n          color: COLORS.stars.indexOf(star.color),\n          pulsePhase: star.pulsePhase,\n          pulseSpeed: star.pulseSpeed,\n          driftDirectionX: star.driftDirectionX,\n          driftDirectionY: star.driftDirectionY,\n          driftSpeed: star.driftSpeed,\n          movementSpeed: star.movementSpeed,\n          parallaxFactor: star.parallaxFactor,\n          state: star.state,\n          fadeProgress: star.fadeProgress,\n          originalSeed: star.originalSeed\n        }))\n      };\n    }\n\n    // Fallback to completely random if all else fails\n    const starSeeds = generateStarSeeds();\n    return {\n      source: 'random',\n      starSeeds,\n      timestamp: Date.now()\n    };\n  }, [CONFIG, COLORS.stars, generateStarSeeds, generateTimeBasedStars]);\n\n  // Enhanced initializeStars function with improved persistence\n  const initializeStars = useCallback(() => {\n    const {\n      width,\n      height\n    } = dimensionsRef.current;\n    if (!width || !height) return;\n\n    // First check if we already have stars that should be preserved\n    if (starsRef.current.length > 0 && isInitializedRef.current) {\n      // Only reinitialize if screen dimensions have significantly changed\n      const existingWidth = starsRef.current[0].x / starsRef.current[0].xSeed;\n      const existingHeight = starsRef.current[0].baseY / (starsRef.current[0].ySeed + CONFIG.offscreenBufferFactor);\n      const widthChange = Math.abs(existingWidth - width) / width;\n      const heightChange = Math.abs(existingHeight - height) / height;\n\n      // If dimensions haven't changed much, preserve existing stars\n      if (widthChange < 0.2 && heightChange < 0.2) {\n        // Just update target positions based on new dimensions\n        for (let i = 0; i < starsRef.current.length; i++) {\n          const star = starsRef.current[i];\n          // Scale position to new dimensions\n          star.x = star.x / existingWidth * width;\n          star.baseY = star.baseY / existingHeight * height;\n          star.y = star.baseY;\n          star.targetY = star.y;\n        }\n        return; // Keep existing stars\n      }\n    }\n\n    // Get session configuration using our enhanced logic\n    const sessionConfig = getSessionConfiguration();\n    const {\n      starSeeds,\n      source\n    } = sessionConfig;\n\n    // Clear existing stars\n    starsRef.current = [];\n\n    // Create stars using the retrieved configuration\n    for (let i = 0; i < starSeeds.length; i++) {\n      const seed = starSeeds[i];\n      const star = {};\n      if (source === 'sessionStorage') {\n        // We have exact star data from session storage\n        star.x = seed.x;\n        star.y = seed.y;\n        star.baseY = seed.baseY;\n        star.z = seed.z;\n        star.size = seed.size;\n        star.baseOpacity = seed.baseOpacity;\n        star.opacity = seed.opacity;\n        star.color = COLORS.stars[seed.color];\n        star.pulsePhase = seed.pulsePhase;\n        star.pulseSpeed = seed.pulseSpeed;\n        star.movementSpeed = seed.movementSpeed;\n        star.driftDirectionX = seed.driftDirectionX;\n        star.driftDirectionY = seed.driftDirectionY;\n        star.driftSpeed = seed.driftSpeed;\n        star.parallaxFactor = seed.parallaxFactor;\n        star.state = seed.state || 'visible';\n        star.fadeProgress = seed.fadeProgress || 1;\n        star.fadeStart = seed.fadeStart;\n        star.originalSeed = seed.originalSeed;\n      } else if (source === 'timeBasedGeneration') {\n        // We have stars generated from a time-based seed\n        star.x = seed.x;\n        star.baseY = seed.baseY;\n        star.y = seed.y;\n        star.z = seed.z;\n        star.size = seed.size;\n        star.baseOpacity = seed.baseOpacity;\n        star.opacity = seed.opacity;\n        star.color = COLORS.stars[seed.color];\n        star.pulsePhase = seed.pulsePhase;\n        star.pulseSpeed = seed.pulseSpeed;\n        star.movementSpeed = seed.movementSpeed;\n        star.driftDirectionX = seed.driftDirectionX;\n        star.driftDirectionY = seed.driftDirectionY;\n        star.driftSpeed = seed.driftSpeed;\n        star.parallaxFactor = seed.parallaxFactor;\n        star.originalSeed = seed.originalSeed;\n        star.state = 'visible';\n        star.fadeProgress = 1;\n      } else {\n        // Original random generation code path\n        // Store original seeds for future reference\n        star.xSeed = seed.xSeed;\n        star.ySeed = seed.ySeed;\n\n        // Position - use seeds but adapt to current screen dimensions\n        star.x = seed.xSeed * width;\n        // Initial y position - distributed vertically across multiple screen heights\n        star.baseY = (seed.ySeed + CONFIG.offscreenBufferFactor) * height;\n        star.y = star.baseY;\n        star.z = seed.zSeed; // Depth (0.1 to 0.9)\n\n        // Visual properties\n        star.size = (seed.sizeSeed * (CONFIG.starSizeMax - CONFIG.starSizeMin) + CONFIG.starSizeMin) * star.z;\n        star.baseOpacity = seed.opacitySeed * (CONFIG.starOpacityMax - CONFIG.starOpacityMin) + CONFIG.starOpacityMin;\n        star.opacity = star.baseOpacity; // Start fully visible\n\n        // Animation properties\n        star.pulsePhase = seed.phaseSeed;\n        star.pulseSpeed = seed.pulseSpeedSeed;\n        star.movementSpeed = seed.speedSeed * CONFIG.baseMovementSpeed * (1.1 - star.z);\n\n        // Initialize velocity and position tracking for trails\n        star.velocity = 0;\n        star.lastX = star.x;\n        star.lastY = star.y;\n\n        // Initialize twinkling properties\n        star.twinkleState = 'visible'; // 'fading-in', 'visible', 'fading-out', 'hidden'\n        star.twinkleProgress = 0;\n        star.twinkleDuration = Math.random() * (CONFIG.twinkleDuration[1] - CONFIG.twinkleDuration[0]) + CONFIG.twinkleDuration[0];\n\n        // Drift movement properties (enhanced)\n        star.driftDirectionX = seed.driftDirectionXSeed;\n        star.driftDirectionY = seed.driftDirectionYSeed;\n        // Normalize the direction vector\n        const dirMagnitude = Math.sqrt(star.driftDirectionX ** 2 + star.driftDirectionY ** 2) || 1;\n        star.driftDirectionX /= dirMagnitude;\n        star.driftDirectionY /= dirMagnitude;\n        // Vary the drift speed between stars\n        star.driftSpeed = CONFIG.driftSpeed + (seed.driftSpeedSeed * 2 - 1) * CONFIG.driftSpeedVariation;\n        star.directionChangeTimer = 0;\n\n        // Star state tracking (new)\n        star.state = 'visible'; // Start visible, not fading in\n        star.fadeProgress = 1; // Fully visible\n\n        // Parallax properties (for scrolling effect)\n        // Make deeper stars (higher z) move less for realistic parallax\n        star.parallaxFactor = seed.parallaxFactorSeed * CONFIG.parallaxFactor * (1 - star.z * 0.5);\n\n        // Physics properties for bouncy effect\n        star.velocity = 0;\n        star.targetY = star.y;\n\n        // Color variation\n        star.color = COLORS.stars[seed.colorIndex];\n      }\n\n      // Common initialization for all stars\n      star.directionChangeTimer = 0;\n      star.velocity = 0;\n      star.targetY = star.y;\n      star.lastX = star.x || star.lastX;\n      star.lastY = star.y || star.lastY;\n\n      // Initialize twinkling properties if not already set\n      if (!star.twinkleState) {\n        star.twinkleState = 'visible';\n        star.twinkleProgress = 0;\n        star.twinkleDuration = Math.random() * (CONFIG.twinkleDuration[1] - CONFIG.twinkleDuration[0]) + CONFIG.twinkleDuration[0];\n      }\n\n      // Add to collection\n      starsRef.current.push(star);\n    }\n  }, [CONFIG, COLORS.stars, getSessionConfiguration]);\n\n  // Check if a star is off-screen\n  const isStarOffScreen = useCallback(star => {\n    const {\n      width,\n      height\n    } = dimensionsRef.current;\n    const buffer = CONFIG.offscreenBuffer;\n    return star.x < -buffer || star.x > width + buffer || star.y < -buffer || star.y > height + buffer;\n  }, [CONFIG.offscreenBuffer]);\n\n  // Optimized star rendering with subtle trail effect\n  const drawStar = useCallback((ctx, star) => {\n    // Skip rendering completely invisible stars\n    if (star.opacity < 0.02) return;\n\n    // Draw subtle trail if enabled and star is moving\n    if (CONFIG.trailEnabled && (Math.abs(star.velocity) > 0.001 || Math.abs(star.lastX - star.x) > 0.1)) {\n      // Calculate trail direction based on movement\n      const trailX = star.lastX !== undefined ? star.lastX : star.x - star.velocity * 5;\n      const trailY = star.lastY !== undefined ? star.lastY : star.y - star.velocity * 5;\n\n      // Ensure the trail is very subtle\n      ctx.beginPath();\n      ctx.moveTo(star.x, star.y);\n      ctx.lineTo(trailX, trailY);\n      ctx.strokeStyle = getColor(star.color, star.opacity * CONFIG.trailOpacityFactor);\n      ctx.lineWidth = star.size * 0.6;\n      ctx.lineCap = 'round';\n      ctx.stroke();\n    }\n\n    // Store current position for next frame's trail\n    star.lastX = star.x;\n    star.lastY = star.y;\n\n    // Simplified star rendering without creating new gradients every frame\n    ctx.beginPath();\n    ctx.arc(star.x, star.y, star.size, 0, Math.PI * 2);\n    ctx.fillStyle = getColor(star.color, star.opacity);\n    ctx.fill();\n\n    // Simplified glow effect without expensive gradient creation\n    if (star.opacity > 0.3) {\n      ctx.beginPath();\n      ctx.arc(star.x, star.y, star.size * 1.8, 0, Math.PI * 2);\n      ctx.fillStyle = getColor(star.color, star.opacity * 0.4);\n      ctx.fill();\n    }\n  }, [CONFIG.trailEnabled, CONFIG.trailOpacityFactor, getColor]);\n\n  // Render the stars on the canvas\n  const renderStars = useCallback(() => {\n    if (!canvasRef.current) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d', {\n      alpha: false\n    });\n    if (!ctx) return;\n    const {\n      width,\n      height,\n      pixelRatio\n    } = dimensionsRef.current;\n\n    // Fill with background color instead of clearing to prevent flickering\n    ctx.fillStyle = COLORS.background.topColor;\n    ctx.fillRect(0, 0, width * pixelRatio, height * pixelRatio);\n\n    // Apply device pixel ratio scaling only once\n    ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n\n    // Enable global composition for better glow effect\n    ctx.globalCompositeOperation = 'lighter';\n\n    // Draw stars\n    for (let i = 0; i < starsRef.current.length; i++) {\n      const star = starsRef.current[i];\n      drawStar(ctx, star);\n    }\n\n    // Reset global composition\n    ctx.globalCompositeOperation = 'source-over';\n  }, [drawStar, canvasRef, COLORS.background]);\n\n  // Update animation state - optimized for performance\n  const updateAnimation = useCallback((deltaTime, timestamp) => {\n    const currentScrollY = springScrollYRef.current;\n    lastScrollYRef.current = currentScrollY;\n\n    // Global time factor for animations\n    const timeFactor = timestamp * 0.001;\n    const currentTime = Date.now();\n\n    // Track stars to replace (avoid modifying array during iteration)\n    const starsToReplace = [];\n\n    // Count currently fading stars to manage random fading\n    let fadingCount = 0;\n    if (CONFIG.randomFadingEnabled) {\n      fadingCount = starsRef.current.filter(star => star.state === 'fading-out' || star.state === 'fading-in').length;\n    }\n\n    // Update stars\n    for (let i = 0; i < starsRef.current.length; i++) {\n      const star = starsRef.current[i];\n\n      // Handle star state transitions\n      if (star.state === 'fading-in') {\n        // Calculate progress for fade-in\n        const elapsed = currentTime - star.fadeStart;\n        star.fadeProgress = Math.min(1, elapsed / CONFIG.fadeInDuration);\n        star.opacity = star.baseOpacity * star.fadeProgress;\n\n        // Complete fade-in\n        if (star.fadeProgress >= 1) {\n          star.state = 'visible';\n          star.opacity = star.baseOpacity;\n        }\n      } else if (star.state === 'fading-out') {\n        // Calculate progress for fade-out\n        const elapsed = currentTime - star.fadeStart;\n        star.fadeProgress = Math.max(0, 1 - elapsed / CONFIG.fadeOutDuration);\n        star.opacity = star.baseOpacity * star.fadeProgress;\n\n        // Complete fade-out - mark for replacement\n        if (star.fadeProgress <= 0) {\n          starsToReplace.push(i);\n        }\n      } else {\n        // Normal visible state\n\n        // Random fading (new feature)\n        if (CONFIG.randomFadingEnabled && fadingCount < CONFIG.maxSimultaneousFading && Math.random() < CONFIG.randomFadeOutProbability * deltaTime) {\n          // Start fade-out process for random star\n          star.state = 'fading-out';\n          star.fadeStart = currentTime;\n          fadingCount++;\n          continue; // Skip the rest of the loop for this star\n        }\n\n        // Calculate parallax effect based on scroll position\n        if (CONFIG.parallaxEnabled) {\n          // Update target position based on scroll (parallax effect)\n          star.targetY = star.baseY - currentScrollY * star.parallaxFactor;\n        }\n\n        // Apply spring physics for bouncy effect\n        const displacement = star.targetY - star.y;\n        const springForce = displacement * CONFIG.springStrength;\n\n        // Update velocity with spring force\n        star.velocity += springForce;\n\n        // Apply damping to velocity\n        star.velocity *= CONFIG.dampingFactor;\n\n        // Add velocity clamping to prevent extreme bouncing\n        const maxVelocity = 1.0; // Maximum allowed velocity\n        star.velocity = Math.max(-maxVelocity, Math.min(maxVelocity, star.velocity));\n\n        // Update position based on velocity (for parallax)\n        star.y += star.velocity;\n\n        // Apply drift movement if enabled\n        if (CONFIG.driftEnabled) {\n          // Apply movement with additional smoothing to prevent jumps\n          // Calculate the intended movement\n          const dx = star.driftDirectionX * star.driftSpeed * deltaTime;\n          const dy = star.driftDirectionY * star.driftSpeed * deltaTime;\n\n          // Apply a maximum movement limit to prevent jumps\n          const maxMove = 0.5; // Maximum pixels to move per frame\n          const actualDx = Math.abs(dx) > maxMove ? Math.sign(dx) * maxMove : dx;\n          const actualDy = Math.abs(dy) > maxMove ? Math.sign(dy) * maxMove : dy;\n\n          // Move star based on limited movement\n          star.x += actualDx;\n          // Add the drift to baseY (which is the reference point for parallax)\n          star.baseY += actualDy;\n          star.targetY = star.baseY - currentScrollY * star.parallaxFactor;\n\n          // Occasionally change drift direction with smoother transitions\n          star.directionChangeTimer += deltaTime;\n          if (Math.random() < CONFIG.directionChangeFrequency * deltaTime) {\n            // Gradually change direction by adding a small random vector\n            // Use the directionChangeAmount to limit the magnitude of the change\n            const changeX = (Math.random() * 2 - 1) * CONFIG.directionChangeAmount;\n            const changeY = (Math.random() * 2 - 1) * CONFIG.directionChangeAmount;\n\n            // Apply a small percentage of the change for smoother transitions\n            star.driftDirectionX += changeX;\n            star.driftDirectionY += changeY;\n\n            // Re-normalize the direction vector with safety checks\n            const dirMagnitude = Math.sqrt(star.driftDirectionX ** 2 + star.driftDirectionY ** 2) || 1;\n\n            // Prevent jittery movement by ensuring minimum magnitude\n            if (dirMagnitude < 0.01) {\n              // If direction vector is too small, reset to a random direction\n              star.driftDirectionX = Math.random() * 2 - 1;\n              star.driftDirectionY = Math.random() * 2 - 1;\n              const newMagnitude = Math.sqrt(star.driftDirectionX ** 2 + star.driftDirectionY ** 2) || 1;\n              star.driftDirectionX /= newMagnitude;\n              star.driftDirectionY /= newMagnitude;\n            } else {\n              star.driftDirectionX /= dirMagnitude;\n              star.driftDirectionY /= dirMagnitude;\n            }\n          }\n        }\n\n        // Check if star is now off-screen\n        if (CONFIG.regenerateOffscreenStars && isStarOffScreen(star) && star.state === 'visible') {\n          // Start fade-out process\n          star.state = 'fading-out';\n          star.fadeStart = currentTime;\n        }\n\n        // Simplified pulsing effect\n        const pulseFactor = Math.sin(timeFactor * star.pulseSpeed + star.pulsePhase) * 0.15 + 0.85;\n        // Only apply pulsing if not in a transition state\n        if (star.state === 'visible') {\n          star.opacity = star.baseOpacity * pulseFactor;\n        }\n      }\n    }\n\n    // Replace stars that have completed fade-out (in reverse order to avoid index issues)\n    for (let i = starsToReplace.length - 1; i >= 0; i--) {\n      const index = starsToReplace[i];\n      // Create a new star to replace the off-screen one\n      const newStar = createNewStar(starsRef.current[index]);\n      // Replace the star in the array\n      starsRef.current[index] = newStar;\n    }\n\n    // Save state periodically for persistence\n    if (CONFIG.persistenceEnabled && timestamp % CONFIG.persistenceInterval < 16) {\n      saveCurrentState();\n    }\n  }, [CONFIG, isStarOffScreen, createNewStar, saveCurrentState]);\n\n  // Define the animation loop function\n  const animate = useCallback(function animationLoop(timestamp) {\n    if (!isInitializedRef.current) {\n      animationFrameRef.current = requestAnimationFrame(animationLoop);\n      return;\n    }\n\n    // Limit FPS\n    const minFrameTime = 1000 / CONFIG.maxFPS;\n    const elapsed = timestamp - (lastTimeRef.current || 0);\n    if (elapsed < minFrameTime) {\n      animationFrameRef.current = requestAnimationFrame(animationLoop);\n      return;\n    }\n\n    // Calculate delta time with cap to prevent large jumps\n    const deltaTime = lastTimeRef.current ? Math.min(elapsed, 50) : 16;\n    lastTimeRef.current = timestamp;\n\n    // Update animation state\n    updateAnimation(deltaTime, timestamp);\n\n    // Render scene\n    renderStars();\n\n    // Schedule next frame\n    animationFrameRef.current = requestAnimationFrame(animationLoop);\n  }, [CONFIG.maxFPS, updateAnimation, renderStars]);\n\n  // Initialize the stars when component mounts or dimensions change\n  useEffect(() => {\n    // One-time initialization function\n    const initialize = () => {\n      if (setupCanvas()) {\n        // Synchronously restore scroll position before first render if available\n        if (CONFIG.persistenceEnabled) {\n          try {\n            const savedScrollY = localStorage.getItem(CONFIG.scrollPositionKey);\n            if (savedScrollY !== null) {\n              // Set both the spring value and the ref value immediately\n              springScrollY.set(parseFloat(savedScrollY));\n              springScrollYRef.current = parseFloat(savedScrollY);\n            }\n          } catch (error) {\n            console.warn('Could not restore scroll position', error);\n          }\n        }\n\n        // Create stars only after canvas is ready\n        initializeStars();\n        // Mark as initialized but don't trigger re-render\n        isInitializedRef.current = true;\n        // Start animation only after everything is ready\n        animationFrameRef.current = requestAnimationFrame(animate);\n      }\n    };\n\n    // Handle resize events\n    const handleResize = () => {\n      // Only re-initialize if already initialized\n      if (isInitializedRef.current) {\n        setupCanvas();\n        initializeStars();\n        // No need to change initialization state\n      }\n    };\n\n    // Throttle resize events\n    let resizeTimer;\n    const throttledResize = () => {\n      if (!resizeTimer) {\n        resizeTimer = setTimeout(() => {\n          resizeTimer = null;\n          handleResize();\n        }, 200); // 200ms throttle\n      }\n    };\n\n    // Add resize listener\n    window.addEventListener('resize', throttledResize);\n\n    // Run initialization immediately (don't wait for an animation frame)\n    // This prevents the initial flicker\n    initialize();\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', throttledResize);\n      if (resizeTimer) clearTimeout(resizeTimer);\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [setupCanvas, initializeStars, animate, canvasRef]);\n\n  // Add navigation event handlers to save state when user leaves\n  useEffect(() => {\n    if (!CONFIG.persistenceEnabled) return;\n    const handleVisibilityChange = () => {\n      if (document.visibilityState === 'hidden') {\n        saveCurrentState();\n      }\n    };\n\n    // Use a synchronous approach for beforeunload to ensure state is saved\n    const handleBeforeUnload = event => {\n      // Save state immediately\n      saveCurrentState();\n\n      // Use a synchronous technique to ensure the save completes\n      // This forces a small delay so the browser can complete the storage operation\n      const start = Date.now();\n      while (Date.now() - start < 10) {\n        // Tiny synchronous delay loop (10ms) to ensure storage completes\n      }\n    };\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    return () => {\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n      saveCurrentState();\n    };\n  }, [CONFIG.persistenceEnabled, saveCurrentState]);\n\n  // Calculate background colors\n  const backgroundColors = useMemo(() => {\n    var _COLORS$background, _COLORS$background2;\n    return {\n      topColor: ((_COLORS$background = COLORS.background) === null || _COLORS$background === void 0 ? void 0 : _COLORS$background.topColor) || 'rgb(8, 8, 12)',\n      bottomColor: ((_COLORS$background2 = COLORS.background) === null || _COLORS$background2 === void 0 ? void 0 : _COLORS$background2.bottomColor) || 'rgb(15, 15, 20)'\n    };\n  }, [COLORS.background]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      width: '100vw',\n      height: '100vh',\n      overflow: 'hidden',\n      zIndex: -1,\n      pointerEvents: 'none',\n      background: `linear-gradient(to bottom, ${backgroundColors.topColor}, ${backgroundColors.bottomColor})`\n    },\n    \"aria-hidden\": \"true\",\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1122,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1108,\n    columnNumber: 5\n  }, this);\n};\n_s(CosmicStars, \"YqwK2IPmxDEEn1/eH8bnyVZ0QLs=\", false, function () {\n  return [useScroll, useSpring];\n});\n_c = CosmicStars;\nexport default CosmicStars;\nvar _c;\n$RefreshReg$(_c, \"CosmicStars\");","map":{"version":3,"names":["React","useRef","useEffect","useCallback","useMemo","useScroll","useSpring","jsxDEV","_jsxDEV","CosmicStars","config","_s","canvasRef","starsRef","animationFrameRef","lastTimeRef","lastScrollYRef","isInitializedRef","dimensionsRef","width","height","pixelRatio","scrollY","smooth","springScrollY","stiffness","damping","mass","restDelta","restSpeed","springScrollYRef","unsubscribe","onChange","value","current","CONFIG","starCount","starSizeMin","starSizeMax","starOpacityMin","starOpacityMax","baseMovementSpeed","pulseFrequency","parallaxEnabled","parallaxFactor","trailEnabled","trailLength","trailOpacityFactor","twinkleEnabled","twinkleProbability","twinkleDuration","randomFadingEnabled","randomFadeOutProbability","maxSimultaneousFading","driftEnabled","driftSpeed","driftSpeedVariation","directionChangeFrequency","directionChangeAmount","regenerateOffscreenStars","fadeInDuration","fadeOutDuration","offscreenBuffer","springStrength","dampingFactor","verticalSpreadFactor","offscreenBufferFactor","maxFPS","persistenceEnabled","persistenceInterval","timeBasedFallback","persistenceMaxAge","sessionKey","scrollPositionKey","lastVisitKey","COLORS","stars","background","topColor","bottomColor","colors","colorCache","cache","forEach","baseColor","opacity","replace","getColor","safeOpacity","Math","max","min","roundedOpacity","round","seededRandom","seed","getDateSeed","now","Date","getFullYear","getMonth","getDate","setupCanvas","canvas","window","innerWidth","innerHeight","devicePixelRatio","style","ctx","getContext","alpha","fillStyle","fillRect","generateStarSeeds","starSeeds","i","push","xSeed","random","ySeed","zSeed","sizeSeed","opacitySeed","phaseSeed","PI","speedSeed","pulseSpeedSeed","colorIndex","floor","length","parallaxFactorSeed","driftDirectionXSeed","driftDirectionYSeed","driftSpeedSeed","generateTimeBasedStars","dateSeed","starSeed","starRandom","star","x","baseY","y","z","size","baseOpacity","color","pulsePhase","pulseSpeed","movementSpeed","driftDirectionX","driftDirectionY","dirMagnitude","sqrt","directionChangeTimer","state","fadeProgress","targetY","velocity","lastX","lastY","twinkleState","twinkleProgress","originalSeed","saveCurrentState","currentTime","localStorage","setItem","toString","completeState","version","timestamp","viewport","map","indexOf","fadeStart","JSON","stringify","error","console","warn","createNewStar","offScreenStar","edgeBuffer","isInitialCreation","getSessionConfiguration","storedState","getItem","savedState","parse","stateAge","undefined","prevViewport","scaleX","scaleY","source","timeBasedStars","initializeStars","existingWidth","existingHeight","widthChange","abs","heightChange","sessionConfig","isStarOffScreen","buffer","drawStar","trailX","trailY","beginPath","moveTo","lineTo","strokeStyle","lineWidth","lineCap","stroke","arc","fill","renderStars","setTransform","globalCompositeOperation","updateAnimation","deltaTime","currentScrollY","timeFactor","starsToReplace","fadingCount","filter","elapsed","displacement","springForce","maxVelocity","dx","dy","maxMove","actualDx","sign","actualDy","changeX","changeY","newMagnitude","pulseFactor","sin","index","newStar","animate","animationLoop","requestAnimationFrame","minFrameTime","initialize","savedScrollY","set","parseFloat","handleResize","resizeTimer","throttledResize","setTimeout","addEventListener","removeEventListener","clearTimeout","cancelAnimationFrame","handleVisibilityChange","document","visibilityState","handleBeforeUnload","event","start","backgroundColors","_COLORS$background","_COLORS$background2","position","top","left","overflow","zIndex","pointerEvents","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/valeria/Documents/Crucible/frontend/src/components/core/effects/cosmiceffects/CosmicStars.jsx"],"sourcesContent":["import React, { useRef, useEffect, useCallback, useMemo } from 'react';\nimport { useScroll, useSpring } from 'framer-motion';\n\n/**\n * CosmicStars Component\n * \n * Renders an immersive, performance-optimized starry background\n * with parallax scrolling, gentle random drifting, and state persistence.\n */\nconst CosmicStars = ({ config = {} }) => {\n  // Refs for DOM elements and animation state\n  const canvasRef = useRef(null);\n  const starsRef = useRef([]);\n  const animationFrameRef = useRef(null);\n  const lastTimeRef = useRef(0);\n  const lastScrollYRef = useRef(0);\n  \n  // Use refs instead of state to prevent re-renders\n  const isInitializedRef = useRef(false);\n  \n  // Store dimensions in a ref to avoid re-renders when they change\n  const dimensionsRef = useRef({ width: 0, height: 0, pixelRatio: 1 });\n  \n  // Get scroll position using framer-motion\n  const { scrollY } = useScroll({\n    smooth: 0.05  // Smoother scrolling for high-framerate animations\n  });\n  \n  // Use spring physics for smoother scrolling effect\n  const springScrollY = useSpring(scrollY, {\n    stiffness: 1,\n    damping: 5,\n    mass: 0.5,\n    restDelta: 0.001,\n    restSpeed: 0.001\n  });\n  \n  // Track spring scrollY value without causing re-renders\n  const springScrollYRef = useRef(0);\n  useEffect(() => {\n    const unsubscribe = springScrollY.onChange(value => {\n      springScrollYRef.current = value;\n    });\n    return () => unsubscribe();\n  }, [springScrollY]);\n  \n  // Configuration - wrapped in useMemo to prevent recreation on each render\n  // Merge default config with user-provided config\n  const CONFIG = useMemo(() => ({\n    // Star appearance\n    starCount: 100,\n    starSizeMin: 1.0,\n    starSizeMax: 1.9,\n    starOpacityMin: 0.2,\n    starOpacityMax: 0.55,\n    \n    // Parallax and movement parameters\n    baseMovementSpeed: 0.00001,  // Reduced for slower movement\n    pulseFrequency: 0.00002,     // Slower pulsing\n    parallaxEnabled: true,\n    parallaxFactor: 0.2,  // How much stars move relative to scroll (0-1)\n    \n    // Trail effect parameters\n    trailEnabled: true,          // Enable subtle trails\n    trailLength: 2,              // Very short trail length (in pixels)\n    trailOpacityFactor: 0.5,     // Trail opacity relative to star opacity\n    \n    // Twinkling effect parameters\n    twinkleEnabled: true,        // Enable stars to fade in and out\n    twinkleProbability: 0.01,    // Probability of a star beginning to twinkle each frame\n    twinkleDuration: [2000, 4000], // Min and max duration of a twinkle cycle in ms\n    \n    // Random fading parameters\n    randomFadingEnabled: true,    // Enable random fading of stars\n    randomFadeOutProbability: 0.0003, // Probability of a star randomly starting to fade out per frame\n    maxSimultaneousFading: 10,    // Maximum number of stars that can be fading at once\n    \n    // Drifting movement parameters\n    driftEnabled: true,            // Enable slow drifting movement\n    driftSpeed: 0.01,              // Base speed of drift movement (pixels per second)\n    driftSpeedVariation: 0.005,    // Variation in drift speed between stars\n    directionChangeFrequency: 0.0005, // Probability of changing direction each frame\n    directionChangeAmount: 0.05,   // How much direction can change at once (lower = smoother)\n    \n    // Star regeneration parameters\n    regenerateOffscreenStars: true, // Replace off-screen stars instead of wrapping\n    fadeInDuration: 2000,          // Duration for new stars to fade in (ms)\n    fadeOutDuration: 1500,         // Duration for off-screen stars to fade out (ms)\n    offscreenBuffer: 50,           // Distance beyond viewport to trigger regeneration (px)\n    \n    // Physics parameters for bouncy effect\n    springStrength: 0.03,  // Higher = snappier\n    dampingFactor: 0.95,    // Higher = less bouncy (0-1)\n    \n    // Star distribution parameters\n    verticalSpreadFactor: 3,  // How many screen heights to spread stars across\n    offscreenBufferFactor: 1, // How many screen heights above viewport to generate stars\n    \n    // Performance parameters\n    maxFPS: 60,\n    \n    // Enhanced persistence settings\n    persistenceEnabled: true,        // Enable persistence features\n    persistenceInterval: 3000,       // Save every 3 seconds (milliseconds)\n    timeBasedFallback: true,         // Use time-based generation as fallback\n    persistenceMaxAge: 7 * 24 * 60 * 60 * 1000, // 7 days before regenerating (milliseconds)\n    \n    // Session persistence keys - namespaced for stars\n    sessionKey: 'cosmic_stars_background_config',\n    scrollPositionKey: 'cosmic_stars_background_scroll',\n    lastVisitKey: 'cosmic_stars_background_last_visit',\n    \n    // Override with user config\n    ...config\n  }), [config]);\n  \n  // Warm, golden color palette - wrapped in useMemo\n  const COLORS = useMemo(() => ({\n    // Star colors\n    stars: [\n      'rgba(255, 243, 200, alpha)', // Warm yellow\n      'rgba(255, 231, 164, alpha)', // Golden\n      'rgba(252, 249, 231, alpha)'  // Off-white gold\n    ],\n    \n    // Background gradient colors\n    background: {\n      topColor: 'rgb(8, 8, 12)',\n      bottomColor: 'rgb(15, 15, 20)'\n    },\n    \n    // Override with user config if provided\n    ...(config.colors || {})\n  }), [config.colors]);\n  \n  // Pre-generated color values to avoid string replacements during animation\n  const colorCache = useMemo(() => {\n    const cache = {};\n    COLORS.stars.forEach(baseColor => {\n      cache[baseColor] = {};\n      for (let opacity = 0; opacity <= 10; opacity++) {\n        const value = opacity / 10;\n        cache[baseColor][value] = baseColor.replace(/alpha\\)$/, `${value})`);\n      }\n    });\n    return cache;\n  }, [COLORS.stars]);\n  \n  // Get color with opacity from cache (faster than string replacement)\n  const getColor = useCallback((baseColor, opacity) => {\n    const safeOpacity = Math.max(0, Math.min(1, opacity || 0));\n    // Round to nearest 0.1 to use cached values\n    const roundedOpacity = Math.round(safeOpacity * 10) / 10;\n    return colorCache[baseColor][roundedOpacity] || baseColor.replace(/alpha\\)$/, `${safeOpacity})`);\n  }, [colorCache]);\n  \n  // Create a deterministic seeded random function\n  const seededRandom = useCallback((seed) => {\n    return () => {\n      seed = (seed * 9301 + 49297) % 233280;\n      return seed / 233280;\n    };\n  }, []);\n\n  // Get a seed based on current date (changes daily)\n  const getDateSeed = useCallback(() => {\n    const now = new Date();\n    return now.getFullYear() * 10000 + (now.getMonth() + 1) * 100 + now.getDate();\n  }, []);\n  \n  // Initialize canvas with proper resolution\n  const setupCanvas = useCallback(() => {\n    if (!canvasRef.current) return false;\n    \n    const canvas = canvasRef.current;\n    \n    // Get viewport dimensions\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    const pixelRatio = window.devicePixelRatio || 1;\n    \n    // Set canvas size accounting for pixel ratio\n    canvas.width = width * pixelRatio;\n    canvas.height = height * pixelRatio;\n    canvas.style.width = `${width}px`;\n    canvas.style.height = `${height}px`;\n    \n    // Ensure canvas is visible with a background color (use alpha: false for no flicker)\n    const ctx = canvas.getContext('2d', { alpha: false });\n    if (ctx) {\n      // Fill with background color immediately to prevent flickering\n      ctx.fillStyle = COLORS.background.topColor;\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n    }\n    \n    // Update dimensions ref instead of state\n    dimensionsRef.current = { width, height, pixelRatio };\n    \n    return true;\n  }, [canvasRef, COLORS.background]);\n  \n  // Generate a new star configuration\n  const generateStarSeeds = useCallback(() => {\n    const { width, height } = dimensionsRef.current;\n    if (!width || !height) return [];\n    \n    const starSeeds = [];\n    \n    for (let i = 0; i < CONFIG.starCount; i++) {\n      starSeeds.push({\n        xSeed: Math.random(),\n        // Distribute stars vertically across multiple screen heights\n        // Including above the viewport for continuous scrolling effect\n        ySeed: Math.random() * CONFIG.verticalSpreadFactor - CONFIG.offscreenBufferFactor,\n        zSeed: Math.random() * 0.8 + 0.1,\n        sizeSeed: Math.random(),\n        opacitySeed: Math.random(),\n        phaseSeed: Math.random() * Math.PI * 2,\n        speedSeed: Math.random() * 0.2 + 0.9,\n        pulseSpeedSeed: Math.random() * 0.002 + 0.001,\n        colorIndex: Math.floor(Math.random() * COLORS.stars.length),\n        // Parallax factor determines how much this star moves with scrolling\n        // Deeper stars (higher z) move less for realistic parallax\n        parallaxFactorSeed: Math.random() * 0.5 + 0.1,\n        // Drift movement properties\n        driftDirectionXSeed: Math.random() * 2 - 1,\n        driftDirectionYSeed: Math.random() * 2 - 1,\n        driftSpeedSeed: Math.random()\n      });\n    }\n    \n    return starSeeds;\n  }, [CONFIG, COLORS.stars.length]);\n  \n  // Enhanced time-based star generation for consistency\n  const generateTimeBasedStars = useCallback(() => {\n    const { width, height } = dimensionsRef.current;\n    if (!width || !height) return [];\n    \n    // Create seed based on date\n    const dateSeed = getDateSeed();\n    \n    // Generate new stars with deterministic positioning\n    const stars = [];\n    \n    for (let i = 0; i < CONFIG.starCount; i++) {\n      // Generate a seed for this specific star (that will be the same each day)\n      const starSeed = dateSeed + i;\n      const starRandom = seededRandom(starSeed);\n      \n      // Create the star using deterministic properties\n      const star = {};\n      \n      // Position with some variance but tied to the date\n      star.x = starRandom() * width;\n      star.baseY = (starRandom() * CONFIG.verticalSpreadFactor - CONFIG.offscreenBufferFactor) * height;\n      star.y = star.baseY;\n      star.z = starRandom() * 0.8 + 0.1;\n      \n      // Visual properties\n      star.size = (starRandom() * (CONFIG.starSizeMax - CONFIG.starSizeMin) + CONFIG.starSizeMin) * star.z;\n      star.baseOpacity = starRandom() * (CONFIG.starOpacityMax - CONFIG.starOpacityMin) + CONFIG.starOpacityMin;\n      star.opacity = star.baseOpacity;\n      star.color = COLORS.stars[Math.floor(starRandom() * COLORS.stars.length)];\n      \n      // Animation properties\n      star.pulsePhase = starRandom() * Math.PI * 2;\n      star.pulseSpeed = starRandom() * 0.002 + 0.001;\n      star.movementSpeed = (starRandom() * 0.2 + 0.9) * CONFIG.baseMovementSpeed * (1.1 - star.z);\n      \n      // Drift properties\n      star.driftDirectionX = starRandom() * 2 - 1;\n      star.driftDirectionY = starRandom() * 2 - 1;\n      // Normalize direction\n      const dirMagnitude = Math.sqrt(star.driftDirectionX ** 2 + star.driftDirectionY ** 2) || 1;\n      star.driftDirectionX /= dirMagnitude;\n      star.driftDirectionY /= dirMagnitude;\n      star.driftSpeed = CONFIG.driftSpeed + (starRandom() * 2 - 1) * CONFIG.driftSpeedVariation;\n      star.directionChangeTimer = 0;\n      \n      // Initial state\n      star.state = 'visible';\n      star.fadeProgress = 1;\n      star.targetY = star.y;\n      star.velocity = 0;\n      star.lastX = star.x;\n      star.lastY = star.y;\n      \n      // Parallax properties\n      star.parallaxFactor = starRandom() * 0.5 * CONFIG.parallaxFactor * (1 - star.z * 0.5);\n      \n      // Initialize twinkling properties\n      star.twinkleState = 'visible';\n      star.twinkleProgress = 0;\n      star.twinkleDuration = starRandom() * \n        (CONFIG.twinkleDuration[1] - CONFIG.twinkleDuration[0]) + \n        CONFIG.twinkleDuration[0];\n      \n      // Store original seed for future reference\n      star.originalSeed = starSeed;\n      \n      stars.push(star);\n    }\n    \n    return stars;\n  }, [CONFIG, COLORS.stars, getDateSeed, seededRandom]);\n  \n  // Save the current star state and scroll position\n  const saveCurrentState = useCallback(() => {\n    if (!starsRef.current.length || !dimensionsRef.current.width || !CONFIG.persistenceEnabled) {\n      return;\n    }\n    \n    try {\n      // Record current time\n      const currentTime = Date.now();\n      \n      // Save current scroll position separately for quick access\n      localStorage.setItem(CONFIG.scrollPositionKey, springScrollYRef.current.toString());\n      \n      // Save last visit time\n      localStorage.setItem(CONFIG.lastVisitKey, currentTime.toString());\n      \n      // Prepare complete star state \n      const completeState = {\n        version: \"1.0\", // For future compatibility\n        timestamp: currentTime,\n        dateSeed: getDateSeed(), // Store the seed for time-based fallback\n        scrollY: springScrollYRef.current,\n        viewport: {\n          width: dimensionsRef.current.width,\n          height: dimensionsRef.current.height,\n          pixelRatio: dimensionsRef.current.pixelRatio\n        },\n        stars: starsRef.current.map(star => ({\n          // Position data\n          x: star.x,\n          y: star.y, \n          baseY: star.baseY,\n          z: star.z,\n          \n          // Visual properties\n          size: star.size,\n          baseOpacity: star.baseOpacity,\n          opacity: star.opacity,\n          color: COLORS.stars.indexOf(star.color),\n          \n          // Animation data\n          pulsePhase: star.pulsePhase,\n          pulseSpeed: star.pulseSpeed,\n          driftDirectionX: star.driftDirectionX,\n          driftDirectionY: star.driftDirectionY,\n          driftSpeed: star.driftSpeed,\n          movementSpeed: star.movementSpeed,\n          parallaxFactor: star.parallaxFactor,\n          \n          // State\n          state: star.state,\n          fadeProgress: star.fadeProgress,\n          fadeStart: star.fadeStart ? currentTime - (currentTime - star.fadeStart) : null,\n          \n          // For fallback/time consistency\n          originalSeed: star.originalSeed || Math.random()\n        }))\n      };\n      \n      // Save complete state\n      localStorage.setItem(CONFIG.sessionKey, JSON.stringify(completeState));\n      \n    } catch (error) {\n      console.warn('Could not save star state to session storage', error);\n    }\n  }, [CONFIG, COLORS.stars, getDateSeed]);\n  \n  // Create a new star at random position\n  const createNewStar = useCallback((offScreenStar = null) => {\n    const { width, height } = dimensionsRef.current;\n    const star = {};\n    \n    // If replacing an existing star, preserve some properties\n    if (offScreenStar) {\n      star.z = offScreenStar.z;\n      star.size = offScreenStar.size;\n      star.baseOpacity = offScreenStar.baseOpacity;\n      star.pulsePhase = Math.random() * Math.PI * 2; // New phase\n      star.color = offScreenStar.color;\n      star.parallaxFactor = offScreenStar.parallaxFactor;\n      star.originalSeed = offScreenStar.originalSeed; // Preserve seed if available\n    } else {\n      // Otherwise generate new properties\n      star.z = Math.random() * 0.8 + 0.1;\n      star.size = (Math.random() * (CONFIG.starSizeMax - CONFIG.starSizeMin) + CONFIG.starSizeMin) * star.z;\n      star.baseOpacity = Math.random() * (CONFIG.starOpacityMax - CONFIG.starOpacityMin) + CONFIG.starOpacityMin;\n      star.pulsePhase = Math.random() * Math.PI * 2;\n      star.color = COLORS.stars[Math.floor(Math.random() * COLORS.stars.length)];\n      star.parallaxFactor = Math.random() * 0.5 * CONFIG.parallaxFactor * (1 - star.z * 0.5);\n      star.originalSeed = Math.random(); // New random seed\n    }\n    \n    // Generate position\n    // Avoid edges by using 10% inset from the viewport dimensions\n    const edgeBuffer = Math.min(width, height) * 0.1;\n    star.x = edgeBuffer + Math.random() * (width - 2 * edgeBuffer);\n    star.baseY = edgeBuffer + Math.random() * (height - 2 * edgeBuffer);\n    star.y = star.baseY;\n    star.targetY = star.y;\n    \n    // For new stars during runtime, fade them in\n    // For initial stars, start them fully visible\n    const isInitialCreation = !isInitializedRef.current;\n    if (isInitialCreation) {\n      star.opacity = star.baseOpacity;\n      star.state = 'visible';\n      star.fadeProgress = 1;\n    } else {\n      star.opacity = 0;\n      star.state = 'fading-in';\n      star.fadeProgress = 0;\n      star.fadeStart = Date.now();\n    }\n    \n    // Movement properties\n    star.pulseSpeed = Math.random() * 0.002 + 0.001;\n    star.movementSpeed = (Math.random() * 0.2 + 0.9) * CONFIG.baseMovementSpeed * (1.1 - star.z);\n    \n    // Drift movement properties\n    star.driftDirectionX = Math.random() * 2 - 1;\n    star.driftDirectionY = Math.random() * 2 - 1;\n    // Normalize the direction vector\n    const dirMagnitude = Math.sqrt(star.driftDirectionX ** 2 + star.driftDirectionY ** 2);\n    star.driftDirectionX /= dirMagnitude;\n    star.driftDirectionY /= dirMagnitude;\n    // Vary the drift speed between stars\n    star.driftSpeed = CONFIG.driftSpeed + (Math.random() * 2 - 1) * CONFIG.driftSpeedVariation;\n    star.directionChangeTimer = 0;\n    \n    // Initialize velocity and position tracking for trails\n    star.velocity = 0;\n    star.lastX = star.x;\n    star.lastY = star.y;\n    \n    // Initialize twinkling properties\n    star.twinkleState = 'visible';\n    star.twinkleProgress = 0;\n    star.twinkleDuration = Math.random() * \n      (CONFIG.twinkleDuration[1] - CONFIG.twinkleDuration[0]) + \n      CONFIG.twinkleDuration[0];\n    \n    // Physics properties\n    star.velocity = 0;\n    \n    return star;\n  }, [CONFIG, COLORS.stars]);\n  \n  // Enhanced version of getSessionConfiguration with time-based fallback\n  const getSessionConfiguration = useCallback(() => {\n    // First ensure dimensions are set\n    if (!dimensionsRef.current.width) return { starSeeds: [] };\n    \n    // Check if we have a valid stored configuration\n    if (CONFIG.persistenceEnabled) {\n      try {\n        // Try to load existing configuration from localStorage\n        const storedState = localStorage.getItem(CONFIG.sessionKey);\n        \n        if (storedState) {\n          const savedState = JSON.parse(storedState);\n          \n          // Check if the saved state is still valid and not too old\n          const currentTime = Date.now();\n          const stateAge = currentTime - savedState.timestamp;\n          \n          // Use saved state if it's not too old and has the right number of stars\n          if (stateAge < CONFIG.persistenceMaxAge && \n              savedState.stars && \n              savedState.stars.length === CONFIG.starCount) {\n            \n            // Retrieve stored scroll position if available\n            if (savedState.scrollY !== undefined) {\n              // Store in ref to use in animation\n              springScrollYRef.current = savedState.scrollY;\n            }\n            \n            // Calculate scaling factors if viewport changed\n            const prevViewport = savedState.viewport || { \n              width: dimensionsRef.current.width, \n              height: dimensionsRef.current.height \n            };\n            \n            const scaleX = dimensionsRef.current.width / prevViewport.width;\n            const scaleY = dimensionsRef.current.height / prevViewport.height;\n            \n            // Return a starSeeds-compatible object for our existing code\n            return {\n              source: 'sessionStorage',\n              timestamp: savedState.timestamp,\n              starSeeds: savedState.stars.map(star => ({\n                // Convert saved stars to the seed format our initialization expects\n                x: star.x * scaleX,\n                y: star.y * scaleY,\n                baseY: star.baseY * scaleY,\n                z: star.z,\n                size: star.size,\n                baseOpacity: star.baseOpacity,\n                opacity: star.opacity,\n                color: star.color,\n                pulsePhase: star.pulsePhase,\n                pulseSpeed: star.pulseSpeed,\n                driftDirectionX: star.driftDirectionX,\n                driftDirectionY: star.driftDirectionY,\n                driftSpeed: star.driftSpeed,\n                movementSpeed: star.movementSpeed,\n                parallaxFactor: star.parallaxFactor,\n                state: star.state,\n                fadeProgress: star.fadeProgress,\n                fadeStart: star.fadeStart,\n                originalSeed: star.originalSeed\n              }))\n            };\n          }\n        }\n      } catch (error) {\n        console.warn('Could not load star configuration from session storage', error);\n      }\n    }\n    \n    // If no valid saved state or persistence disabled, use time-based approach\n    if (CONFIG.timeBasedFallback) {\n      const timeBasedStars = generateTimeBasedStars();\n      \n      // Convert to starSeeds format\n      return {\n        source: 'timeBasedGeneration',\n        timestamp: Date.now(),\n        starSeeds: timeBasedStars.map(star => ({\n          x: star.x,\n          y: star.y,\n          baseY: star.baseY,\n          z: star.z,\n          size: star.size,\n          baseOpacity: star.baseOpacity,\n          opacity: star.opacity,\n          color: COLORS.stars.indexOf(star.color),\n          pulsePhase: star.pulsePhase,\n          pulseSpeed: star.pulseSpeed,\n          driftDirectionX: star.driftDirectionX,\n          driftDirectionY: star.driftDirectionY,\n          driftSpeed: star.driftSpeed,\n          movementSpeed: star.movementSpeed,\n          parallaxFactor: star.parallaxFactor,\n          state: star.state,\n          fadeProgress: star.fadeProgress,\n          originalSeed: star.originalSeed\n        }))\n      };\n    }\n    \n    // Fallback to completely random if all else fails\n    const starSeeds = generateStarSeeds();\n    return { source: 'random', starSeeds, timestamp: Date.now() };\n  }, [CONFIG, COLORS.stars, generateStarSeeds, generateTimeBasedStars]);\n  \n  // Enhanced initializeStars function with improved persistence\n  const initializeStars = useCallback(() => {\n    const { width, height } = dimensionsRef.current;\n    if (!width || !height) return;\n    \n    // First check if we already have stars that should be preserved\n    if (starsRef.current.length > 0 && isInitializedRef.current) {\n      // Only reinitialize if screen dimensions have significantly changed\n      const existingWidth = starsRef.current[0].x / starsRef.current[0].xSeed;\n      const existingHeight = starsRef.current[0].baseY / (starsRef.current[0].ySeed + CONFIG.offscreenBufferFactor);\n      \n      const widthChange = Math.abs(existingWidth - width) / width;\n      const heightChange = Math.abs(existingHeight - height) / height;\n      \n      // If dimensions haven't changed much, preserve existing stars\n      if (widthChange < 0.2 && heightChange < 0.2) {\n        // Just update target positions based on new dimensions\n        for (let i = 0; i < starsRef.current.length; i++) {\n          const star = starsRef.current[i];\n          // Scale position to new dimensions\n          star.x = (star.x / existingWidth) * width;\n          star.baseY = (star.baseY / existingHeight) * height;\n          star.y = star.baseY;\n          star.targetY = star.y;\n        }\n        return; // Keep existing stars\n      }\n    }\n    \n    // Get session configuration using our enhanced logic\n    const sessionConfig = getSessionConfiguration();\n    const { starSeeds, source } = sessionConfig;\n    \n    // Clear existing stars\n    starsRef.current = [];\n    \n    // Create stars using the retrieved configuration\n    for (let i = 0; i < starSeeds.length; i++) {\n      const seed = starSeeds[i];\n      const star = {};\n      \n      if (source === 'sessionStorage') {\n        // We have exact star data from session storage\n        star.x = seed.x;\n        star.y = seed.y;\n        star.baseY = seed.baseY;\n        star.z = seed.z;\n        star.size = seed.size;\n        star.baseOpacity = seed.baseOpacity;\n        star.opacity = seed.opacity;\n        star.color = COLORS.stars[seed.color];\n        star.pulsePhase = seed.pulsePhase;\n        star.pulseSpeed = seed.pulseSpeed;\n        star.movementSpeed = seed.movementSpeed;\n        star.driftDirectionX = seed.driftDirectionX;\n        star.driftDirectionY = seed.driftDirectionY;\n        star.driftSpeed = seed.driftSpeed;\n        star.parallaxFactor = seed.parallaxFactor;\n        star.state = seed.state || 'visible';\n        star.fadeProgress = seed.fadeProgress || 1;\n        star.fadeStart = seed.fadeStart;\n        star.originalSeed = seed.originalSeed;\n      } else if (source === 'timeBasedGeneration') {\n        // We have stars generated from a time-based seed\n        star.x = seed.x;\n        star.baseY = seed.baseY;\n        star.y = seed.y;\n        star.z = seed.z;\n        star.size = seed.size;\n        star.baseOpacity = seed.baseOpacity;\n        star.opacity = seed.opacity;\n        star.color = COLORS.stars[seed.color];\n        star.pulsePhase = seed.pulsePhase;\n        star.pulseSpeed = seed.pulseSpeed;\n        star.movementSpeed = seed.movementSpeed;\n        star.driftDirectionX = seed.driftDirectionX;\n        star.driftDirectionY = seed.driftDirectionY;\n        star.driftSpeed = seed.driftSpeed;\n        star.parallaxFactor = seed.parallaxFactor;\n        star.originalSeed = seed.originalSeed;\n        star.state = 'visible';\n        star.fadeProgress = 1;\n      } else {\n        // Original random generation code path\n        // Store original seeds for future reference\n        star.xSeed = seed.xSeed;\n        star.ySeed = seed.ySeed;\n        \n        // Position - use seeds but adapt to current screen dimensions\n        star.x = seed.xSeed * width;\n        // Initial y position - distributed vertically across multiple screen heights\n        star.baseY = (seed.ySeed + CONFIG.offscreenBufferFactor) * height;\n        star.y = star.baseY;\n        star.z = seed.zSeed; // Depth (0.1 to 0.9)\n        \n        // Visual properties\n        star.size = (seed.sizeSeed * (CONFIG.starSizeMax - CONFIG.starSizeMin) + CONFIG.starSizeMin) * star.z;\n        star.baseOpacity = seed.opacitySeed * (CONFIG.starOpacityMax - CONFIG.starOpacityMin) + CONFIG.starOpacityMin;\n        star.opacity = star.baseOpacity; // Start fully visible\n        \n        // Animation properties\n        star.pulsePhase = seed.phaseSeed;\n        star.pulseSpeed = seed.pulseSpeedSeed;\n        star.movementSpeed = seed.speedSeed * CONFIG.baseMovementSpeed * (1.1 - star.z);\n        \n        // Initialize velocity and position tracking for trails\n        star.velocity = 0;\n        star.lastX = star.x;\n        star.lastY = star.y;\n        \n        // Initialize twinkling properties\n        star.twinkleState = 'visible'; // 'fading-in', 'visible', 'fading-out', 'hidden'\n        star.twinkleProgress = 0;\n        star.twinkleDuration = Math.random() * \n          (CONFIG.twinkleDuration[1] - CONFIG.twinkleDuration[0]) + \n          CONFIG.twinkleDuration[0];\n        \n        // Drift movement properties (enhanced)\n        star.driftDirectionX = seed.driftDirectionXSeed;\n        star.driftDirectionY = seed.driftDirectionYSeed;\n        // Normalize the direction vector\n        const dirMagnitude = Math.sqrt(star.driftDirectionX ** 2 + star.driftDirectionY ** 2) || 1;\n        star.driftDirectionX /= dirMagnitude;\n        star.driftDirectionY /= dirMagnitude;\n        // Vary the drift speed between stars\n        star.driftSpeed = CONFIG.driftSpeed + (seed.driftSpeedSeed * 2 - 1) * CONFIG.driftSpeedVariation;\n        star.directionChangeTimer = 0;\n        \n        // Star state tracking (new)\n        star.state = 'visible'; // Start visible, not fading in\n        star.fadeProgress = 1; // Fully visible\n        \n        // Parallax properties (for scrolling effect)\n        // Make deeper stars (higher z) move less for realistic parallax\n        star.parallaxFactor = seed.parallaxFactorSeed * CONFIG.parallaxFactor * (1 - star.z * 0.5);\n        \n        // Physics properties for bouncy effect\n        star.velocity = 0;\n        star.targetY = star.y;\n        \n        // Color variation\n        star.color = COLORS.stars[seed.colorIndex];\n      }\n      \n      // Common initialization for all stars\n      star.directionChangeTimer = 0;\n      star.velocity = 0;\n      star.targetY = star.y;\n      star.lastX = star.x || star.lastX;\n      star.lastY = star.y || star.lastY;\n      \n      // Initialize twinkling properties if not already set\n      if (!star.twinkleState) {\n        star.twinkleState = 'visible';\n        star.twinkleProgress = 0;\n        star.twinkleDuration = Math.random() * \n          (CONFIG.twinkleDuration[1] - CONFIG.twinkleDuration[0]) + \n          CONFIG.twinkleDuration[0];\n      }\n      \n      // Add to collection\n      starsRef.current.push(star);\n    }\n  }, [CONFIG, COLORS.stars, getSessionConfiguration]);\n  \n  // Check if a star is off-screen\n  const isStarOffScreen = useCallback((star) => {\n    const { width, height } = dimensionsRef.current;\n    const buffer = CONFIG.offscreenBuffer;\n    \n    return (\n      star.x < -buffer ||\n      star.x > width + buffer ||\n      star.y < -buffer ||\n      star.y > height + buffer\n    );\n  }, [CONFIG.offscreenBuffer]);\n  \n  // Optimized star rendering with subtle trail effect\n  const drawStar = useCallback((ctx, star) => {\n    // Skip rendering completely invisible stars\n    if (star.opacity < 0.02) return;\n    \n    // Draw subtle trail if enabled and star is moving\n    if (CONFIG.trailEnabled && (Math.abs(star.velocity) > 0.001 || Math.abs(star.lastX - star.x) > 0.1)) {\n      // Calculate trail direction based on movement\n      const trailX = star.lastX !== undefined ? star.lastX : star.x - star.velocity * 5;\n      const trailY = star.lastY !== undefined ? star.lastY : star.y - star.velocity * 5;\n      \n      // Ensure the trail is very subtle\n      ctx.beginPath();\n      ctx.moveTo(star.x, star.y);\n      ctx.lineTo(trailX, trailY);\n      ctx.strokeStyle = getColor(star.color, star.opacity * CONFIG.trailOpacityFactor);\n      ctx.lineWidth = star.size * 0.6;\n      ctx.lineCap = 'round';\n      ctx.stroke();\n    }\n    \n    // Store current position for next frame's trail\n    star.lastX = star.x;\n    star.lastY = star.y;\n    \n    // Simplified star rendering without creating new gradients every frame\n    ctx.beginPath();\n    ctx.arc(star.x, star.y, star.size, 0, Math.PI * 2);\n    ctx.fillStyle = getColor(star.color, star.opacity);\n    ctx.fill();\n    \n    // Simplified glow effect without expensive gradient creation\n    if (star.opacity > 0.3) {\n      ctx.beginPath();\n      ctx.arc(star.x, star.y, star.size * 1.8, 0, Math.PI * 2);\n      ctx.fillStyle = getColor(star.color, star.opacity * 0.4);\n      ctx.fill();\n    }\n  }, [CONFIG.trailEnabled, CONFIG.trailOpacityFactor, getColor]);\n  \n  // Render the stars on the canvas\n  const renderStars = useCallback(() => {\n    if (!canvasRef.current) return;\n    \n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d', { alpha: false });\n    \n    if (!ctx) return;\n    \n    const { width, height, pixelRatio } = dimensionsRef.current;\n    \n    // Fill with background color instead of clearing to prevent flickering\n    ctx.fillStyle = COLORS.background.topColor;\n    ctx.fillRect(0, 0, width * pixelRatio, height * pixelRatio);\n    \n    // Apply device pixel ratio scaling only once\n    ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n    \n    // Enable global composition for better glow effect\n    ctx.globalCompositeOperation = 'lighter';\n    \n    // Draw stars\n    for (let i = 0; i < starsRef.current.length; i++) {\n      const star = starsRef.current[i];\n      drawStar(ctx, star);\n    }\n    \n    // Reset global composition\n    ctx.globalCompositeOperation = 'source-over';\n  }, [drawStar, canvasRef, COLORS.background]);\n  \n  // Update animation state - optimized for performance\n  const updateAnimation = useCallback((deltaTime, timestamp) => {\n    const currentScrollY = springScrollYRef.current;\n    lastScrollYRef.current = currentScrollY;\n    \n    // Global time factor for animations\n    const timeFactor = timestamp * 0.001;\n    const currentTime = Date.now();\n    \n    // Track stars to replace (avoid modifying array during iteration)\n    const starsToReplace = [];\n    \n    // Count currently fading stars to manage random fading\n    let fadingCount = 0;\n    if (CONFIG.randomFadingEnabled) {\n      fadingCount = starsRef.current.filter(star => star.state === 'fading-out' || star.state === 'fading-in').length;\n    }\n    \n    // Update stars\n    for (let i = 0; i < starsRef.current.length; i++) {\n      const star = starsRef.current[i];\n      \n      // Handle star state transitions\n      if (star.state === 'fading-in') {\n        // Calculate progress for fade-in\n        const elapsed = currentTime - star.fadeStart;\n        star.fadeProgress = Math.min(1, elapsed / CONFIG.fadeInDuration);\n        star.opacity = star.baseOpacity * star.fadeProgress;\n        \n        // Complete fade-in\n        if (star.fadeProgress >= 1) {\n          star.state = 'visible';\n          star.opacity = star.baseOpacity;\n        }\n      } else if (star.state === 'fading-out') {\n        // Calculate progress for fade-out\n        const elapsed = currentTime - star.fadeStart;\n        star.fadeProgress = Math.max(0, 1 - (elapsed / CONFIG.fadeOutDuration));\n        star.opacity = star.baseOpacity * star.fadeProgress;\n        \n        // Complete fade-out - mark for replacement\n        if (star.fadeProgress <= 0) {\n          starsToReplace.push(i);\n        }\n      } else {\n        // Normal visible state\n        \n        // Random fading (new feature)\n        if (CONFIG.randomFadingEnabled && \n            fadingCount < CONFIG.maxSimultaneousFading && \n            Math.random() < CONFIG.randomFadeOutProbability * deltaTime) {\n          // Start fade-out process for random star\n          star.state = 'fading-out';\n          star.fadeStart = currentTime;\n          fadingCount++;\n          continue; // Skip the rest of the loop for this star\n        }\n        \n        // Calculate parallax effect based on scroll position\n        if (CONFIG.parallaxEnabled) {\n          // Update target position based on scroll (parallax effect)\n          star.targetY = star.baseY - (currentScrollY * star.parallaxFactor);\n        }\n        \n        // Apply spring physics for bouncy effect\n        const displacement = star.targetY - star.y;\n        const springForce = displacement * CONFIG.springStrength;\n        \n        // Update velocity with spring force\n        star.velocity += springForce;\n        \n        // Apply damping to velocity\n        star.velocity *= CONFIG.dampingFactor;\n        \n        // Add velocity clamping to prevent extreme bouncing\n        const maxVelocity = 1.0; // Maximum allowed velocity\n        star.velocity = Math.max(-maxVelocity, Math.min(maxVelocity, star.velocity));\n        \n        // Update position based on velocity (for parallax)\n        star.y += star.velocity;\n        \n        // Apply drift movement if enabled\n        if (CONFIG.driftEnabled) {\n          // Apply movement with additional smoothing to prevent jumps\n          // Calculate the intended movement\n          const dx = star.driftDirectionX * star.driftSpeed * deltaTime;\n          const dy = star.driftDirectionY * star.driftSpeed * deltaTime;\n          \n          // Apply a maximum movement limit to prevent jumps\n          const maxMove = 0.5; // Maximum pixels to move per frame\n          const actualDx = Math.abs(dx) > maxMove ? Math.sign(dx) * maxMove : dx;\n          const actualDy = Math.abs(dy) > maxMove ? Math.sign(dy) * maxMove : dy;\n          \n          // Move star based on limited movement\n          star.x += actualDx;\n          // Add the drift to baseY (which is the reference point for parallax)\n          star.baseY += actualDy;\n          star.targetY = star.baseY - (currentScrollY * star.parallaxFactor);\n          \n          // Occasionally change drift direction with smoother transitions\n          star.directionChangeTimer += deltaTime;\n          if (Math.random() < CONFIG.directionChangeFrequency * deltaTime) {\n            // Gradually change direction by adding a small random vector\n            // Use the directionChangeAmount to limit the magnitude of the change\n            const changeX = (Math.random() * 2 - 1) * CONFIG.directionChangeAmount;\n            const changeY = (Math.random() * 2 - 1) * CONFIG.directionChangeAmount;\n            \n            // Apply a small percentage of the change for smoother transitions\n            star.driftDirectionX += changeX;\n            star.driftDirectionY += changeY;\n            \n            // Re-normalize the direction vector with safety checks\n            const dirMagnitude = Math.sqrt(star.driftDirectionX ** 2 + star.driftDirectionY ** 2) || 1;\n            \n            // Prevent jittery movement by ensuring minimum magnitude\n            if (dirMagnitude < 0.01) {\n              // If direction vector is too small, reset to a random direction\n              star.driftDirectionX = Math.random() * 2 - 1;\n              star.driftDirectionY = Math.random() * 2 - 1;\n              const newMagnitude = Math.sqrt(star.driftDirectionX ** 2 + star.driftDirectionY ** 2) || 1;\n              star.driftDirectionX /= newMagnitude;\n              star.driftDirectionY /= newMagnitude;\n            } else {\n              star.driftDirectionX /= dirMagnitude;\n              star.driftDirectionY /= dirMagnitude;\n            }\n          }\n        }\n        \n        // Check if star is now off-screen\n        if (CONFIG.regenerateOffscreenStars && isStarOffScreen(star) && star.state === 'visible') {\n          // Start fade-out process\n          star.state = 'fading-out';\n          star.fadeStart = currentTime;\n        }\n        \n        // Simplified pulsing effect\n        const pulseFactor = Math.sin(timeFactor * star.pulseSpeed + star.pulsePhase) * 0.15 + 0.85;\n        // Only apply pulsing if not in a transition state\n        if (star.state === 'visible') {\n          star.opacity = star.baseOpacity * pulseFactor;\n        }\n      }\n    }\n    \n    // Replace stars that have completed fade-out (in reverse order to avoid index issues)\n    for (let i = starsToReplace.length - 1; i >= 0; i--) {\n      const index = starsToReplace[i];\n      // Create a new star to replace the off-screen one\n      const newStar = createNewStar(starsRef.current[index]);\n      // Replace the star in the array\n      starsRef.current[index] = newStar;\n    }\n    \n    // Save state periodically for persistence\n    if (CONFIG.persistenceEnabled && timestamp % CONFIG.persistenceInterval < 16) {\n      saveCurrentState();\n    }\n  }, [CONFIG, isStarOffScreen, createNewStar, saveCurrentState]);\n  \n  // Define the animation loop function\n  const animate = useCallback(function animationLoop(timestamp) {\n    if (!isInitializedRef.current) {\n      animationFrameRef.current = requestAnimationFrame(animationLoop);\n      return;\n    }\n    \n    // Limit FPS\n    const minFrameTime = 1000 / CONFIG.maxFPS;\n    const elapsed = timestamp - (lastTimeRef.current || 0);\n    \n    if (elapsed < minFrameTime) {\n      animationFrameRef.current = requestAnimationFrame(animationLoop);\n      return;\n    }\n    \n    // Calculate delta time with cap to prevent large jumps\n    const deltaTime = lastTimeRef.current ? Math.min(elapsed, 50) : 16;\n    lastTimeRef.current = timestamp;\n    \n    // Update animation state\n    updateAnimation(deltaTime, timestamp);\n    \n    // Render scene\n    renderStars();\n    \n    // Schedule next frame\n    animationFrameRef.current = requestAnimationFrame(animationLoop);\n  }, [CONFIG.maxFPS, updateAnimation, renderStars]);\n  \n  // Initialize the stars when component mounts or dimensions change\n  useEffect(() => {\n    // One-time initialization function\n    const initialize = () => {\n      if (setupCanvas()) {\n        // Synchronously restore scroll position before first render if available\n        if (CONFIG.persistenceEnabled) {\n          try {\n            const savedScrollY = localStorage.getItem(CONFIG.scrollPositionKey);\n            if (savedScrollY !== null) {\n              // Set both the spring value and the ref value immediately\n              springScrollY.set(parseFloat(savedScrollY));\n              springScrollYRef.current = parseFloat(savedScrollY);\n            }\n          } catch (error) {\n            console.warn('Could not restore scroll position', error);\n          }\n        }\n        \n        // Create stars only after canvas is ready\n        initializeStars();\n        // Mark as initialized but don't trigger re-render\n        isInitializedRef.current = true;\n        // Start animation only after everything is ready\n        animationFrameRef.current = requestAnimationFrame(animate);\n      }\n    };\n    \n    // Handle resize events\n    const handleResize = () => {\n      // Only re-initialize if already initialized\n      if (isInitializedRef.current) {\n        setupCanvas();\n        initializeStars();\n        // No need to change initialization state\n      }\n    };\n    \n    // Throttle resize events\n    let resizeTimer;\n    const throttledResize = () => {\n      if (!resizeTimer) {\n        resizeTimer = setTimeout(() => {\n          resizeTimer = null;\n          handleResize();\n        }, 200); // 200ms throttle\n      }\n    };\n    \n    // Add resize listener\n    window.addEventListener('resize', throttledResize);\n    \n    // Run initialization immediately (don't wait for an animation frame)\n    // This prevents the initial flicker\n    initialize();\n    \n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', throttledResize);\n      if (resizeTimer) clearTimeout(resizeTimer);\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [setupCanvas, initializeStars, animate, canvasRef]);\n  \n  // Add navigation event handlers to save state when user leaves\n  useEffect(() => {\n    if (!CONFIG.persistenceEnabled) return;\n    \n    const handleVisibilityChange = () => {\n      if (document.visibilityState === 'hidden') {\n        saveCurrentState();\n      }\n    };\n    \n    // Use a synchronous approach for beforeunload to ensure state is saved\n    const handleBeforeUnload = (event) => {\n      // Save state immediately\n      saveCurrentState();\n      \n      // Use a synchronous technique to ensure the save completes\n      // This forces a small delay so the browser can complete the storage operation\n      const start = Date.now();\n      while (Date.now() - start < 10) {\n        // Tiny synchronous delay loop (10ms) to ensure storage completes\n      }\n    };\n    \n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    \n    return () => {\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n      saveCurrentState();\n    };\n  }, [CONFIG.persistenceEnabled, saveCurrentState]);\n  \n  // Calculate background colors\n  const backgroundColors = useMemo(() => ({\n    topColor: COLORS.background?.topColor || 'rgb(8, 8, 12)',\n    bottomColor: COLORS.background?.bottomColor || 'rgb(15, 15, 20)'\n  }), [COLORS.background]);\n  \n  return (\n    <div\n      style={{\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        width: '100vw',\n        height: '100vh',\n        overflow: 'hidden',\n        zIndex: -1,\n        pointerEvents: 'none',\n        background: `linear-gradient(to bottom, ${backgroundColors.topColor}, ${backgroundColors.bottomColor})`\n      }}\n      aria-hidden=\"true\"\n    >\n      <canvas\n        ref={canvasRef}\n        style={{\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%',\n          height: '100%'\n        }}\n      />\n    </div>\n  );\n};\n\nexport default CosmicStars;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}