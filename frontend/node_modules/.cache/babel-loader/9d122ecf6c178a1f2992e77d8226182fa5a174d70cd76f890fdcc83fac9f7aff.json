{"ast":null,"code":"var _jsxFileName = \"/home/valeria/Documents/Crucible/frontend/src/components/core/effects/texteffects/RevealText.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useMemo, useState, useCallback } from 'react';\nimport { motion, useAnimation, useReducedMotion } from 'framer-motion';\nimport { createUseStyles } from 'react-jss';\n\n/**\n * Clean, performance-optimized styles\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = createUseStyles({\n  revealContainer: props => ({\n    position: 'relative',\n    overflow: props.clipOverflow ? 'hidden' : 'visible',\n    // Custom spacing\n    margin: props.margin || '0 0 1.5rem 0',\n    padding: props.padding || 0,\n    zIndex: props.zIndex || 1\n  }),\n  revealContent: {\n    position: 'relative',\n    width: '100%',\n    // Prevent fouc\n    visibility: 'visible'\n  },\n  staggerItem: {\n    display: 'inline-block',\n    // Text wrapping control\n    whiteSpace: props => props.noWrapping ? 'nowrap' : 'normal'\n  },\n  divider: props => ({\n    width: props.dividerWidth || '100px',\n    height: props.dividerHeight || '1px',\n    background: props.dividerBackground || 'linear-gradient(to right, rgba(160, 142, 97, 0), rgba(160, 142, 97, 0.6), rgba(160, 142, 97, 0))',\n    margin: props.dividerMargin || '0.8rem 0',\n    display: props.showDivider ? 'block' : 'none',\n    opacity: 0,\n    transition: 'opacity 0.5s ease',\n    ...props.dividerStyle\n  }),\n  dividerVisible: {\n    opacity: '1 !important'\n  }\n});\n\n/**\n * RevealText Component\n * \n * A streamlined reveal animation component that works perfectly alongside\n * ScrollingTextAnimation and other motion components.\n * \n * @param {Object} props - Component props\n * @param {ReactNode} props.children - Content to be revealed\n * @param {string} props.type - Animation type ('fade-up', 'fade-down', 'fade-left', 'fade-right', 'scale', 'fade')\n * @param {number} props.distance - Animation distance in pixels (for directional animations)\n * @param {number} props.duration - Animation duration in seconds\n * @param {number} props.delay - Animation delay in milliseconds\n * @param {Array|string} props.easing - Animation easing function\n * @param {boolean} props.staggerChildren - Whether to stagger child animations\n * @param {number} props.staggerDelay - Delay between staggered children in seconds\n * @param {Object} props.staggerConfig - Advanced staggering configuration\n * @param {string} props.staggerConfig.mode - Staggering mode ('default', 'words', 'lines', 'chars')\n * @param {number} props.staggerConfig.amount - Staggering amount multiplier\n * @param {string} props.staggerConfig.from - Staggering direction ('start', 'end', 'center')\n * @param {Object} props.staggerConfig.childVariants - Custom variants for children\n * @param {boolean} props.useSpring - Whether to use spring physics instead of duration/easing\n * @param {Object} props.springConfig - Spring physics configuration (if useSpring is true)\n * @param {boolean} props.disableOnMobile - Whether to disable animation on mobile devices\n * @param {number} props.threshold - Visibility threshold to trigger animation (0-1)\n * @param {boolean} props.once - Whether animation should only happen once\n * @param {boolean} props.clipOverflow - Whether to clip overflow\n * @param {string} props.margin - Container margin\n * @param {string} props.padding - Container padding\n * @param {number} props.zIndex - Container z-index\n * @param {boolean} props.showDivider - Whether to show a divider\n * @param {Object} props.dividerProps - Divider configuration\n * @param {string} props.className - Additional CSS class\n * @param {Object} props.style - Additional inline styles\n */\nconst RevealText = ({\n  children,\n  type = 'fade-up',\n  distance = 30,\n  duration = 0.8,\n  delay = 0,\n  easing = [0.25, 0.1, 0.25, 1.0],\n  // Default cubic bezier\n  staggerChildren = false,\n  staggerDelay = 0.05,\n  staggerConfig = {\n    mode: 'words',\n    // 'words', 'lines', 'chars'\n    amount: 1,\n    // Multiplier for stagger delay\n    from: 'start',\n    // 'start', 'end', 'center'\n    childVariants: null // Custom variants for children\n  },\n  useSpring = false,\n  // Spring physics disabled by default\n  springConfig = {\n    stiffness: 50,\n    damping: 15,\n    mass: 0.5\n  },\n  disableOnMobile = false,\n  threshold = 0.15,\n  once = true,\n  // Set to true by default\n  clipOverflow = true,\n  margin,\n  padding,\n  zIndex,\n  showDivider = false,\n  dividerProps = {},\n  className = '',\n  style = {}\n}) => {\n  _s();\n  // Detect reduced motion preference\n  const prefersReducedMotion = useReducedMotion();\n\n  // Track if element is in view\n  const [isElementInView, setIsElementInView] = useState(false);\n\n  // The container reference\n  const containerRef = useRef(null);\n\n  // Animation controls\n  const controls = useAnimation();\n\n  // Frame synchronization ref\n  const animationFrameIdRef = useRef(null);\n\n  // Instead of using framer-motion's useInView, we'll set up our own\n  // intersection observer with frame synchronization\n  const [inView, setInView] = useState(false);\n\n  // Detect if on mobile device\n  const isMobileRef = useRef(false);\n\n  // Check for mobile on mount\n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n    isMobileRef.current = window.innerWidth <= 768 || /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n  }, []);\n\n  // Determine if we should use simplified animations\n  const shouldUseSimplifiedAnimations = useMemo(() => {\n    return prefersReducedMotion || disableOnMobile && isMobileRef.current;\n  }, [prefersReducedMotion, disableOnMobile]);\n\n  // Set up intersection observer with frame synchronization\n  useEffect(() => {\n    if (!containerRef.current || typeof IntersectionObserver === 'undefined') return;\n\n    // Use the current ref value\n    const currentRef = containerRef.current;\n    const observer = new IntersectionObserver(entries => {\n      // Cancel any pending frame to avoid race conditions\n      if (animationFrameIdRef.current) {\n        cancelAnimationFrame(animationFrameIdRef.current);\n      }\n\n      // Schedule update on next animation frame for better synchronization\n      animationFrameIdRef.current = requestAnimationFrame(() => {\n        if (entries[0]) {\n          setInView(entries[0].isIntersecting);\n        }\n      });\n    }, {\n      root: null,\n      rootMargin: '20% 0%',\n      // Larger margin to start animation earlier\n      threshold\n    });\n    observer.observe(currentRef);\n    return () => {\n      if (animationFrameIdRef.current) {\n        cancelAnimationFrame(animationFrameIdRef.current);\n      }\n      observer.unobserve(currentRef);\n    };\n  }, [threshold]);\n\n  // Update animation state when in view changes\n  useEffect(() => {\n    if (inView) {\n      controls.start('animate');\n      setIsElementInView(true);\n    } else if (!once) {\n      controls.start('initial');\n      setIsElementInView(false);\n    }\n  }, [inView, controls, once]);\n\n  // Define animation variants based on type\n  const variants = useMemo(() => {\n    // For reduced motion, use minimal animation\n    if (shouldUseSimplifiedAnimations) {\n      return {\n        initial: {\n          opacity: 0\n        },\n        animate: {\n          opacity: 1,\n          transition: {\n            duration: duration / 2,\n            delay: delay / 1000\n          }\n        }\n      };\n    }\n\n    // Base transition properties\n    const baseTransition = useSpring ? {\n      type: 'spring',\n      ...springConfig,\n      delay: delay / 1000\n    } : {\n      duration,\n      ease: easing,\n      delay: delay / 1000\n    };\n\n    // Add staggering if enabled\n    if (staggerChildren) {\n      // Configure staggering based on stagger config\n      baseTransition.staggerChildren = staggerDelay * staggerConfig.amount;\n      baseTransition.delayChildren = delay / 1000;\n\n      // Add stagger direction\n      if (staggerConfig.from === 'end') {\n        baseTransition.staggerDirection = -1;\n      } else if (staggerConfig.from === 'center') {\n        baseTransition.staggerDirection = 0;\n      } else {\n        baseTransition.staggerDirection = 1;\n      }\n    }\n\n    // Standard animations\n    switch (type) {\n      case 'fade-up':\n        return {\n          initial: {\n            y: distance,\n            opacity: 0\n          },\n          animate: {\n            y: 0,\n            opacity: 1,\n            transition: baseTransition\n          }\n        };\n      case 'fade-down':\n        return {\n          initial: {\n            y: -distance,\n            opacity: 0\n          },\n          animate: {\n            y: 0,\n            opacity: 1,\n            transition: baseTransition\n          }\n        };\n      case 'fade-left':\n        return {\n          initial: {\n            x: -distance,\n            opacity: 0\n          },\n          animate: {\n            x: 0,\n            opacity: 1,\n            transition: baseTransition\n          }\n        };\n      case 'fade-right':\n        return {\n          initial: {\n            x: distance,\n            opacity: 0\n          },\n          animate: {\n            x: 0,\n            opacity: 1,\n            transition: baseTransition\n          }\n        };\n      case 'scale':\n        return {\n          initial: {\n            scale: 0.9,\n            opacity: 0\n          },\n          animate: {\n            scale: 1,\n            opacity: 1,\n            transition: baseTransition\n          }\n        };\n      case 'fade':\n        return {\n          initial: {\n            opacity: 0\n          },\n          animate: {\n            opacity: 1,\n            transition: baseTransition\n          }\n        };\n      default:\n        return {\n          initial: {\n            opacity: 0\n          },\n          animate: {\n            opacity: 1,\n            transition: baseTransition\n          }\n        };\n    }\n  }, [type, distance, duration, delay, easing, staggerChildren, staggerDelay, staggerConfig, useSpring, springConfig, shouldUseSimplifiedAnimations]);\n\n  // Child variants for staggered animations - define before processedChildren\n  const childVariants = useMemo(() => {\n    // If custom child variants are provided, use those\n    if (staggerConfig.childVariants) {\n      return staggerConfig.childVariants;\n    }\n    if (shouldUseSimplifiedAnimations) {\n      return {\n        initial: {\n          opacity: 0\n        },\n        animate: {\n          opacity: 1,\n          transition: {\n            duration: 0.2\n          }\n        }\n      };\n    }\n\n    // Base transition for children\n    const childTransition = useSpring ? {\n      type: 'spring',\n      stiffness: 60,\n      damping: 10\n    } : {\n      duration: duration * 0.7,\n      ease: easing\n    };\n\n    // Select animation based on parent type\n    switch (type) {\n      case 'fade-up':\n        return {\n          initial: {\n            y: 20,\n            opacity: 0\n          },\n          animate: i => ({\n            y: 0,\n            opacity: 1,\n            transition: {\n              ...childTransition,\n              delay: staggerDelay * staggerConfig.amount * i\n            }\n          })\n        };\n      case 'fade-down':\n        return {\n          initial: {\n            y: -20,\n            opacity: 0\n          },\n          animate: i => ({\n            y: 0,\n            opacity: 1,\n            transition: {\n              ...childTransition,\n              delay: staggerDelay * staggerConfig.amount * i\n            }\n          })\n        };\n      case 'fade-left':\n      case 'fade-right':\n        return {\n          initial: {\n            x: type === 'fade-left' ? -10 : 10,\n            opacity: 0\n          },\n          animate: i => ({\n            x: 0,\n            opacity: 1,\n            transition: {\n              ...childTransition,\n              delay: staggerDelay * staggerConfig.amount * i\n            }\n          })\n        };\n      case 'scale':\n        return {\n          initial: {\n            scale: 0.95,\n            opacity: 0\n          },\n          animate: i => ({\n            scale: 1,\n            opacity: 1,\n            transition: {\n              ...childTransition,\n              delay: staggerDelay * staggerConfig.amount * i\n            }\n          })\n        };\n      default:\n        return {\n          initial: {\n            opacity: 0\n          },\n          animate: i => ({\n            opacity: 1,\n            transition: {\n              duration: 0.2,\n              delay: staggerDelay * staggerConfig.amount * i\n            }\n          })\n        };\n    }\n  }, [type, duration, easing, staggerDelay, staggerConfig, useSpring, shouldUseSimplifiedAnimations]);\n\n  // Enhanced character splitting functionality\n  const splitTextIntoChars = useCallback(text => {\n    return text.split('').map((char, i) => /*#__PURE__*/_jsxDEV(motion.span, {\n      className: \"stagger-item\",\n      custom: i,\n      variants: childVariants,\n      style: {\n        display: 'inline-block'\n      },\n      children: char === ' ' ? '\\u00A0' : char\n    }, `char-${i}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 7\n    }, this));\n  }, [childVariants]);\n\n  // Process children for staggered animation based on the selected mode\n  const processedChildren = useMemo(() => {\n    // No staggering or reduced motion, just return children\n    if (!staggerChildren || shouldUseSimplifiedAnimations) {\n      return children;\n    }\n    const mode = staggerConfig.mode || 'words';\n\n    // For text content with different staggering modes\n    if (typeof children === 'string') {\n      if (mode === 'chars') {\n        return splitTextIntoChars(children);\n      } else if (mode === 'words') {\n        return children.split(' ').map((word, i) => /*#__PURE__*/_jsxDEV(motion.span, {\n          className: \"stagger-item\",\n          custom: i,\n          variants: childVariants,\n          style: {\n            marginRight: '0.25em'\n          },\n          children: word\n        }, `word-${i}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 11\n        }, this));\n      } else if (mode === 'lines') {\n        // For line mode, wrap the entire text in a single motion element\n        // Line animation would typically be handled with CSS and special span wrappers\n        return /*#__PURE__*/_jsxDEV(motion.div, {\n          custom: 0,\n          variants: childVariants,\n          style: {\n            whiteSpace: 'pre-line'\n          },\n          children: children\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 11\n        }, this);\n      }\n    }\n\n    // For React elements, wrap each in motion.div\n    if (React.Children.count(children) > 0) {\n      return React.Children.map(children, (child, i) => {\n        if (! /*#__PURE__*/React.isValidElement(child)) return child;\n        return /*#__PURE__*/_jsxDEV(motion.div, {\n          custom: i,\n          variants: childVariants,\n          children: child\n        }, `stagger-child-${i}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 11\n        }, this);\n      });\n    }\n    return children;\n  }, [children, staggerChildren, staggerConfig.mode, shouldUseSimplifiedAnimations, childVariants, splitTextIntoChars]);\n\n  // Prepare style props\n  const styleProps = useMemo(() => ({\n    clipOverflow,\n    margin,\n    padding,\n    zIndex,\n    showDivider,\n    noWrapping: staggerChildren,\n    // Divider props\n    dividerWidth: dividerProps.width,\n    dividerHeight: dividerProps.height,\n    dividerBackground: dividerProps.background,\n    dividerMargin: dividerProps.margin,\n    dividerStyle: dividerProps.style\n  }), [clipOverflow, margin, padding, zIndex, showDivider, staggerChildren, dividerProps]);\n\n  // Initialize styles\n  const classes = useStyles(styleProps);\n\n  // Optimized transform template for GPU rendering\n  const optimizedTransformTemplate = useCallback((_, transform) => {\n    return `${transform} translateZ(0)`;\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    className: `${classes.revealContainer} ${className}`,\n    style: style,\n    children: [/*#__PURE__*/_jsxDEV(motion.div, {\n      className: classes.revealContent,\n      initial: \"initial\",\n      animate: controls,\n      variants: variants,\n      transformTemplate: optimizedTransformTemplate,\n      style: {\n        willChange: 'transform, opacity',\n        backfaceVisibility: 'hidden',\n        '-webkit-font-smoothing': 'antialiased'\n      },\n      children: processedChildren\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 518,\n      columnNumber: 7\n    }, this), showDivider && /*#__PURE__*/_jsxDEV(motion.div, {\n      className: `${classes.divider} ${isElementInView ? classes.dividerVisible : ''}`,\n      initial: {\n        opacity: 0\n      },\n      animate: {\n        opacity: isElementInView ? 1 : 0,\n        transition: {\n          duration: 0.5,\n          delay: delay / 1000 + 0.2\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 534,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 513,\n    columnNumber: 5\n  }, this);\n};\n_s(RevealText, \"7vWuumXlLZUi+5KC4iHTnvnKMAo=\", false, function () {\n  return [useReducedMotion, useAnimation, useStyles];\n});\n_c = RevealText;\nexport default RevealText;\nvar _c;\n$RefreshReg$(_c, \"RevealText\");","map":{"version":3,"names":["React","useRef","useEffect","useMemo","useState","useCallback","motion","useAnimation","useReducedMotion","createUseStyles","jsxDEV","_jsxDEV","useStyles","revealContainer","props","position","overflow","clipOverflow","margin","padding","zIndex","revealContent","width","visibility","staggerItem","display","whiteSpace","noWrapping","divider","dividerWidth","height","dividerHeight","background","dividerBackground","dividerMargin","showDivider","opacity","transition","dividerStyle","dividerVisible","RevealText","children","type","distance","duration","delay","easing","staggerChildren","staggerDelay","staggerConfig","mode","amount","from","childVariants","useSpring","springConfig","stiffness","damping","mass","disableOnMobile","threshold","once","dividerProps","className","style","_s","prefersReducedMotion","isElementInView","setIsElementInView","containerRef","controls","animationFrameIdRef","inView","setInView","isMobileRef","window","current","innerWidth","test","navigator","userAgent","shouldUseSimplifiedAnimations","IntersectionObserver","currentRef","observer","entries","cancelAnimationFrame","requestAnimationFrame","isIntersecting","root","rootMargin","observe","unobserve","start","variants","initial","animate","baseTransition","ease","delayChildren","staggerDirection","y","x","scale","childTransition","i","splitTextIntoChars","text","split","map","char","span","custom","fileName","_jsxFileName","lineNumber","columnNumber","processedChildren","word","marginRight","div","Children","count","child","isValidElement","styleProps","classes","optimizedTransformTemplate","_","transform","ref","transformTemplate","willChange","backfaceVisibility","_c","$RefreshReg$"],"sources":["/home/valeria/Documents/Crucible/frontend/src/components/core/effects/texteffects/RevealText.jsx"],"sourcesContent":["import React, { useRef, useEffect, useMemo, useState, useCallback } from 'react';\nimport { motion, useAnimation, useReducedMotion } from 'framer-motion';\nimport { createUseStyles } from 'react-jss';\n\n/**\n * Clean, performance-optimized styles\n */\nconst useStyles = createUseStyles({\n  revealContainer: props => ({\n    position: 'relative',\n    overflow: props.clipOverflow ? 'hidden' : 'visible',\n    // Custom spacing\n    margin: props.margin || '0 0 1.5rem 0',\n    padding: props.padding || 0,\n    zIndex: props.zIndex || 1,\n  }),\n  revealContent: {\n    position: 'relative',\n    width: '100%',\n    // Prevent fouc\n    visibility: 'visible'\n  },\n  staggerItem: {\n    display: 'inline-block',\n    // Text wrapping control\n    whiteSpace: props => props.noWrapping ? 'nowrap' : 'normal'\n  },\n  divider: props => ({\n    width: props.dividerWidth || '100px',\n    height: props.dividerHeight || '1px',\n    background: props.dividerBackground || 'linear-gradient(to right, rgba(160, 142, 97, 0), rgba(160, 142, 97, 0.6), rgba(160, 142, 97, 0))',\n    margin: props.dividerMargin || '0.8rem 0',\n    display: props.showDivider ? 'block' : 'none',\n    opacity: 0,\n    transition: 'opacity 0.5s ease',\n    ...props.dividerStyle\n  }),\n  dividerVisible: {\n    opacity: '1 !important'\n  }\n});\n\n/**\n * RevealText Component\n * \n * A streamlined reveal animation component that works perfectly alongside\n * ScrollingTextAnimation and other motion components.\n * \n * @param {Object} props - Component props\n * @param {ReactNode} props.children - Content to be revealed\n * @param {string} props.type - Animation type ('fade-up', 'fade-down', 'fade-left', 'fade-right', 'scale', 'fade')\n * @param {number} props.distance - Animation distance in pixels (for directional animations)\n * @param {number} props.duration - Animation duration in seconds\n * @param {number} props.delay - Animation delay in milliseconds\n * @param {Array|string} props.easing - Animation easing function\n * @param {boolean} props.staggerChildren - Whether to stagger child animations\n * @param {number} props.staggerDelay - Delay between staggered children in seconds\n * @param {Object} props.staggerConfig - Advanced staggering configuration\n * @param {string} props.staggerConfig.mode - Staggering mode ('default', 'words', 'lines', 'chars')\n * @param {number} props.staggerConfig.amount - Staggering amount multiplier\n * @param {string} props.staggerConfig.from - Staggering direction ('start', 'end', 'center')\n * @param {Object} props.staggerConfig.childVariants - Custom variants for children\n * @param {boolean} props.useSpring - Whether to use spring physics instead of duration/easing\n * @param {Object} props.springConfig - Spring physics configuration (if useSpring is true)\n * @param {boolean} props.disableOnMobile - Whether to disable animation on mobile devices\n * @param {number} props.threshold - Visibility threshold to trigger animation (0-1)\n * @param {boolean} props.once - Whether animation should only happen once\n * @param {boolean} props.clipOverflow - Whether to clip overflow\n * @param {string} props.margin - Container margin\n * @param {string} props.padding - Container padding\n * @param {number} props.zIndex - Container z-index\n * @param {boolean} props.showDivider - Whether to show a divider\n * @param {Object} props.dividerProps - Divider configuration\n * @param {string} props.className - Additional CSS class\n * @param {Object} props.style - Additional inline styles\n */\nconst RevealText = ({\n  children,\n  type = 'fade-up',\n  distance = 30,\n  duration = 0.8,\n  delay = 0,\n  easing = [0.25, 0.1, 0.25, 1.0], // Default cubic bezier\n  staggerChildren = false,\n  staggerDelay = 0.05,\n  staggerConfig = {\n    mode: 'words', // 'words', 'lines', 'chars'\n    amount: 1,      // Multiplier for stagger delay\n    from: 'start',  // 'start', 'end', 'center'\n    childVariants: null // Custom variants for children\n  },\n  useSpring = false, // Spring physics disabled by default\n  springConfig = {\n    stiffness: 50,\n    damping: 15,\n    mass: 0.5\n  },\n  disableOnMobile = false,\n  threshold = 0.15,\n  once = true, // Set to true by default\n  clipOverflow = true,\n  margin,\n  padding,\n  zIndex,\n  showDivider = false,\n  dividerProps = {},\n  className = '',\n  style = {}\n}) => {\n  // Detect reduced motion preference\n  const prefersReducedMotion = useReducedMotion();\n  \n  // Track if element is in view\n  const [isElementInView, setIsElementInView] = useState(false);\n  \n  // The container reference\n  const containerRef = useRef(null);\n  \n  // Animation controls\n  const controls = useAnimation();\n  \n  // Frame synchronization ref\n  const animationFrameIdRef = useRef(null);\n  \n  // Instead of using framer-motion's useInView, we'll set up our own\n  // intersection observer with frame synchronization\n  const [inView, setInView] = useState(false);\n  \n  // Detect if on mobile device\n  const isMobileRef = useRef(false);\n  \n  // Check for mobile on mount\n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n    \n    isMobileRef.current = \n      window.innerWidth <= 768 || \n      /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n  }, []);\n  \n  // Determine if we should use simplified animations\n  const shouldUseSimplifiedAnimations = useMemo(() => {\n    return prefersReducedMotion || (disableOnMobile && isMobileRef.current);\n  }, [prefersReducedMotion, disableOnMobile]);\n  \n  // Set up intersection observer with frame synchronization\n  useEffect(() => {\n    if (!containerRef.current || typeof IntersectionObserver === 'undefined') return;\n    \n    // Use the current ref value\n    const currentRef = containerRef.current;\n    \n    const observer = new IntersectionObserver(\n      entries => {\n        // Cancel any pending frame to avoid race conditions\n        if (animationFrameIdRef.current) {\n          cancelAnimationFrame(animationFrameIdRef.current);\n        }\n        \n        // Schedule update on next animation frame for better synchronization\n        animationFrameIdRef.current = requestAnimationFrame(() => {\n          if (entries[0]) {\n            setInView(entries[0].isIntersecting);\n          }\n        });\n      },\n      {\n        root: null,\n        rootMargin: '20% 0%', // Larger margin to start animation earlier\n        threshold\n      }\n    );\n    \n    observer.observe(currentRef);\n    \n    return () => {\n      if (animationFrameIdRef.current) {\n        cancelAnimationFrame(animationFrameIdRef.current);\n      }\n      observer.unobserve(currentRef);\n    };\n  }, [threshold]);\n  \n  // Update animation state when in view changes\n  useEffect(() => {\n    if (inView) {\n      controls.start('animate');\n      setIsElementInView(true);\n    } else if (!once) {\n      controls.start('initial');\n      setIsElementInView(false);\n    }\n  }, [inView, controls, once]);\n  \n  // Define animation variants based on type\n  const variants = useMemo(() => {\n    // For reduced motion, use minimal animation\n    if (shouldUseSimplifiedAnimations) {\n      return {\n        initial: { opacity: 0 },\n        animate: { \n          opacity: 1,\n          transition: { \n            duration: duration / 2,\n            delay: delay / 1000\n          }\n        }\n      };\n    }\n    \n    // Base transition properties\n    const baseTransition = useSpring \n      ? { \n          type: 'spring', \n          ...springConfig,\n          delay: delay / 1000,\n        } \n      : { \n          duration, \n          ease: easing, \n          delay: delay / 1000,\n        };\n    \n    // Add staggering if enabled\n    if (staggerChildren) {\n      // Configure staggering based on stagger config\n      baseTransition.staggerChildren = staggerDelay * staggerConfig.amount;\n      baseTransition.delayChildren = delay / 1000;\n      \n      // Add stagger direction\n      if (staggerConfig.from === 'end') {\n        baseTransition.staggerDirection = -1;\n      } else if (staggerConfig.from === 'center') {\n        baseTransition.staggerDirection = 0;\n      } else {\n        baseTransition.staggerDirection = 1;\n      }\n    }\n    \n    // Standard animations\n    switch (type) {\n      case 'fade-up':\n        return {\n          initial: { y: distance, opacity: 0 },\n          animate: {\n            y: 0,\n            opacity: 1,\n            transition: baseTransition\n          }\n        };\n        \n      case 'fade-down':\n        return {\n          initial: { y: -distance, opacity: 0 },\n          animate: {\n            y: 0,\n            opacity: 1,\n            transition: baseTransition\n          }\n        };\n        \n      case 'fade-left':\n        return {\n          initial: { x: -distance, opacity: 0 },\n          animate: {\n            x: 0,\n            opacity: 1,\n            transition: baseTransition\n          }\n        };\n        \n      case 'fade-right':\n        return {\n          initial: { x: distance, opacity: 0 },\n          animate: {\n            x: 0,\n            opacity: 1,\n            transition: baseTransition\n          }\n        };\n        \n      case 'scale':\n        return {\n          initial: { scale: 0.9, opacity: 0 },\n          animate: {\n            scale: 1,\n            opacity: 1,\n            transition: baseTransition\n          }\n        };\n        \n      case 'fade':\n        return {\n          initial: { opacity: 0 },\n          animate: {\n            opacity: 1,\n            transition: baseTransition\n          }\n        };\n        \n      default:\n        return {\n          initial: { opacity: 0 },\n          animate: {\n            opacity: 1,\n            transition: baseTransition\n          }\n        };\n    }\n  }, [\n    type, distance, duration, delay, easing, \n    staggerChildren, staggerDelay, staggerConfig, \n    useSpring, springConfig, shouldUseSimplifiedAnimations\n  ]);\n  \n  // Child variants for staggered animations - define before processedChildren\n  const childVariants = useMemo(() => {\n    // If custom child variants are provided, use those\n    if (staggerConfig.childVariants) {\n      return staggerConfig.childVariants;\n    }\n    \n    if (shouldUseSimplifiedAnimations) {\n      return {\n        initial: { opacity: 0 },\n        animate: { opacity: 1, transition: { duration: 0.2 } }\n      };\n    }\n    \n    // Base transition for children\n    const childTransition = useSpring \n      ? { type: 'spring', stiffness: 60, damping: 10 }\n      : { duration: duration * 0.7, ease: easing };\n    \n    // Select animation based on parent type\n    switch (type) {\n      case 'fade-up':\n        return {\n          initial: { y: 20, opacity: 0 },\n          animate: (i) => ({\n            y: 0,\n            opacity: 1,\n            transition: {\n              ...childTransition,\n              delay: staggerDelay * staggerConfig.amount * i\n            }\n          })\n        };\n        \n      case 'fade-down':\n        return {\n          initial: { y: -20, opacity: 0 },\n          animate: (i) => ({\n            y: 0,\n            opacity: 1,\n            transition: {\n              ...childTransition,\n              delay: staggerDelay * staggerConfig.amount * i\n            }\n          })\n        };\n        \n      case 'fade-left':\n      case 'fade-right':\n        return {\n          initial: { x: type === 'fade-left' ? -10 : 10, opacity: 0 },\n          animate: (i) => ({\n            x: 0,\n            opacity: 1,\n            transition: {\n              ...childTransition,\n              delay: staggerDelay * staggerConfig.amount * i\n            }\n          })\n        };\n        \n      case 'scale':\n        return {\n          initial: { scale: 0.95, opacity: 0 },\n          animate: (i) => ({\n            scale: 1,\n            opacity: 1,\n            transition: {\n              ...childTransition,\n              delay: staggerDelay * staggerConfig.amount * i\n            }\n          })\n        };\n        \n      default:\n        return {\n          initial: { opacity: 0 },\n          animate: (i) => ({\n            opacity: 1,\n            transition: {\n              duration: 0.2,\n              delay: staggerDelay * staggerConfig.amount * i\n            }\n          })\n        };\n    }\n  }, [\n    type, duration, easing, staggerDelay, staggerConfig, \n    useSpring, shouldUseSimplifiedAnimations\n  ]);\n  \n  // Enhanced character splitting functionality\n  const splitTextIntoChars = useCallback((text) => {\n    return text.split('').map((char, i) => (\n      <motion.span\n        key={`char-${i}`}\n        className=\"stagger-item\"\n        custom={i}\n        variants={childVariants}\n        style={{ display: 'inline-block' }}\n      >\n        {char === ' ' ? '\\u00A0' : char}\n      </motion.span>\n    ));\n  }, [childVariants]);\n  \n  // Process children for staggered animation based on the selected mode\n  const processedChildren = useMemo(() => {\n    // No staggering or reduced motion, just return children\n    if (!staggerChildren || shouldUseSimplifiedAnimations) {\n      return children;\n    }\n    \n    const mode = staggerConfig.mode || 'words';\n    \n    // For text content with different staggering modes\n    if (typeof children === 'string') {\n      if (mode === 'chars') {\n        return splitTextIntoChars(children);\n      } else if (mode === 'words') {\n        return children.split(' ').map((word, i) => (\n          <motion.span\n            key={`word-${i}`}\n            className=\"stagger-item\"\n            custom={i}\n            variants={childVariants}\n            style={{ marginRight: '0.25em' }}\n          >\n            {word}\n          </motion.span>\n        ));\n      } else if (mode === 'lines') {\n        // For line mode, wrap the entire text in a single motion element\n        // Line animation would typically be handled with CSS and special span wrappers\n        return (\n          <motion.div\n            custom={0}\n            variants={childVariants}\n            style={{ whiteSpace: 'pre-line' }}\n          >\n            {children}\n          </motion.div>\n        );\n      }\n    }\n    \n    // For React elements, wrap each in motion.div\n    if (React.Children.count(children) > 0) {\n      return React.Children.map(children, (child, i) => {\n        if (!React.isValidElement(child)) return child;\n        \n        return (\n          <motion.div\n            key={`stagger-child-${i}`}\n            custom={i}\n            variants={childVariants}\n          >\n            {child}\n          </motion.div>\n        );\n      });\n    }\n    \n    return children;\n  }, [\n    children, staggerChildren, staggerConfig.mode, \n    shouldUseSimplifiedAnimations, childVariants, splitTextIntoChars\n  ]);\n  \n  // Prepare style props\n  const styleProps = useMemo(() => ({\n    clipOverflow,\n    margin,\n    padding,\n    zIndex,\n    showDivider,\n    noWrapping: staggerChildren,\n    // Divider props\n    dividerWidth: dividerProps.width,\n    dividerHeight: dividerProps.height,\n    dividerBackground: dividerProps.background,\n    dividerMargin: dividerProps.margin,\n    dividerStyle: dividerProps.style\n  }), [\n    clipOverflow, margin, padding, zIndex, \n    showDivider, staggerChildren, dividerProps\n  ]);\n  \n  // Initialize styles\n  const classes = useStyles(styleProps);\n  \n  // Optimized transform template for GPU rendering\n  const optimizedTransformTemplate = useCallback((_, transform) => {\n    return `${transform} translateZ(0)`;\n  }, []);\n  \n  return (\n    <div \n      ref={containerRef} \n      className={`${classes.revealContainer} ${className}`}\n      style={style}\n    >\n      <motion.div\n        className={classes.revealContent}\n        initial=\"initial\"\n        animate={controls}\n        variants={variants}\n        transformTemplate={optimizedTransformTemplate}\n        style={{ \n          willChange: 'transform, opacity', \n          backfaceVisibility: 'hidden',\n          '-webkit-font-smoothing': 'antialiased'\n        }}\n      >\n        {processedChildren}\n      </motion.div>\n      \n      {showDivider && (\n        <motion.div \n          className={`${classes.divider} ${isElementInView ? classes.dividerVisible : ''}`}\n          initial={{ opacity: 0 }}\n          animate={{ \n            opacity: isElementInView ? 1 : 0,\n            transition: {\n              duration: 0.5,\n              delay: (delay / 1000) + 0.2\n            }\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default RevealText;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAChF,SAASC,MAAM,EAAEC,YAAY,EAAEC,gBAAgB,QAAQ,eAAe;AACtE,SAASC,eAAe,QAAQ,WAAW;;AAE3C;AACA;AACA;AAFA,SAAAC,MAAA,IAAAC,OAAA;AAGA,MAAMC,SAAS,GAAGH,eAAe,CAAC;EAChCI,eAAe,EAAEC,KAAK,KAAK;IACzBC,QAAQ,EAAE,UAAU;IACpBC,QAAQ,EAAEF,KAAK,CAACG,YAAY,GAAG,QAAQ,GAAG,SAAS;IACnD;IACAC,MAAM,EAAEJ,KAAK,CAACI,MAAM,IAAI,cAAc;IACtCC,OAAO,EAAEL,KAAK,CAACK,OAAO,IAAI,CAAC;IAC3BC,MAAM,EAAEN,KAAK,CAACM,MAAM,IAAI;EAC1B,CAAC,CAAC;EACFC,aAAa,EAAE;IACbN,QAAQ,EAAE,UAAU;IACpBO,KAAK,EAAE,MAAM;IACb;IACAC,UAAU,EAAE;EACd,CAAC;EACDC,WAAW,EAAE;IACXC,OAAO,EAAE,cAAc;IACvB;IACAC,UAAU,EAAEZ,KAAK,IAAIA,KAAK,CAACa,UAAU,GAAG,QAAQ,GAAG;EACrD,CAAC;EACDC,OAAO,EAAEd,KAAK,KAAK;IACjBQ,KAAK,EAAER,KAAK,CAACe,YAAY,IAAI,OAAO;IACpCC,MAAM,EAAEhB,KAAK,CAACiB,aAAa,IAAI,KAAK;IACpCC,UAAU,EAAElB,KAAK,CAACmB,iBAAiB,IAAI,kGAAkG;IACzIf,MAAM,EAAEJ,KAAK,CAACoB,aAAa,IAAI,UAAU;IACzCT,OAAO,EAAEX,KAAK,CAACqB,WAAW,GAAG,OAAO,GAAG,MAAM;IAC7CC,OAAO,EAAE,CAAC;IACVC,UAAU,EAAE,mBAAmB;IAC/B,GAAGvB,KAAK,CAACwB;EACX,CAAC,CAAC;EACFC,cAAc,EAAE;IACdH,OAAO,EAAE;EACX;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMI,UAAU,GAAGA,CAAC;EAClBC,QAAQ;EACRC,IAAI,GAAG,SAAS;EAChBC,QAAQ,GAAG,EAAE;EACbC,QAAQ,GAAG,GAAG;EACdC,KAAK,GAAG,CAAC;EACTC,MAAM,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC;EAAE;EACjCC,eAAe,GAAG,KAAK;EACvBC,YAAY,GAAG,IAAI;EACnBC,aAAa,GAAG;IACdC,IAAI,EAAE,OAAO;IAAE;IACfC,MAAM,EAAE,CAAC;IAAO;IAChBC,IAAI,EAAE,OAAO;IAAG;IAChBC,aAAa,EAAE,IAAI,CAAC;EACtB,CAAC;EACDC,SAAS,GAAG,KAAK;EAAE;EACnBC,YAAY,GAAG;IACbC,SAAS,EAAE,EAAE;IACbC,OAAO,EAAE,EAAE;IACXC,IAAI,EAAE;EACR,CAAC;EACDC,eAAe,GAAG,KAAK;EACvBC,SAAS,GAAG,IAAI;EAChBC,IAAI,GAAG,IAAI;EAAE;EACb5C,YAAY,GAAG,IAAI;EACnBC,MAAM;EACNC,OAAO;EACPC,MAAM;EACNe,WAAW,GAAG,KAAK;EACnB2B,YAAY,GAAG,CAAC,CAAC;EACjBC,SAAS,GAAG,EAAE;EACdC,KAAK,GAAG,CAAC;AACX,CAAC,KAAK;EAAAC,EAAA;EACJ;EACA,MAAMC,oBAAoB,GAAG1D,gBAAgB,CAAC,CAAC;;EAE/C;EACA,MAAM,CAAC2D,eAAe,EAAEC,kBAAkB,CAAC,GAAGhE,QAAQ,CAAC,KAAK,CAAC;;EAE7D;EACA,MAAMiE,YAAY,GAAGpE,MAAM,CAAC,IAAI,CAAC;;EAEjC;EACA,MAAMqE,QAAQ,GAAG/D,YAAY,CAAC,CAAC;;EAE/B;EACA,MAAMgE,mBAAmB,GAAGtE,MAAM,CAAC,IAAI,CAAC;;EAExC;EACA;EACA,MAAM,CAACuE,MAAM,EAAEC,SAAS,CAAC,GAAGrE,QAAQ,CAAC,KAAK,CAAC;;EAE3C;EACA,MAAMsE,WAAW,GAAGzE,MAAM,CAAC,KAAK,CAAC;;EAEjC;EACAC,SAAS,CAAC,MAAM;IACd,IAAI,OAAOyE,MAAM,KAAK,WAAW,EAAE;IAEnCD,WAAW,CAACE,OAAO,GACjBD,MAAM,CAACE,UAAU,IAAI,GAAG,IACxB,gEAAgE,CAACC,IAAI,CAACC,SAAS,CAACC,SAAS,CAAC;EAC9F,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,6BAA6B,GAAG9E,OAAO,CAAC,MAAM;IAClD,OAAO+D,oBAAoB,IAAKP,eAAe,IAAIe,WAAW,CAACE,OAAQ;EACzE,CAAC,EAAE,CAACV,oBAAoB,EAAEP,eAAe,CAAC,CAAC;;EAE3C;EACAzD,SAAS,CAAC,MAAM;IACd,IAAI,CAACmE,YAAY,CAACO,OAAO,IAAI,OAAOM,oBAAoB,KAAK,WAAW,EAAE;;IAE1E;IACA,MAAMC,UAAU,GAAGd,YAAY,CAACO,OAAO;IAEvC,MAAMQ,QAAQ,GAAG,IAAIF,oBAAoB,CACvCG,OAAO,IAAI;MACT;MACA,IAAId,mBAAmB,CAACK,OAAO,EAAE;QAC/BU,oBAAoB,CAACf,mBAAmB,CAACK,OAAO,CAAC;MACnD;;MAEA;MACAL,mBAAmB,CAACK,OAAO,GAAGW,qBAAqB,CAAC,MAAM;QACxD,IAAIF,OAAO,CAAC,CAAC,CAAC,EAAE;UACdZ,SAAS,CAACY,OAAO,CAAC,CAAC,CAAC,CAACG,cAAc,CAAC;QACtC;MACF,CAAC,CAAC;IACJ,CAAC,EACD;MACEC,IAAI,EAAE,IAAI;MACVC,UAAU,EAAE,QAAQ;MAAE;MACtB9B;IACF,CACF,CAAC;IAEDwB,QAAQ,CAACO,OAAO,CAACR,UAAU,CAAC;IAE5B,OAAO,MAAM;MACX,IAAIZ,mBAAmB,CAACK,OAAO,EAAE;QAC/BU,oBAAoB,CAACf,mBAAmB,CAACK,OAAO,CAAC;MACnD;MACAQ,QAAQ,CAACQ,SAAS,CAACT,UAAU,CAAC;IAChC,CAAC;EACH,CAAC,EAAE,CAACvB,SAAS,CAAC,CAAC;;EAEf;EACA1D,SAAS,CAAC,MAAM;IACd,IAAIsE,MAAM,EAAE;MACVF,QAAQ,CAACuB,KAAK,CAAC,SAAS,CAAC;MACzBzB,kBAAkB,CAAC,IAAI,CAAC;IAC1B,CAAC,MAAM,IAAI,CAACP,IAAI,EAAE;MAChBS,QAAQ,CAACuB,KAAK,CAAC,SAAS,CAAC;MACzBzB,kBAAkB,CAAC,KAAK,CAAC;IAC3B;EACF,CAAC,EAAE,CAACI,MAAM,EAAEF,QAAQ,EAAET,IAAI,CAAC,CAAC;;EAE5B;EACA,MAAMiC,QAAQ,GAAG3F,OAAO,CAAC,MAAM;IAC7B;IACA,IAAI8E,6BAA6B,EAAE;MACjC,OAAO;QACLc,OAAO,EAAE;UAAE3D,OAAO,EAAE;QAAE,CAAC;QACvB4D,OAAO,EAAE;UACP5D,OAAO,EAAE,CAAC;UACVC,UAAU,EAAE;YACVO,QAAQ,EAAEA,QAAQ,GAAG,CAAC;YACtBC,KAAK,EAAEA,KAAK,GAAG;UACjB;QACF;MACF,CAAC;IACH;;IAEA;IACA,MAAMoD,cAAc,GAAG3C,SAAS,GAC5B;MACEZ,IAAI,EAAE,QAAQ;MACd,GAAGa,YAAY;MACfV,KAAK,EAAEA,KAAK,GAAG;IACjB,CAAC,GACD;MACED,QAAQ;MACRsD,IAAI,EAAEpD,MAAM;MACZD,KAAK,EAAEA,KAAK,GAAG;IACjB,CAAC;;IAEL;IACA,IAAIE,eAAe,EAAE;MACnB;MACAkD,cAAc,CAAClD,eAAe,GAAGC,YAAY,GAAGC,aAAa,CAACE,MAAM;MACpE8C,cAAc,CAACE,aAAa,GAAGtD,KAAK,GAAG,IAAI;;MAE3C;MACA,IAAII,aAAa,CAACG,IAAI,KAAK,KAAK,EAAE;QAChC6C,cAAc,CAACG,gBAAgB,GAAG,CAAC,CAAC;MACtC,CAAC,MAAM,IAAInD,aAAa,CAACG,IAAI,KAAK,QAAQ,EAAE;QAC1C6C,cAAc,CAACG,gBAAgB,GAAG,CAAC;MACrC,CAAC,MAAM;QACLH,cAAc,CAACG,gBAAgB,GAAG,CAAC;MACrC;IACF;;IAEA;IACA,QAAQ1D,IAAI;MACV,KAAK,SAAS;QACZ,OAAO;UACLqD,OAAO,EAAE;YAAEM,CAAC,EAAE1D,QAAQ;YAAEP,OAAO,EAAE;UAAE,CAAC;UACpC4D,OAAO,EAAE;YACPK,CAAC,EAAE,CAAC;YACJjE,OAAO,EAAE,CAAC;YACVC,UAAU,EAAE4D;UACd;QACF,CAAC;MAEH,KAAK,WAAW;QACd,OAAO;UACLF,OAAO,EAAE;YAAEM,CAAC,EAAE,CAAC1D,QAAQ;YAAEP,OAAO,EAAE;UAAE,CAAC;UACrC4D,OAAO,EAAE;YACPK,CAAC,EAAE,CAAC;YACJjE,OAAO,EAAE,CAAC;YACVC,UAAU,EAAE4D;UACd;QACF,CAAC;MAEH,KAAK,WAAW;QACd,OAAO;UACLF,OAAO,EAAE;YAAEO,CAAC,EAAE,CAAC3D,QAAQ;YAAEP,OAAO,EAAE;UAAE,CAAC;UACrC4D,OAAO,EAAE;YACPM,CAAC,EAAE,CAAC;YACJlE,OAAO,EAAE,CAAC;YACVC,UAAU,EAAE4D;UACd;QACF,CAAC;MAEH,KAAK,YAAY;QACf,OAAO;UACLF,OAAO,EAAE;YAAEO,CAAC,EAAE3D,QAAQ;YAAEP,OAAO,EAAE;UAAE,CAAC;UACpC4D,OAAO,EAAE;YACPM,CAAC,EAAE,CAAC;YACJlE,OAAO,EAAE,CAAC;YACVC,UAAU,EAAE4D;UACd;QACF,CAAC;MAEH,KAAK,OAAO;QACV,OAAO;UACLF,OAAO,EAAE;YAAEQ,KAAK,EAAE,GAAG;YAAEnE,OAAO,EAAE;UAAE,CAAC;UACnC4D,OAAO,EAAE;YACPO,KAAK,EAAE,CAAC;YACRnE,OAAO,EAAE,CAAC;YACVC,UAAU,EAAE4D;UACd;QACF,CAAC;MAEH,KAAK,MAAM;QACT,OAAO;UACLF,OAAO,EAAE;YAAE3D,OAAO,EAAE;UAAE,CAAC;UACvB4D,OAAO,EAAE;YACP5D,OAAO,EAAE,CAAC;YACVC,UAAU,EAAE4D;UACd;QACF,CAAC;MAEH;QACE,OAAO;UACLF,OAAO,EAAE;YAAE3D,OAAO,EAAE;UAAE,CAAC;UACvB4D,OAAO,EAAE;YACP5D,OAAO,EAAE,CAAC;YACVC,UAAU,EAAE4D;UACd;QACF,CAAC;IACL;EACF,CAAC,EAAE,CACDvD,IAAI,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,MAAM,EACvCC,eAAe,EAAEC,YAAY,EAAEC,aAAa,EAC5CK,SAAS,EAAEC,YAAY,EAAE0B,6BAA6B,CACvD,CAAC;;EAEF;EACA,MAAM5B,aAAa,GAAGlD,OAAO,CAAC,MAAM;IAClC;IACA,IAAI8C,aAAa,CAACI,aAAa,EAAE;MAC/B,OAAOJ,aAAa,CAACI,aAAa;IACpC;IAEA,IAAI4B,6BAA6B,EAAE;MACjC,OAAO;QACLc,OAAO,EAAE;UAAE3D,OAAO,EAAE;QAAE,CAAC;QACvB4D,OAAO,EAAE;UAAE5D,OAAO,EAAE,CAAC;UAAEC,UAAU,EAAE;YAAEO,QAAQ,EAAE;UAAI;QAAE;MACvD,CAAC;IACH;;IAEA;IACA,MAAM4D,eAAe,GAAGlD,SAAS,GAC7B;MAAEZ,IAAI,EAAE,QAAQ;MAAEc,SAAS,EAAE,EAAE;MAAEC,OAAO,EAAE;IAAG,CAAC,GAC9C;MAAEb,QAAQ,EAAEA,QAAQ,GAAG,GAAG;MAAEsD,IAAI,EAAEpD;IAAO,CAAC;;IAE9C;IACA,QAAQJ,IAAI;MACV,KAAK,SAAS;QACZ,OAAO;UACLqD,OAAO,EAAE;YAAEM,CAAC,EAAE,EAAE;YAAEjE,OAAO,EAAE;UAAE,CAAC;UAC9B4D,OAAO,EAAGS,CAAC,KAAM;YACfJ,CAAC,EAAE,CAAC;YACJjE,OAAO,EAAE,CAAC;YACVC,UAAU,EAAE;cACV,GAAGmE,eAAe;cAClB3D,KAAK,EAAEG,YAAY,GAAGC,aAAa,CAACE,MAAM,GAAGsD;YAC/C;UACF,CAAC;QACH,CAAC;MAEH,KAAK,WAAW;QACd,OAAO;UACLV,OAAO,EAAE;YAAEM,CAAC,EAAE,CAAC,EAAE;YAAEjE,OAAO,EAAE;UAAE,CAAC;UAC/B4D,OAAO,EAAGS,CAAC,KAAM;YACfJ,CAAC,EAAE,CAAC;YACJjE,OAAO,EAAE,CAAC;YACVC,UAAU,EAAE;cACV,GAAGmE,eAAe;cAClB3D,KAAK,EAAEG,YAAY,GAAGC,aAAa,CAACE,MAAM,GAAGsD;YAC/C;UACF,CAAC;QACH,CAAC;MAEH,KAAK,WAAW;MAChB,KAAK,YAAY;QACf,OAAO;UACLV,OAAO,EAAE;YAAEO,CAAC,EAAE5D,IAAI,KAAK,WAAW,GAAG,CAAC,EAAE,GAAG,EAAE;YAAEN,OAAO,EAAE;UAAE,CAAC;UAC3D4D,OAAO,EAAGS,CAAC,KAAM;YACfH,CAAC,EAAE,CAAC;YACJlE,OAAO,EAAE,CAAC;YACVC,UAAU,EAAE;cACV,GAAGmE,eAAe;cAClB3D,KAAK,EAAEG,YAAY,GAAGC,aAAa,CAACE,MAAM,GAAGsD;YAC/C;UACF,CAAC;QACH,CAAC;MAEH,KAAK,OAAO;QACV,OAAO;UACLV,OAAO,EAAE;YAAEQ,KAAK,EAAE,IAAI;YAAEnE,OAAO,EAAE;UAAE,CAAC;UACpC4D,OAAO,EAAGS,CAAC,KAAM;YACfF,KAAK,EAAE,CAAC;YACRnE,OAAO,EAAE,CAAC;YACVC,UAAU,EAAE;cACV,GAAGmE,eAAe;cAClB3D,KAAK,EAAEG,YAAY,GAAGC,aAAa,CAACE,MAAM,GAAGsD;YAC/C;UACF,CAAC;QACH,CAAC;MAEH;QACE,OAAO;UACLV,OAAO,EAAE;YAAE3D,OAAO,EAAE;UAAE,CAAC;UACvB4D,OAAO,EAAGS,CAAC,KAAM;YACfrE,OAAO,EAAE,CAAC;YACVC,UAAU,EAAE;cACVO,QAAQ,EAAE,GAAG;cACbC,KAAK,EAAEG,YAAY,GAAGC,aAAa,CAACE,MAAM,GAAGsD;YAC/C;UACF,CAAC;QACH,CAAC;IACL;EACF,CAAC,EAAE,CACD/D,IAAI,EAAEE,QAAQ,EAAEE,MAAM,EAAEE,YAAY,EAAEC,aAAa,EACnDK,SAAS,EAAE2B,6BAA6B,CACzC,CAAC;;EAEF;EACA,MAAMyB,kBAAkB,GAAGrG,WAAW,CAAEsG,IAAI,IAAK;IAC/C,OAAOA,IAAI,CAACC,KAAK,CAAC,EAAE,CAAC,CAACC,GAAG,CAAC,CAACC,IAAI,EAAEL,CAAC,kBAChC9F,OAAA,CAACL,MAAM,CAACyG,IAAI;MAEVhD,SAAS,EAAC,cAAc;MACxBiD,MAAM,EAAEP,CAAE;MACVX,QAAQ,EAAEzC,aAAc;MACxBW,KAAK,EAAE;QAAEvC,OAAO,EAAE;MAAe,CAAE;MAAAgB,QAAA,EAElCqE,IAAI,KAAK,GAAG,GAAG,QAAQ,GAAGA;IAAI,GAN1B,QAAQL,CAAC,EAAE;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAOL,CACd,CAAC;EACJ,CAAC,EAAE,CAAC/D,aAAa,CAAC,CAAC;;EAEnB;EACA,MAAMgE,iBAAiB,GAAGlH,OAAO,CAAC,MAAM;IACtC;IACA,IAAI,CAAC4C,eAAe,IAAIkC,6BAA6B,EAAE;MACrD,OAAOxC,QAAQ;IACjB;IAEA,MAAMS,IAAI,GAAGD,aAAa,CAACC,IAAI,IAAI,OAAO;;IAE1C;IACA,IAAI,OAAOT,QAAQ,KAAK,QAAQ,EAAE;MAChC,IAAIS,IAAI,KAAK,OAAO,EAAE;QACpB,OAAOwD,kBAAkB,CAACjE,QAAQ,CAAC;MACrC,CAAC,MAAM,IAAIS,IAAI,KAAK,OAAO,EAAE;QAC3B,OAAOT,QAAQ,CAACmE,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAACS,IAAI,EAAEb,CAAC,kBACrC9F,OAAA,CAACL,MAAM,CAACyG,IAAI;UAEVhD,SAAS,EAAC,cAAc;UACxBiD,MAAM,EAAEP,CAAE;UACVX,QAAQ,EAAEzC,aAAc;UACxBW,KAAK,EAAE;YAAEuD,WAAW,EAAE;UAAS,CAAE;UAAA9E,QAAA,EAEhC6E;QAAI,GANA,QAAQb,CAAC,EAAE;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAOL,CACd,CAAC;MACJ,CAAC,MAAM,IAAIlE,IAAI,KAAK,OAAO,EAAE;QAC3B;QACA;QACA,oBACEvC,OAAA,CAACL,MAAM,CAACkH,GAAG;UACTR,MAAM,EAAE,CAAE;UACVlB,QAAQ,EAAEzC,aAAc;UACxBW,KAAK,EAAE;YAAEtC,UAAU,EAAE;UAAW,CAAE;UAAAe,QAAA,EAEjCA;QAAQ;UAAAwE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC;MAEjB;IACF;;IAEA;IACA,IAAIpH,KAAK,CAACyH,QAAQ,CAACC,KAAK,CAACjF,QAAQ,CAAC,GAAG,CAAC,EAAE;MACtC,OAAOzC,KAAK,CAACyH,QAAQ,CAACZ,GAAG,CAACpE,QAAQ,EAAE,CAACkF,KAAK,EAAElB,CAAC,KAAK;QAChD,IAAI,eAACzG,KAAK,CAAC4H,cAAc,CAACD,KAAK,CAAC,EAAE,OAAOA,KAAK;QAE9C,oBACEhH,OAAA,CAACL,MAAM,CAACkH,GAAG;UAETR,MAAM,EAAEP,CAAE;UACVX,QAAQ,EAAEzC,aAAc;UAAAZ,QAAA,EAEvBkF;QAAK,GAJD,iBAAiBlB,CAAC,EAAE;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAKf,CAAC;MAEjB,CAAC,CAAC;IACJ;IAEA,OAAO3E,QAAQ;EACjB,CAAC,EAAE,CACDA,QAAQ,EAAEM,eAAe,EAAEE,aAAa,CAACC,IAAI,EAC7C+B,6BAA6B,EAAE5B,aAAa,EAAEqD,kBAAkB,CACjE,CAAC;;EAEF;EACA,MAAMmB,UAAU,GAAG1H,OAAO,CAAC,OAAO;IAChCc,YAAY;IACZC,MAAM;IACNC,OAAO;IACPC,MAAM;IACNe,WAAW;IACXR,UAAU,EAAEoB,eAAe;IAC3B;IACAlB,YAAY,EAAEiC,YAAY,CAACxC,KAAK;IAChCS,aAAa,EAAE+B,YAAY,CAAChC,MAAM;IAClCG,iBAAiB,EAAE6B,YAAY,CAAC9B,UAAU;IAC1CE,aAAa,EAAE4B,YAAY,CAAC5C,MAAM;IAClCoB,YAAY,EAAEwB,YAAY,CAACE;EAC7B,CAAC,CAAC,EAAE,CACF/C,YAAY,EAAEC,MAAM,EAAEC,OAAO,EAAEC,MAAM,EACrCe,WAAW,EAAEY,eAAe,EAAEe,YAAY,CAC3C,CAAC;;EAEF;EACA,MAAMgE,OAAO,GAAGlH,SAAS,CAACiH,UAAU,CAAC;;EAErC;EACA,MAAME,0BAA0B,GAAG1H,WAAW,CAAC,CAAC2H,CAAC,EAAEC,SAAS,KAAK;IAC/D,OAAO,GAAGA,SAAS,gBAAgB;EACrC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEtH,OAAA;IACEuH,GAAG,EAAE7D,YAAa;IAClBN,SAAS,EAAE,GAAG+D,OAAO,CAACjH,eAAe,IAAIkD,SAAS,EAAG;IACrDC,KAAK,EAAEA,KAAM;IAAAvB,QAAA,gBAEb9B,OAAA,CAACL,MAAM,CAACkH,GAAG;MACTzD,SAAS,EAAE+D,OAAO,CAACzG,aAAc;MACjC0E,OAAO,EAAC,SAAS;MACjBC,OAAO,EAAE1B,QAAS;MAClBwB,QAAQ,EAAEA,QAAS;MACnBqC,iBAAiB,EAAEJ,0BAA2B;MAC9C/D,KAAK,EAAE;QACLoE,UAAU,EAAE,oBAAoB;QAChCC,kBAAkB,EAAE,QAAQ;QAC5B,wBAAwB,EAAE;MAC5B,CAAE;MAAA5F,QAAA,EAED4E;IAAiB;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC,EAEZjF,WAAW,iBACVxB,OAAA,CAACL,MAAM,CAACkH,GAAG;MACTzD,SAAS,EAAE,GAAG+D,OAAO,CAAClG,OAAO,IAAIuC,eAAe,GAAG2D,OAAO,CAACvF,cAAc,GAAG,EAAE,EAAG;MACjFwD,OAAO,EAAE;QAAE3D,OAAO,EAAE;MAAE,CAAE;MACxB4D,OAAO,EAAE;QACP5D,OAAO,EAAE+B,eAAe,GAAG,CAAC,GAAG,CAAC;QAChC9B,UAAU,EAAE;UACVO,QAAQ,EAAE,GAAG;UACbC,KAAK,EAAGA,KAAK,GAAG,IAAI,GAAI;QAC1B;MACF;IAAE;MAAAoE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACF;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACnD,EAAA,CAvdIzB,UAAU;EAAA,QAkCehC,gBAAgB,EAS5BD,YAAY,EAiYbK,SAAS;AAAA;AAAA0H,EAAA,GA5arB9F,UAAU;AAydhB,eAAeA,UAAU;AAAC,IAAA8F,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}