{"ast":null,"code":"var _jsxFileName = \"/home/valeria/Documents/Crucible/frontend/src/components/core/Background.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState, useCallback, useMemo } from 'react';\nimport { createUseStyles } from 'react-jss';\n\n/**\n * Enhanced Stellar Background Component\n * \n * Creates a performant, butter-smooth animated starry background with subtle horizontal\n * motion, occasional twinkling stars, and rare burst effects.\n * \n * Features:\n * - Hardware-accelerated rendering with requestAnimationFrame\n * - Adaptive performance based on device capabilities\n * - Multiple parallax layers for depth perception\n * - Smooth motion with cubic-bezier easing\n * - Rare burst effects inspired by MeteorShower component\n * - Dynamic star density based on screen size\n * - Optimized for zero jitter or performance issues\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = createUseStyles({\n  backgroundContainer: {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n    zIndex: 1,\n    pointerEvents: 'none',\n    overflow: 'hidden',\n    backgroundColor: '#000000',\n    // Hardware acceleration\n    transform: 'translateZ(0)',\n    backfaceVisibility: 'hidden',\n    willChange: 'transform'\n  },\n  backgroundCanvas: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n    zIndex: 1\n  }\n});\n\n// Configurable parameters for easy tweaking\nconst CONFIG = {\n  // Star configuration\n  starCount: {\n    base: 80,\n    perPixelFactor: 0.00005\n  },\n  // Base count + dynamic based on screen size\n  starSizes: [{\n    weight: 60,\n    min: 0.5,\n    max: 1.5\n  },\n  // 60% small stars\n  {\n    weight: 30,\n    min: 1.5,\n    max: 2.5\n  },\n  // 30% medium stars\n  {\n    weight: 10,\n    min: 2.5,\n    max: 3.5\n  } // 10% large stars\n  ],\n  starColor: {\n    r: 207,\n    g: 185,\n    b: 130\n  },\n  // Base gold color\n\n  // Motion configuration\n  motionLayers: [{\n    depth: 0.4,\n    speed: 0.012,\n    opacity: {\n      min: 0.3,\n      max: 0.5\n    }\n  },\n  // Far layer (slowest)\n  {\n    depth: 0.7,\n    speed: 0.018,\n    opacity: {\n      min: 0.2,\n      max: 0.4\n    }\n  },\n  // Mid layer\n  {\n    depth: 1.0,\n    speed: 0.025,\n    opacity: {\n      min: 0.1,\n      max: 0.25\n    }\n  } // Near layer (fastest)\n  ],\n  // Twinkle effect\n  twinkle: {\n    probability: 0.0005,\n    // Chance per frame for a star to start twinkling\n    duration: {\n      min: 2000,\n      max: 4000\n    },\n    sizeIncrease: 1.5,\n    // Max size multiplier\n    opacityIncrease: 1.8 // Max opacity multiplier\n  },\n  // Burst effect\n  burst: {\n    probability: 0.00007,\n    // Very rare bursts\n    particleCount: {\n      min: 6,\n      max: 12\n    },\n    particleSize: {\n      min: 0.8,\n      max: 1.5\n    },\n    duration: {\n      min: 800,\n      max: 1200\n    },\n    expansionRate: {\n      min: 0.2,\n      max: 0.4\n    },\n    fadeRate: {\n      min: 0.01,\n      max: 0.02\n    }\n  },\n  // Performance\n  maxFPS: 60,\n  adaptiveQuality: true,\n  respectReducedMotion: true,\n  // Constellation definitions - subtle connecting lines\n  constellations: [{\n    name: 'Ursa Major',\n    vertices: [{\n      x: 0.2,\n      y: 0.3\n    }, {\n      x: 0.25,\n      y: 0.28\n    }, {\n      x: 0.3,\n      y: 0.25\n    }, {\n      x: 0.35,\n      y: 0.23\n    }, {\n      x: 0.37,\n      y: 0.18\n    }, {\n      x: 0.33,\n      y: 0.15\n    }, {\n      x: 0.28,\n      y: 0.15\n    }],\n    edges: [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\n  }, {\n    name: 'Cassiopeia',\n    vertices: [{\n      x: 0.7,\n      y: 0.15\n    }, {\n      x: 0.75,\n      y: 0.2\n    }, {\n      x: 0.8,\n      y: 0.15\n    }, {\n      x: 0.85,\n      y: 0.2\n    }, {\n      x: 0.9,\n      y: 0.15\n    }],\n    edges: [[0, 1], [1, 2], [2, 3], [3, 4]]\n  }, {\n    name: 'Lyra',\n    vertices: [{\n      x: 0.15,\n      y: 0.7\n    }, {\n      x: 0.2,\n      y: 0.72\n    }, {\n      x: 0.18,\n      y: 0.75\n    }, {\n      x: 0.16,\n      y: 0.73\n    }],\n    edges: [[0, 1], [1, 2], [2, 3], [3, 0]]\n  }]\n};\n\n/**\n * StellarBackground Component\n * \n * @param {Object} props - Component props\n * @param {Object} props.cursorPosition - Current cursor coordinates\n * @param {Function} props.setCursorPosition - Function to update cursor position\n * @param {number} props.motionIntensity - Controls the intensity of the stellar motion (0-1)\n * @param {number} props.starDensity - Controls the density of stars (0-1)\n * @param {boolean} props.enableBursts - Toggle burst effects\n * @param {boolean} props.showConstellations - Toggle constellation visibility\n */\nconst StellarBackground = ({\n  cursorPosition = {\n    x: 0,\n    y: 0\n  },\n  setCursorPosition = () => {},\n  motionIntensity = 1.0,\n  starDensity = 1.0,\n  enableBursts = true,\n  showConstellations = true\n}) => {\n  _s();\n  // Initialize styles\n  const classes = useStyles();\n\n  // Multiple canvas layers for better performance\n  const baseCanvasRef = useRef(null); // Main starfield layer\n  const burstCanvasRef = useRef(null); // Burst effects layer\n  const interactCanvasRef = useRef(null); // Cursor interactions layer\n\n  // Animation state refs\n  const starsRef = useRef([]);\n  const burstParticlesRef = useRef([]);\n  const constellationsRef = useRef([]);\n  const animationFrameRef = useRef(null);\n  const lastTimestampRef = useRef(0);\n  const fpsIntervalRef = useRef(1000 / CONFIG.maxFPS);\n\n  // Performance tracking\n  const fpsCounterRef = useRef({\n    frames: 0,\n    lastCheck: 0,\n    value: 0\n  });\n  const qualityFactorRef = useRef(1.0);\n\n  // Detect reduced motion preference\n  const [prefersReducedMotion, setPrefersReducedMotion] = useState(false);\n  const [dimensions, setDimensions] = useState({\n    width: 0,\n    height: 0,\n    pixelRatio: 1\n  });\n\n  // Initialize canvases and dimensions\n  useEffect(() => {\n    // Get dimensions\n    const updateDimensions = () => {\n      const width = window.innerWidth;\n      const height = window.innerHeight;\n      const pixelRatio = window.devicePixelRatio || 1;\n      setDimensions({\n        width,\n        height,\n        pixelRatio\n      });\n\n      // Update canvas sizes\n      [baseCanvasRef, burstCanvasRef, interactCanvasRef].forEach(canvasRef => {\n        if (canvasRef.current) {\n          const canvas = canvasRef.current;\n          canvas.width = width * pixelRatio;\n          canvas.height = height * pixelRatio;\n          canvas.style.width = `${width}px`;\n          canvas.style.height = `${height}px`;\n\n          // Scale context for high-DPI displays\n          const ctx = canvas.getContext('2d');\n          ctx.scale(pixelRatio, pixelRatio);\n        }\n      });\n\n      // If stars already initialized, reset their positions based on new dimensions\n      if (starsRef.current.length > 0) {\n        starsRef.current.forEach(star => {\n          star.x = Math.random() * width;\n          star.y = Math.random() * height;\n          star.originX = star.x;\n        });\n      }\n\n      // Reposition constellations\n      initializeConstellations(width, height);\n    };\n\n    // Check for reduced motion preference\n    const motionQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\n    setPrefersReducedMotion(motionQuery.matches);\n    const handleMotionChange = e => {\n      setPrefersReducedMotion(e.matches);\n    };\n    motionQuery.addEventListener('change', handleMotionChange);\n    window.addEventListener('resize', updateDimensions);\n\n    // Initial setup\n    updateDimensions();\n\n    // Cleanup\n    return () => {\n      motionQuery.removeEventListener('change', handleMotionChange);\n      window.addEventListener('resize', updateDimensions);\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, []);\n\n  // Initialize stars based on screen size and config\n  useEffect(() => {\n    if (!dimensions.width || !dimensions.height) return;\n\n    // Calculate actual star count based on screen size and density\n    const baseCount = CONFIG.starCount.base;\n    const pixelBasedCount = dimensions.width * dimensions.height * CONFIG.starCount.perPixelFactor;\n    const totalStars = Math.floor((baseCount + pixelBasedCount) * starDensity);\n\n    // Create stars array with layer distribution\n    starsRef.current = [];\n\n    // Helper function to get a random size based on the weighted distribution\n    const getRandomSize = () => {\n      const rand = Math.random() * 100;\n      let cumulativeWeight = 0;\n      for (const sizeOption of CONFIG.starSizes) {\n        cumulativeWeight += sizeOption.weight;\n        if (rand <= cumulativeWeight) {\n          return Math.random() * (sizeOption.max - sizeOption.min) + sizeOption.min;\n        }\n      }\n      return CONFIG.starSizes[0].min; // Fallback\n    };\n\n    // Distribute stars among layers\n    CONFIG.motionLayers.forEach((layer, layerIndex) => {\n      // Calculate stars for this layer (roughly equal distribution)\n      const layerStarCount = Math.floor(totalStars / CONFIG.motionLayers.length);\n      for (let i = 0; i < layerStarCount; i++) {\n        const size = getRandomSize();\n        const opacity = Math.random() * (layer.opacity.max - layer.opacity.min) + layer.opacity.min;\n        starsRef.current.push({\n          x: Math.random() * dimensions.width,\n          y: Math.random() * dimensions.height,\n          originX: Math.random() * dimensions.width,\n          // Starting horizontal position\n          size,\n          baseSize: size,\n          opacity,\n          baseOpacity: opacity,\n          layer: layerIndex,\n          isTwinkling: false,\n          twinkleProgress: 0,\n          twinkleDuration: Math.random() * (CONFIG.twinkle.duration.max - CONFIG.twinkle.duration.min) + CONFIG.twinkle.duration.min\n        });\n      }\n    });\n\n    // Initialize constellations\n    initializeConstellations(dimensions.width, dimensions.height);\n  }, [dimensions, starDensity]);\n\n  // Initialize constellation vertices and edges\n  const initializeConstellations = useCallback((width, height) => {\n    if (!showConstellations) {\n      constellationsRef.current = [];\n      return;\n    }\n    constellationsRef.current = CONFIG.constellations.map(constellation => {\n      const vertices = constellation.vertices.map(vertex => ({\n        x: vertex.x * width,\n        y: vertex.y * height,\n        size: 2.2,\n        // Slightly larger than regular stars\n        baseSize: 2.2,\n        opacity: 0.35,\n        baseOpacity: 0.35,\n        isTwinkling: false,\n        twinkleProgress: 0,\n        twinkleDuration: Math.random() * 5000 + 3000\n      }));\n      return {\n        name: constellation.name,\n        vertices,\n        edges: constellation.edges\n      };\n    });\n  }, [showConstellations]);\n\n  // Create a burst effect at a specified position\n  const createBurst = useCallback((x, y) => {\n    if (!enableBursts) return;\n    const particleCount = Math.floor(Math.random() * (CONFIG.burst.particleCount.max - CONFIG.burst.particleCount.min) + CONFIG.burst.particleCount.min);\n    const duration = Math.random() * (CONFIG.burst.duration.max - CONFIG.burst.duration.min) + CONFIG.burst.duration.min;\n    const expansionRate = Math.random() * (CONFIG.burst.expansionRate.max - CONFIG.burst.expansionRate.min) + CONFIG.burst.expansionRate.min;\n    const fadeRate = Math.random() * (CONFIG.burst.fadeRate.max - CONFIG.burst.fadeRate.min) + CONFIG.burst.fadeRate.min;\n\n    // Create burst particles\n    for (let i = 0; i < particleCount; i++) {\n      const angle = Math.random() * Math.PI * 2;\n      const speed = Math.random() * 0.5 + 0.2;\n      burstParticlesRef.current.push({\n        x,\n        y,\n        vx: Math.cos(angle) * speed,\n        vy: Math.sin(angle) * speed,\n        size: Math.random() * (CONFIG.burst.particleSize.max - CONFIG.burst.particleSize.min) + CONFIG.burst.particleSize.min,\n        opacity: 1.0,\n        fadeRate,\n        expansionRate,\n        duration,\n        age: 0\n      });\n    }\n  }, [enableBursts]);\n\n  // Main animation loop using requestAnimationFrame\n  useEffect(() => {\n    if (!dimensions.width || !dimensions.height) return;\n\n    // Configure canvases and contexts\n    const baseCanvas = baseCanvasRef.current;\n    const burstCanvas = burstCanvasRef.current;\n    const interactCanvas = interactCanvasRef.current;\n    if (!baseCanvas || !burstCanvas || !interactCanvas) return;\n    const baseCtx = baseCanvas.getContext('2d');\n    const burstCtx = burstCanvas.getContext('2d');\n    const interactCtx = interactCanvas.getContext('2d');\n    baseCtx.clearRect(0, 0, dimensions.width, dimensions.height);\n\n    // Main animation function with timing control\n    const animate = timestamp => {\n      // Skip animation if reduced motion is preferred\n      if (CONFIG.respectReducedMotion && prefersReducedMotion) {\n        animationFrameRef.current = requestAnimationFrame(animate);\n        return;\n      }\n\n      // Throttle to target FPS\n      const elapsed = timestamp - lastTimestampRef.current;\n      if (elapsed > fpsIntervalRef.current) {\n        // Update last timestamp with adjustment to maintain consistent timing\n        lastTimestampRef.current = timestamp - elapsed % fpsIntervalRef.current;\n\n        // FPS tracking for adaptive quality\n        fpsCounterRef.current.frames++;\n        if (timestamp - fpsCounterRef.current.lastCheck >= 1000) {\n          fpsCounterRef.current.value = fpsCounterRef.current.frames;\n          fpsCounterRef.current.frames = 0;\n          fpsCounterRef.current.lastCheck = timestamp;\n\n          // Adaptive quality adjustment\n          if (CONFIG.adaptiveQuality) {\n            if (fpsCounterRef.current.value < CONFIG.maxFPS * 0.7) {\n              // Reduce quality if performance is suffering\n              qualityFactorRef.current = Math.max(0.5, qualityFactorRef.current - 0.1);\n            } else if (fpsCounterRef.current.value > CONFIG.maxFPS * 0.9 && qualityFactorRef.current < 1.0) {\n              // Gradually increase quality if performance is good\n              qualityFactorRef.current = Math.min(1.0, qualityFactorRef.current + 0.05);\n            }\n          }\n        }\n\n        // Clear all canvases\n        baseCtx.clearRect(0, 0, dimensions.width, dimensions.height);\n        burstCtx.clearRect(0, 0, dimensions.width, dimensions.height);\n        interactCtx.clearRect(0, 0, dimensions.width, dimensions.height);\n\n        // Normalized delta time for smooth animation regardless of frame rate\n        const normalizedDelta = elapsed / (1000 / 60); // Normalized to 60fps\n\n        // Update and draw stars\n        updateAndDrawStars(baseCtx, timestamp, normalizedDelta);\n\n        // Update and draw constellations\n        if (showConstellations) {\n          updateAndDrawConstellations(baseCtx, timestamp, normalizedDelta);\n        }\n\n        // Update and draw burst particles\n        updateAndDrawBursts(burstCtx, normalizedDelta);\n\n        // Draw cursor influence\n        drawCursorInfluence(interactCtx);\n\n        // Occasionally create random bursts\n        if (enableBursts && Math.random() < CONFIG.burst.probability * motionIntensity) {\n          const burstX = Math.random() * dimensions.width;\n          const burstY = Math.random() * dimensions.height;\n          createBurst(burstX, burstY);\n        }\n      }\n\n      // Schedule next frame\n      animationFrameRef.current = requestAnimationFrame(animate);\n    };\n\n    // Update and draw stars with subtle horizontal motion\n    const updateAndDrawStars = (ctx, timestamp, delta) => {\n      starsRef.current.forEach(star => {\n        const layer = CONFIG.motionLayers[star.layer];\n\n        // Calculate horizontal motion (affected by motionIntensity)\n        const time = timestamp * 0.001; // Convert to seconds\n        const speed = layer.speed * motionIntensity;\n\n        // Subtle horizontal motion based on sine waves for smooth movement\n        // Each layer moves at different speeds for parallax effect\n        star.x = star.originX + Math.sin(time * speed + star.layer * 0.5) * (25 * layer.depth * motionIntensity);\n\n        // Handle twinkling effect\n        if (!star.isTwinkling && Math.random() < CONFIG.twinkle.probability) {\n          star.isTwinkling = true;\n          star.twinkleProgress = 0;\n        }\n        if (star.isTwinkling) {\n          // Progress the twinkle animation\n          star.twinkleProgress += delta / star.twinkleDuration;\n          if (star.twinkleProgress >= 1) {\n            star.isTwinkling = false;\n            star.size = star.baseSize;\n            star.opacity = star.baseOpacity;\n          } else {\n            // Smooth sine curve for twinkling\n            const twinkleFactor = Math.sin(star.twinkleProgress * Math.PI);\n\n            // Apply size and opacity modulation\n            star.size = star.baseSize * (1 + twinkleFactor * (CONFIG.twinkle.sizeIncrease - 1));\n            star.opacity = star.baseOpacity * (1 + twinkleFactor * (CONFIG.twinkle.opacityIncrease - 1));\n          }\n        }\n\n        // Draw star with anti-aliased circle\n        ctx.beginPath();\n        ctx.arc(star.x, star.y, star.size, 0, Math.PI * 2);\n\n        // Set star color with dynamic opacity\n        const {\n          r,\n          g,\n          b\n        } = CONFIG.starColor;\n        ctx.fillStyle = `rgba(${r}, ${g}, ${b}, ${star.opacity})`;\n        ctx.fill();\n\n        // Add subtle glow for larger stars\n        if (star.size > 1.8 && qualityFactorRef.current > 0.7) {\n          ctx.beginPath();\n          ctx.arc(star.x, star.y, star.size * 1.8, 0, Math.PI * 2);\n          ctx.fillStyle = `rgba(${r}, ${g}, ${b}, ${star.opacity * 0.3})`;\n          ctx.fill();\n        }\n      });\n    };\n\n    // Update and draw constellations\n    const updateAndDrawConstellations = (ctx, timestamp, delta) => {\n      constellationsRef.current.forEach(constellation => {\n        // Draw edges first so they appear behind vertices\n        ctx.beginPath();\n        ctx.strokeStyle = 'rgba(191, 173, 127, 0.1)';\n        ctx.lineWidth = 0.5;\n        constellation.edges.forEach(edge => {\n          const startVertex = constellation.vertices[edge[0]];\n          const endVertex = constellation.vertices[edge[1]];\n          if (startVertex && endVertex) {\n            ctx.moveTo(startVertex.x, startVertex.y);\n            ctx.lineTo(endVertex.x, endVertex.y);\n          }\n        });\n        ctx.stroke();\n\n        // Draw and update vertices\n        constellation.vertices.forEach(vertex => {\n          // Random twinkling for constellation stars\n          if (!vertex.isTwinkling && Math.random() < CONFIG.twinkle.probability * 2) {\n            vertex.isTwinkling = true;\n            vertex.twinkleProgress = 0;\n          }\n          if (vertex.isTwinkling) {\n            // Progress the twinkle animation\n            vertex.twinkleProgress += delta / vertex.twinkleDuration;\n            if (vertex.twinkleProgress >= 1) {\n              vertex.isTwinkling = false;\n              vertex.size = vertex.baseSize;\n              vertex.opacity = vertex.baseOpacity;\n            } else {\n              // Smooth sine curve for twinkling\n              const twinkleFactor = Math.sin(vertex.twinkleProgress * Math.PI);\n\n              // Apply size and opacity modulation\n              vertex.size = vertex.baseSize * (1 + twinkleFactor);\n              vertex.opacity = vertex.baseOpacity * (1 + twinkleFactor);\n            }\n          }\n\n          // Draw constellation vertex with glow\n          if (qualityFactorRef.current > 0.6) {\n            // Subtle glow for higher quality settings\n            ctx.beginPath();\n            ctx.arc(vertex.x, vertex.y, vertex.size * 2, 0, Math.PI * 2);\n            ctx.fillStyle = `rgba(207, 185, 130, ${vertex.opacity * 0.2})`;\n            ctx.fill();\n          }\n\n          // Draw the star itself\n          ctx.beginPath();\n          ctx.arc(vertex.x, vertex.y, vertex.size, 0, Math.PI * 2);\n          ctx.fillStyle = `rgba(207, 185, 130, ${vertex.opacity})`;\n          ctx.fill();\n        });\n      });\n    };\n\n    // Update and draw burst particles\n    const updateAndDrawBursts = (ctx, delta) => {\n      // Use a compacting loop to avoid array splicing during iteration\n      let activeCount = 0;\n      for (let i = 0; i < burstParticlesRef.current.length; i++) {\n        const particle = burstParticlesRef.current[i];\n\n        // Update age\n        particle.age += delta;\n        if (particle.age < particle.duration) {\n          // Keep this particle active\n          if (i !== activeCount) {\n            burstParticlesRef.current[activeCount] = particle;\n          }\n          activeCount++;\n\n          // Update position\n          particle.x += particle.vx * delta;\n          particle.y += particle.vy * delta;\n\n          // Gradually slow down\n          particle.vx *= 0.98;\n          particle.vy *= 0.98;\n\n          // Fade out and expand\n          const progress = particle.age / particle.duration;\n          const easeOutProgress = 1 - (1 - progress) * (1 - progress); // Quadratic ease out\n\n          const currentSize = particle.size * (1 + easeOutProgress * particle.expansionRate * 3);\n          const currentOpacity = Math.max(0, 1 - easeOutProgress * 1.2);\n\n          // Draw particle with smooth gradient for better visual effect\n          if (qualityFactorRef.current > 0.7) {\n            // Higher quality rendering with gradient\n            const gradient = ctx.createRadialGradient(particle.x, particle.y, 0, particle.x, particle.y, currentSize * 1.5);\n            const {\n              r,\n              g,\n              b\n            } = CONFIG.starColor;\n            gradient.addColorStop(0, `rgba(${r}, ${g}, ${b}, ${currentOpacity})`);\n            gradient.addColorStop(1, `rgba(${r}, ${g}, ${b}, 0)`);\n            ctx.beginPath();\n            ctx.arc(particle.x, particle.y, currentSize * 1.5, 0, Math.PI * 2);\n            ctx.fillStyle = gradient;\n            ctx.fill();\n          } else {\n            // Simpler rendering for lower quality\n            ctx.beginPath();\n            ctx.arc(particle.x, particle.y, currentSize, 0, Math.PI * 2);\n            const {\n              r,\n              g,\n              b\n            } = CONFIG.starColor;\n            ctx.fillStyle = `rgba(${r}, ${g}, ${b}, ${currentOpacity})`;\n            ctx.fill();\n          }\n        }\n      }\n\n      // Truncate array to remove inactive particles\n      burstParticlesRef.current.length = activeCount;\n    };\n\n    // Draw cursor influence effect\n    const drawCursorInfluence = ctx => {\n      if (cursorPosition.x && cursorPosition.y) {\n        const gradient = ctx.createRadialGradient(cursorPosition.x, cursorPosition.y, 0, cursorPosition.x, cursorPosition.y, 80);\n        gradient.addColorStop(0, 'rgba(160, 142, 97, 0.03)');\n        gradient.addColorStop(1, 'rgba(160, 142, 97, 0)');\n        ctx.beginPath();\n        ctx.arc(cursorPosition.x, cursorPosition.y, 80, 0, Math.PI * 2);\n        ctx.fillStyle = gradient;\n        ctx.fill();\n      }\n    };\n\n    // Start animation\n    lastTimestampRef.current = 0;\n    fpsCounterRef.current = {\n      frames: 0,\n      lastCheck: 0,\n      value: 0\n    };\n    animationFrameRef.current = requestAnimationFrame(animate);\n\n    // Cleanup\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [dimensions, prefersReducedMotion, cursorPosition, motionIntensity, showConstellations, enableBursts, createBurst]);\n\n  // Handle mouse/touch movement\n  useEffect(() => {\n    const handleMouseMove = e => {\n      setCursorPosition({\n        x: e.clientX,\n        y: e.clientY\n      });\n    };\n    const handleTouchMove = e => {\n      if (e.touches && e.touches[0]) {\n        setCursorPosition({\n          x: e.touches[0].clientX,\n          y: e.touches[0].clientY\n        });\n      }\n    };\n    window.addEventListener('mousemove', handleMouseMove);\n    window.addEventListener('touchmove', handleTouchMove);\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('touchmove', handleTouchMove);\n    };\n  }, [setCursorPosition]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.backgroundContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: baseCanvasRef,\n      className: classes.backgroundCanvas\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 695,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: burstCanvasRef,\n      className: classes.backgroundCanvas\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 698,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: interactCanvasRef,\n      className: classes.backgroundCanvas\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 701,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 693,\n    columnNumber: 5\n  }, this);\n};\n_s(StellarBackground, \"o2enCypJQia4vzawIGoXFIw36XA=\", false, function () {\n  return [useStyles];\n});\n_c = StellarBackground;\nexport default StellarBackground;\nvar _c;\n$RefreshReg$(_c, \"StellarBackground\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useCallback","useMemo","createUseStyles","jsxDEV","_jsxDEV","useStyles","backgroundContainer","position","top","left","width","height","zIndex","pointerEvents","overflow","backgroundColor","transform","backfaceVisibility","willChange","backgroundCanvas","CONFIG","starCount","base","perPixelFactor","starSizes","weight","min","max","starColor","r","g","b","motionLayers","depth","speed","opacity","twinkle","probability","duration","sizeIncrease","opacityIncrease","burst","particleCount","particleSize","expansionRate","fadeRate","maxFPS","adaptiveQuality","respectReducedMotion","constellations","name","vertices","x","y","edges","StellarBackground","cursorPosition","setCursorPosition","motionIntensity","starDensity","enableBursts","showConstellations","_s","classes","baseCanvasRef","burstCanvasRef","interactCanvasRef","starsRef","burstParticlesRef","constellationsRef","animationFrameRef","lastTimestampRef","fpsIntervalRef","fpsCounterRef","frames","lastCheck","value","qualityFactorRef","prefersReducedMotion","setPrefersReducedMotion","dimensions","setDimensions","pixelRatio","updateDimensions","window","innerWidth","innerHeight","devicePixelRatio","forEach","canvasRef","current","canvas","style","ctx","getContext","scale","length","star","Math","random","originX","initializeConstellations","motionQuery","matchMedia","matches","handleMotionChange","e","addEventListener","removeEventListener","cancelAnimationFrame","baseCount","pixelBasedCount","totalStars","floor","getRandomSize","rand","cumulativeWeight","sizeOption","layer","layerIndex","layerStarCount","i","size","push","baseSize","baseOpacity","isTwinkling","twinkleProgress","twinkleDuration","map","constellation","vertex","createBurst","angle","PI","vx","cos","vy","sin","age","baseCanvas","burstCanvas","interactCanvas","baseCtx","burstCtx","interactCtx","clearRect","animate","timestamp","requestAnimationFrame","elapsed","normalizedDelta","updateAndDrawStars","updateAndDrawConstellations","updateAndDrawBursts","drawCursorInfluence","burstX","burstY","delta","time","twinkleFactor","beginPath","arc","fillStyle","fill","strokeStyle","lineWidth","edge","startVertex","endVertex","moveTo","lineTo","stroke","activeCount","particle","progress","easeOutProgress","currentSize","currentOpacity","gradient","createRadialGradient","addColorStop","handleMouseMove","clientX","clientY","handleTouchMove","touches","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/valeria/Documents/Crucible/frontend/src/components/core/Background.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState, useCallback, useMemo } from 'react';\nimport { createUseStyles } from 'react-jss';\n\n/**\n * Enhanced Stellar Background Component\n * \n * Creates a performant, butter-smooth animated starry background with subtle horizontal\n * motion, occasional twinkling stars, and rare burst effects.\n * \n * Features:\n * - Hardware-accelerated rendering with requestAnimationFrame\n * - Adaptive performance based on device capabilities\n * - Multiple parallax layers for depth perception\n * - Smooth motion with cubic-bezier easing\n * - Rare burst effects inspired by MeteorShower component\n * - Dynamic star density based on screen size\n * - Optimized for zero jitter or performance issues\n */\n\nconst useStyles = createUseStyles({\n  backgroundContainer: {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n    zIndex: 1,\n    pointerEvents: 'none',\n    overflow: 'hidden',\n    backgroundColor: '#000000',\n    // Hardware acceleration\n    transform: 'translateZ(0)',\n    backfaceVisibility: 'hidden',\n    willChange: 'transform',\n  },\n  backgroundCanvas: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n    zIndex: 1,\n  }\n});\n\n// Configurable parameters for easy tweaking\nconst CONFIG = {\n  // Star configuration\n  starCount: { base: 80, perPixelFactor: 0.00005 }, // Base count + dynamic based on screen size\n  starSizes: [\n    { weight: 60, min: 0.5, max: 1.5 },    // 60% small stars\n    { weight: 30, min: 1.5, max: 2.5 },    // 30% medium stars\n    { weight: 10, min: 2.5, max: 3.5 },    // 10% large stars\n  ],\n  starColor: { r: 207, g: 185, b: 130 },   // Base gold color\n  \n  // Motion configuration\n  motionLayers: [\n    { depth: 0.4, speed: 0.012, opacity: { min: 0.3, max: 0.5 } },  // Far layer (slowest)\n    { depth: 0.7, speed: 0.018, opacity: { min: 0.2, max: 0.4 } },  // Mid layer\n    { depth: 1.0, speed: 0.025, opacity: { min: 0.1, max: 0.25 } }  // Near layer (fastest)\n  ],\n  \n  // Twinkle effect\n  twinkle: {\n    probability: 0.0005,        // Chance per frame for a star to start twinkling\n    duration: { min: 2000, max: 4000 },\n    sizeIncrease: 1.5,         // Max size multiplier\n    opacityIncrease: 1.8,      // Max opacity multiplier\n  },\n  \n  // Burst effect\n  burst: {\n    probability: 0.00007,       // Very rare bursts\n    particleCount: { min: 6, max: 12 },\n    particleSize: { min: 0.8, max: 1.5 },\n    duration: { min: 800, max: 1200 },\n    expansionRate: { min: 0.2, max: 0.4 },\n    fadeRate: { min: 0.01, max: 0.02 }\n  },\n  \n  // Performance\n  maxFPS: 60,\n  adaptiveQuality: true,\n  respectReducedMotion: true,\n  \n  // Constellation definitions - subtle connecting lines\n  constellations: [\n    {\n      name: 'Ursa Major',\n      vertices: [\n        { x: 0.2, y: 0.3 }, { x: 0.25, y: 0.28 }, { x: 0.3, y: 0.25 },\n        { x: 0.35, y: 0.23 }, { x: 0.37, y: 0.18 }, { x: 0.33, y: 0.15 },\n        { x: 0.28, y: 0.15 }\n      ],\n      edges: [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\n    },\n    {\n      name: 'Cassiopeia',\n      vertices: [\n        { x: 0.7, y: 0.15 }, { x: 0.75, y: 0.2 }, { x: 0.8, y: 0.15 },\n        { x: 0.85, y: 0.2 }, { x: 0.9, y: 0.15 }\n      ],\n      edges: [[0, 1], [1, 2], [2, 3], [3, 4]]\n    },\n    {\n      name: 'Lyra',\n      vertices: [\n        { x: 0.15, y: 0.7 }, { x: 0.2, y: 0.72 }, { x: 0.18, y: 0.75 },\n        { x: 0.16, y: 0.73 }\n      ],\n      edges: [[0, 1], [1, 2], [2, 3], [3, 0]]\n    }\n  ]\n};\n\n/**\n * StellarBackground Component\n * \n * @param {Object} props - Component props\n * @param {Object} props.cursorPosition - Current cursor coordinates\n * @param {Function} props.setCursorPosition - Function to update cursor position\n * @param {number} props.motionIntensity - Controls the intensity of the stellar motion (0-1)\n * @param {number} props.starDensity - Controls the density of stars (0-1)\n * @param {boolean} props.enableBursts - Toggle burst effects\n * @param {boolean} props.showConstellations - Toggle constellation visibility\n */\nconst StellarBackground = ({\n  cursorPosition = { x: 0, y: 0 },\n  setCursorPosition = () => {},\n  motionIntensity = 1.0,\n  starDensity = 1.0,\n  enableBursts = true,\n  showConstellations = true\n}) => {\n  // Initialize styles\n  const classes = useStyles();\n  \n  // Multiple canvas layers for better performance\n  const baseCanvasRef = useRef(null);    // Main starfield layer\n  const burstCanvasRef = useRef(null);   // Burst effects layer\n  const interactCanvasRef = useRef(null); // Cursor interactions layer\n  \n  // Animation state refs\n  const starsRef = useRef([]);\n  const burstParticlesRef = useRef([]);\n  const constellationsRef = useRef([]);\n  const animationFrameRef = useRef(null);\n  const lastTimestampRef = useRef(0);\n  const fpsIntervalRef = useRef(1000 / CONFIG.maxFPS);\n  \n  // Performance tracking\n  const fpsCounterRef = useRef({ frames: 0, lastCheck: 0, value: 0 });\n  const qualityFactorRef = useRef(1.0);\n  \n  // Detect reduced motion preference\n  const [prefersReducedMotion, setPrefersReducedMotion] = useState(false);\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0, pixelRatio: 1 });\n  \n  // Initialize canvases and dimensions\n  useEffect(() => {\n    // Get dimensions\n    const updateDimensions = () => {\n      const width = window.innerWidth;\n      const height = window.innerHeight;\n      const pixelRatio = window.devicePixelRatio || 1;\n      \n      setDimensions({ width, height, pixelRatio });\n      \n      // Update canvas sizes\n      [baseCanvasRef, burstCanvasRef, interactCanvasRef].forEach(canvasRef => {\n        if (canvasRef.current) {\n          const canvas = canvasRef.current;\n          canvas.width = width * pixelRatio;\n          canvas.height = height * pixelRatio;\n          canvas.style.width = `${width}px`;\n          canvas.style.height = `${height}px`;\n          \n          // Scale context for high-DPI displays\n          const ctx = canvas.getContext('2d');\n          ctx.scale(pixelRatio, pixelRatio);\n        }\n      });\n      \n      // If stars already initialized, reset their positions based on new dimensions\n      if (starsRef.current.length > 0) {\n        starsRef.current.forEach(star => {\n          star.x = Math.random() * width;\n          star.y = Math.random() * height;\n          star.originX = star.x;\n        });\n      }\n      \n      // Reposition constellations\n      initializeConstellations(width, height);\n    };\n    \n    // Check for reduced motion preference\n    const motionQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\n    setPrefersReducedMotion(motionQuery.matches);\n    \n    const handleMotionChange = (e) => {\n      setPrefersReducedMotion(e.matches);\n    };\n    \n    motionQuery.addEventListener('change', handleMotionChange);\n    window.addEventListener('resize', updateDimensions);\n    \n    // Initial setup\n    updateDimensions();\n    \n    // Cleanup\n    return () => {\n      motionQuery.removeEventListener('change', handleMotionChange);\n      window.addEventListener('resize', updateDimensions);\n      \n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, []);\n  \n  // Initialize stars based on screen size and config\n  useEffect(() => {\n    if (!dimensions.width || !dimensions.height) return;\n    \n    // Calculate actual star count based on screen size and density\n    const baseCount = CONFIG.starCount.base;\n    const pixelBasedCount = dimensions.width * dimensions.height * CONFIG.starCount.perPixelFactor;\n    const totalStars = Math.floor((baseCount + pixelBasedCount) * starDensity);\n    \n    // Create stars array with layer distribution\n    starsRef.current = [];\n    \n    // Helper function to get a random size based on the weighted distribution\n    const getRandomSize = () => {\n      const rand = Math.random() * 100;\n      let cumulativeWeight = 0;\n      \n      for (const sizeOption of CONFIG.starSizes) {\n        cumulativeWeight += sizeOption.weight;\n        if (rand <= cumulativeWeight) {\n          return Math.random() * (sizeOption.max - sizeOption.min) + sizeOption.min;\n        }\n      }\n      return CONFIG.starSizes[0].min; // Fallback\n    };\n    \n    // Distribute stars among layers\n    CONFIG.motionLayers.forEach((layer, layerIndex) => {\n      // Calculate stars for this layer (roughly equal distribution)\n      const layerStarCount = Math.floor(totalStars / CONFIG.motionLayers.length);\n      \n      for (let i = 0; i < layerStarCount; i++) {\n        const size = getRandomSize();\n        const opacity = Math.random() * \n                       (layer.opacity.max - layer.opacity.min) + \n                        layer.opacity.min;\n        \n        starsRef.current.push({\n          x: Math.random() * dimensions.width,\n          y: Math.random() * dimensions.height,\n          originX: Math.random() * dimensions.width, // Starting horizontal position\n          size,\n          baseSize: size,\n          opacity,\n          baseOpacity: opacity,\n          layer: layerIndex,\n          isTwinkling: false,\n          twinkleProgress: 0,\n          twinkleDuration: Math.random() * \n                         (CONFIG.twinkle.duration.max - CONFIG.twinkle.duration.min) + \n                          CONFIG.twinkle.duration.min\n        });\n      }\n    });\n    \n    // Initialize constellations\n    initializeConstellations(dimensions.width, dimensions.height);\n    \n  }, [dimensions, starDensity]);\n  \n  // Initialize constellation vertices and edges\n  const initializeConstellations = useCallback((width, height) => {\n    if (!showConstellations) {\n      constellationsRef.current = [];\n      return;\n    }\n    \n    constellationsRef.current = CONFIG.constellations.map(constellation => {\n      const vertices = constellation.vertices.map(vertex => ({\n        x: vertex.x * width,\n        y: vertex.y * height,\n        size: 2.2, // Slightly larger than regular stars\n        baseSize: 2.2,\n        opacity: 0.35,\n        baseOpacity: 0.35,\n        isTwinkling: false,\n        twinkleProgress: 0,\n        twinkleDuration: Math.random() * 5000 + 3000\n      }));\n      \n      return {\n        name: constellation.name,\n        vertices,\n        edges: constellation.edges\n      };\n    });\n  }, [showConstellations]);\n  \n  // Create a burst effect at a specified position\n  const createBurst = useCallback((x, y) => {\n    if (!enableBursts) return;\n    \n    const particleCount = Math.floor(\n      Math.random() * \n      (CONFIG.burst.particleCount.max - CONFIG.burst.particleCount.min) + \n      CONFIG.burst.particleCount.min\n    );\n    \n    const duration = Math.random() * \n                   (CONFIG.burst.duration.max - CONFIG.burst.duration.min) + \n                    CONFIG.burst.duration.min;\n                    \n    const expansionRate = Math.random() * \n                        (CONFIG.burst.expansionRate.max - CONFIG.burst.expansionRate.min) + \n                         CONFIG.burst.expansionRate.min;\n                         \n    const fadeRate = Math.random() * \n                   (CONFIG.burst.fadeRate.max - CONFIG.burst.fadeRate.min) + \n                    CONFIG.burst.fadeRate.min;\n    \n    // Create burst particles\n    for (let i = 0; i < particleCount; i++) {\n      const angle = Math.random() * Math.PI * 2;\n      const speed = Math.random() * 0.5 + 0.2;\n      \n      burstParticlesRef.current.push({\n        x,\n        y,\n        vx: Math.cos(angle) * speed,\n        vy: Math.sin(angle) * speed,\n        size: Math.random() * \n             (CONFIG.burst.particleSize.max - CONFIG.burst.particleSize.min) + \n              CONFIG.burst.particleSize.min,\n        opacity: 1.0,\n        fadeRate,\n        expansionRate,\n        duration,\n        age: 0\n      });\n    }\n  }, [enableBursts]);\n  \n  // Main animation loop using requestAnimationFrame\n  useEffect(() => {\n    if (!dimensions.width || !dimensions.height) return;\n    \n    // Configure canvases and contexts\n    const baseCanvas = baseCanvasRef.current;\n    const burstCanvas = burstCanvasRef.current;\n    const interactCanvas = interactCanvasRef.current;\n    \n    if (!baseCanvas || !burstCanvas || !interactCanvas) return;\n    \n    const baseCtx = baseCanvas.getContext('2d');\n    const burstCtx = burstCanvas.getContext('2d');\n    const interactCtx = interactCanvas.getContext('2d');\n    \n    baseCtx.clearRect(0, 0, dimensions.width, dimensions.height);\n    \n    // Main animation function with timing control\n    const animate = (timestamp) => {\n      // Skip animation if reduced motion is preferred\n      if (CONFIG.respectReducedMotion && prefersReducedMotion) {\n        animationFrameRef.current = requestAnimationFrame(animate);\n        return;\n      }\n      \n      // Throttle to target FPS\n      const elapsed = timestamp - lastTimestampRef.current;\n      \n      if (elapsed > fpsIntervalRef.current) {\n        // Update last timestamp with adjustment to maintain consistent timing\n        lastTimestampRef.current = timestamp - (elapsed % fpsIntervalRef.current);\n        \n        // FPS tracking for adaptive quality\n        fpsCounterRef.current.frames++;\n        if (timestamp - fpsCounterRef.current.lastCheck >= 1000) {\n          fpsCounterRef.current.value = fpsCounterRef.current.frames;\n          fpsCounterRef.current.frames = 0;\n          fpsCounterRef.current.lastCheck = timestamp;\n          \n          // Adaptive quality adjustment\n          if (CONFIG.adaptiveQuality) {\n            if (fpsCounterRef.current.value < CONFIG.maxFPS * 0.7) {\n              // Reduce quality if performance is suffering\n              qualityFactorRef.current = Math.max(0.5, qualityFactorRef.current - 0.1);\n            } else if (fpsCounterRef.current.value > CONFIG.maxFPS * 0.9 && \n                      qualityFactorRef.current < 1.0) {\n              // Gradually increase quality if performance is good\n              qualityFactorRef.current = Math.min(1.0, qualityFactorRef.current + 0.05);\n            }\n          }\n        }\n        \n        // Clear all canvases\n        baseCtx.clearRect(0, 0, dimensions.width, dimensions.height);\n        burstCtx.clearRect(0, 0, dimensions.width, dimensions.height);\n        interactCtx.clearRect(0, 0, dimensions.width, dimensions.height);\n        \n        // Normalized delta time for smooth animation regardless of frame rate\n        const normalizedDelta = elapsed / (1000 / 60); // Normalized to 60fps\n        \n        // Update and draw stars\n        updateAndDrawStars(baseCtx, timestamp, normalizedDelta);\n        \n        // Update and draw constellations\n        if (showConstellations) {\n          updateAndDrawConstellations(baseCtx, timestamp, normalizedDelta);\n        }\n        \n        // Update and draw burst particles\n        updateAndDrawBursts(burstCtx, normalizedDelta);\n        \n        // Draw cursor influence\n        drawCursorInfluence(interactCtx);\n        \n        // Occasionally create random bursts\n        if (enableBursts && Math.random() < CONFIG.burst.probability * motionIntensity) {\n          const burstX = Math.random() * dimensions.width;\n          const burstY = Math.random() * dimensions.height;\n          createBurst(burstX, burstY);\n        }\n      }\n      \n      // Schedule next frame\n      animationFrameRef.current = requestAnimationFrame(animate);\n    };\n    \n    // Update and draw stars with subtle horizontal motion\n    const updateAndDrawStars = (ctx, timestamp, delta) => {\n      starsRef.current.forEach(star => {\n        const layer = CONFIG.motionLayers[star.layer];\n        \n        // Calculate horizontal motion (affected by motionIntensity)\n        const time = timestamp * 0.001; // Convert to seconds\n        const speed = layer.speed * motionIntensity;\n        \n        // Subtle horizontal motion based on sine waves for smooth movement\n        // Each layer moves at different speeds for parallax effect\n        star.x = star.originX + Math.sin(time * speed + star.layer * 0.5) * \n                (25 * layer.depth * motionIntensity);\n        \n        // Handle twinkling effect\n        if (!star.isTwinkling && Math.random() < CONFIG.twinkle.probability) {\n          star.isTwinkling = true;\n          star.twinkleProgress = 0;\n        }\n        \n        if (star.isTwinkling) {\n          // Progress the twinkle animation\n          star.twinkleProgress += delta / star.twinkleDuration;\n          \n          if (star.twinkleProgress >= 1) {\n            star.isTwinkling = false;\n            star.size = star.baseSize;\n            star.opacity = star.baseOpacity;\n          } else {\n            // Smooth sine curve for twinkling\n            const twinkleFactor = Math.sin(star.twinkleProgress * Math.PI);\n            \n            // Apply size and opacity modulation\n            star.size = star.baseSize * (1 + twinkleFactor * (CONFIG.twinkle.sizeIncrease - 1));\n            star.opacity = star.baseOpacity * (1 + twinkleFactor * (CONFIG.twinkle.opacityIncrease - 1));\n          }\n        }\n        \n        // Draw star with anti-aliased circle\n        ctx.beginPath();\n        ctx.arc(star.x, star.y, star.size, 0, Math.PI * 2);\n        \n        // Set star color with dynamic opacity\n        const { r, g, b } = CONFIG.starColor;\n        ctx.fillStyle = `rgba(${r}, ${g}, ${b}, ${star.opacity})`;\n        ctx.fill();\n        \n        // Add subtle glow for larger stars\n        if (star.size > 1.8 && qualityFactorRef.current > 0.7) {\n          ctx.beginPath();\n          ctx.arc(star.x, star.y, star.size * 1.8, 0, Math.PI * 2);\n          ctx.fillStyle = `rgba(${r}, ${g}, ${b}, ${star.opacity * 0.3})`;\n          ctx.fill();\n        }\n      });\n    };\n    \n    // Update and draw constellations\n    const updateAndDrawConstellations = (ctx, timestamp, delta) => {\n      constellationsRef.current.forEach(constellation => {\n        // Draw edges first so they appear behind vertices\n        ctx.beginPath();\n        ctx.strokeStyle = 'rgba(191, 173, 127, 0.1)';\n        ctx.lineWidth = 0.5;\n        \n        constellation.edges.forEach(edge => {\n          const startVertex = constellation.vertices[edge[0]];\n          const endVertex = constellation.vertices[edge[1]];\n          \n          if (startVertex && endVertex) {\n            ctx.moveTo(startVertex.x, startVertex.y);\n            ctx.lineTo(endVertex.x, endVertex.y);\n          }\n        });\n        ctx.stroke();\n        \n        // Draw and update vertices\n        constellation.vertices.forEach(vertex => {\n          // Random twinkling for constellation stars\n          if (!vertex.isTwinkling && Math.random() < CONFIG.twinkle.probability * 2) {\n            vertex.isTwinkling = true;\n            vertex.twinkleProgress = 0;\n          }\n          \n          if (vertex.isTwinkling) {\n            // Progress the twinkle animation\n            vertex.twinkleProgress += delta / vertex.twinkleDuration;\n            \n            if (vertex.twinkleProgress >= 1) {\n              vertex.isTwinkling = false;\n              vertex.size = vertex.baseSize;\n              vertex.opacity = vertex.baseOpacity;\n            } else {\n              // Smooth sine curve for twinkling\n              const twinkleFactor = Math.sin(vertex.twinkleProgress * Math.PI);\n              \n              // Apply size and opacity modulation\n              vertex.size = vertex.baseSize * (1 + twinkleFactor);\n              vertex.opacity = vertex.baseOpacity * (1 + twinkleFactor);\n            }\n          }\n          \n          // Draw constellation vertex with glow\n          if (qualityFactorRef.current > 0.6) {\n            // Subtle glow for higher quality settings\n            ctx.beginPath();\n            ctx.arc(vertex.x, vertex.y, vertex.size * 2, 0, Math.PI * 2);\n            ctx.fillStyle = `rgba(207, 185, 130, ${vertex.opacity * 0.2})`;\n            ctx.fill();\n          }\n          \n          // Draw the star itself\n          ctx.beginPath();\n          ctx.arc(vertex.x, vertex.y, vertex.size, 0, Math.PI * 2);\n          ctx.fillStyle = `rgba(207, 185, 130, ${vertex.opacity})`;\n          ctx.fill();\n        });\n      });\n    };\n    \n    // Update and draw burst particles\n    const updateAndDrawBursts = (ctx, delta) => {\n      // Use a compacting loop to avoid array splicing during iteration\n      let activeCount = 0;\n      \n      for (let i = 0; i < burstParticlesRef.current.length; i++) {\n        const particle = burstParticlesRef.current[i];\n        \n        // Update age\n        particle.age += delta;\n        \n        if (particle.age < particle.duration) {\n          // Keep this particle active\n          if (i !== activeCount) {\n            burstParticlesRef.current[activeCount] = particle;\n          }\n          activeCount++;\n          \n          // Update position\n          particle.x += particle.vx * delta;\n          particle.y += particle.vy * delta;\n          \n          // Gradually slow down\n          particle.vx *= 0.98;\n          particle.vy *= 0.98;\n          \n          // Fade out and expand\n          const progress = particle.age / particle.duration;\n          const easeOutProgress = 1 - (1 - progress) * (1 - progress); // Quadratic ease out\n          \n          const currentSize = particle.size * (1 + easeOutProgress * particle.expansionRate * 3);\n          const currentOpacity = Math.max(0, 1 - easeOutProgress * 1.2);\n          \n          // Draw particle with smooth gradient for better visual effect\n          if (qualityFactorRef.current > 0.7) {\n            // Higher quality rendering with gradient\n            const gradient = ctx.createRadialGradient(\n              particle.x, particle.y, 0,\n              particle.x, particle.y, currentSize * 1.5\n            );\n            \n            const { r, g, b } = CONFIG.starColor;\n            gradient.addColorStop(0, `rgba(${r}, ${g}, ${b}, ${currentOpacity})`);\n            gradient.addColorStop(1, `rgba(${r}, ${g}, ${b}, 0)`);\n            \n            ctx.beginPath();\n            ctx.arc(particle.x, particle.y, currentSize * 1.5, 0, Math.PI * 2);\n            ctx.fillStyle = gradient;\n            ctx.fill();\n          } else {\n            // Simpler rendering for lower quality\n            ctx.beginPath();\n            ctx.arc(particle.x, particle.y, currentSize, 0, Math.PI * 2);\n            \n            const { r, g, b } = CONFIG.starColor;\n            ctx.fillStyle = `rgba(${r}, ${g}, ${b}, ${currentOpacity})`;\n            ctx.fill();\n          }\n        }\n      }\n      \n      // Truncate array to remove inactive particles\n      burstParticlesRef.current.length = activeCount;\n    };\n    \n    // Draw cursor influence effect\n    const drawCursorInfluence = (ctx) => {\n      if (cursorPosition.x && cursorPosition.y) {\n        const gradient = ctx.createRadialGradient(\n          cursorPosition.x, cursorPosition.y, 0,\n          cursorPosition.x, cursorPosition.y, 80\n        );\n        \n        gradient.addColorStop(0, 'rgba(160, 142, 97, 0.03)');\n        gradient.addColorStop(1, 'rgba(160, 142, 97, 0)');\n        \n        ctx.beginPath();\n        ctx.arc(cursorPosition.x, cursorPosition.y, 80, 0, Math.PI * 2);\n        ctx.fillStyle = gradient;\n        ctx.fill();\n      }\n    };\n    \n    // Start animation\n    lastTimestampRef.current = 0;\n    fpsCounterRef.current = { frames: 0, lastCheck: 0, value: 0 };\n    animationFrameRef.current = requestAnimationFrame(animate);\n    \n    // Cleanup\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [\n    dimensions, \n    prefersReducedMotion, \n    cursorPosition, \n    motionIntensity, \n    showConstellations, \n    enableBursts, \n    createBurst\n  ]);\n  \n  // Handle mouse/touch movement\n  useEffect(() => {\n    const handleMouseMove = (e) => {\n      setCursorPosition({\n        x: e.clientX,\n        y: e.clientY\n      });\n    };\n    \n    const handleTouchMove = (e) => {\n      if (e.touches && e.touches[0]) {\n        setCursorPosition({\n          x: e.touches[0].clientX,\n          y: e.touches[0].clientY\n        });\n      }\n    };\n    \n    window.addEventListener('mousemove', handleMouseMove);\n    window.addEventListener('touchmove', handleTouchMove);\n    \n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('touchmove', handleTouchMove);\n    };\n  }, [setCursorPosition]);\n  \n  return (\n    <div className={classes.backgroundContainer}>\n      {/* Canvas for stars and constellations */}\n      <canvas ref={baseCanvasRef} className={classes.backgroundCanvas} />\n      \n      {/* Canvas for burst effects */}\n      <canvas ref={burstCanvasRef} className={classes.backgroundCanvas} />\n      \n      {/* Canvas for cursor interactions */}\n      <canvas ref={interactCanvasRef} className={classes.backgroundCanvas} />\n    </div>\n  );\n};\n\nexport default StellarBackground;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}