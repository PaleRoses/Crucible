{"ast":null,"code":"var _jsxFileName = \"/home/valeria/Documents/Crucible/frontend/src/components/core/effects/bordereffects/CometBorderEffect.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect, useCallback, useMemo } from 'react';\n\n/**\n * CometBorderEffect Component - Enterprise Performance Optimized\n * \n * Creates a highly performant comet animation that orbits around a circular container,\n * perfect for profile images, avatars, and circular UI elements. Features a glowing\n * trailing effect with customizable parameters.\n * \n * Features:\n * - Advanced performance optimizations with adaptive rendering\n * - Memory-efficient object pooling and canvas management\n * - Hardware acceleration and high-DPI display support\n * - Accessibility compliance with reduced motion support\n * - Hover state enhancements with smooth transitions\n * - Battery and CPU-efficient rendering pipeline\n * \n * @param {Object} props - Component props\n * @param {boolean} [props.isHovered=false] - Whether the containing element is hovered\n * @param {number} [props.size=2] - Size of the comet\n * @param {number} [props.trailLength=140] - Length of the comet trail in degrees\n * @param {number} [props.speed=0.01] - Base speed of the comet\n * @param {number} [props.hoverSpeedMultiplier=2] - Speed increase when hovered\n * @param {number} [props.trailSegments=25] - Number of segments in the comet trail\n * @param {number} [props.glowIntensity=0.8] - Intensity of the glow effect\n * @param {number} [props.targetFPS=60] - Target frames per second\n * @param {string} [props.coreColor='rgba(255, 255, 255, 1)'] - Core color of the comet\n * @param {string} [props.glowColor='rgba(255, 253, 227, 0.8)'] - Glow color of the comet\n * @param {string} [props.trailColor='rgba(191, 173, 127, 0.8)'] - Trail color of the comet\n * @param {boolean} [props.radiusOffset=20] - Offset from edge of container in pixels\n * @param {boolean} [props.adaptiveQuality=true] - Enable adaptive quality based on device\n * @param {boolean} [props.respectReducedMotion=true] - Respect reduced motion preference\n * @param {boolean} [props.enableBattery=true] - Enable battery-saving optimizations\n * @param {function} [props.onRenderComplete] - Callback when the render completes\n * @param {boolean} [props.debug=false] - Enable debug visualization\n * @param {boolean} [props.active=true] - Whether the animation is active\n * @param {string} [props.positionMode='outside'] - Position mode: 'outside', 'inside', or 'center'\n * @param {boolean} [props.reverseDirection=false] - Reverse the direction of the comet\n * @param {number} [props.startingPosition=0] - Starting position in radians\n * @param {boolean} [props.enablePulse=true] - Enable pulsing effect\n * @param {number} [props.pulseFrequency=5] - Pulse frequency in seconds\n * @param {number} [props.pulseIntensity=0.2] - Intensity of the pulse effect\n * @param {number} [props.paddingTop=0] - Extra padding for container top\n * @param {number} [props.paddingRight=0] - Extra padding for container right\n * @param {number} [props.paddingBottom=0] - Extra padding for container bottom\n * @param {number} [props.paddingLeft=0] - Extra padding for container left\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CometBorderEffect = ({\n  isHovered = false,\n  size = 2,\n  trailLength = 140,\n  speed = 0.01,\n  hoverSpeedMultiplier = 2,\n  trailSegments = 25,\n  glowIntensity = 0.8,\n  targetFPS = 60,\n  coreColor = 'rgba(255, 255, 255, 1)',\n  glowColor = 'rgba(255, 253, 227, 0.8)',\n  trailColor = 'rgba(191, 173, 127, 0.8)',\n  radiusOffset = 20,\n  adaptiveQuality = true,\n  respectReducedMotion = true,\n  enableBattery = true,\n  onRenderComplete = null,\n  debug = false,\n  active = true,\n  positionMode = 'outside',\n  reverseDirection = false,\n  startingPosition = 0,\n  enablePulse = true,\n  pulseFrequency = 5,\n  pulseIntensity = 0.2,\n  paddingTop = 0,\n  paddingRight = 0,\n  paddingBottom = 0,\n  paddingLeft = 0\n}) => {\n  _s();\n  // Refs for DOM elements and animation state\n  const canvasRef = useRef(null);\n  const containerRef = useRef(null);\n  const requestRef = useRef(null);\n  const lastTimeRef = useRef(0);\n  const frameRateThrottleRef = useRef(0);\n  const visibilityChangeTimeRef = useRef(0);\n  const batteryRef = useRef(null);\n  const pixelRatioRef = useRef(1);\n  const qualityFactorRef = useRef(1);\n  const offScreenCanvasRef = useRef(null);\n  const offScreenCtxRef = useRef(null);\n\n  // Animation parameters\n  const cometPositionRef = useRef(startingPosition);\n  const hoverTransitionRef = useRef(0); // 0-1 for smooth hover transitions\n\n  // Component state\n  const [dimensions, setDimensions] = useState({\n    width: 0,\n    height: 0\n  });\n  const [prefersReducedMotion, setPrefersReducedMotion] = useState(false);\n  const [isVisible, setIsVisible] = useState(false);\n  const [deviceCapabilities, setDeviceCapabilities] = useState({\n    memory: 4,\n    cores: 4,\n    batteryLevel: 1,\n    isCharging: true,\n    isMobile: false\n  });\n\n  // Pre-calculate frame interval for throttling\n  const frameInterval = useMemo(() => 1000 / targetFPS, [targetFPS]);\n\n  // Detects device capabilities and sets up optimization strategies\n  const detectCapabilities = useCallback(() => {\n    // Device memory, hardware concurrency, and mobile detection\n    const memory = navigator.deviceMemory || 4;\n    const cores = navigator.hardwareConcurrency || 4;\n    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n\n    // Get battery info if available\n    if (navigator.getBattery && enableBattery) {\n      navigator.getBattery().then(battery => {\n        batteryRef.current = battery;\n        const updateBattery = () => {\n          setDeviceCapabilities(prev => ({\n            ...prev,\n            batteryLevel: battery.level,\n            isCharging: battery.charging\n          }));\n\n          // Reduce quality if on battery and below 30%\n          if (!battery.charging && battery.level < 0.3 && adaptiveQuality) {\n            qualityFactorRef.current = Math.min(qualityFactorRef.current, 0.6);\n          }\n        };\n\n        // Add battery event listeners\n        battery.addEventListener('levelchange', updateBattery);\n        battery.addEventListener('chargingchange', updateBattery);\n\n        // Initial update\n        updateBattery();\n      }).catch(() => {\n        // Fallback if battery API is not available\n        setDeviceCapabilities(prev => ({\n          ...prev,\n          batteryLevel: 1,\n          isCharging: true\n        }));\n      });\n    }\n\n    // Set device capabilities state\n    setDeviceCapabilities({\n      memory,\n      cores,\n      batteryLevel: 1,\n      isCharging: true,\n      isMobile\n    });\n\n    // Calculate quality factor based on capabilities\n    if (adaptiveQuality) {\n      // Base score from hardware\n      const performanceScore = memory * cores / (isMobile ? 2 : 1);\n\n      // Scale quality based on performance score\n      let quality = 1;\n      if (performanceScore > 16) {\n        quality = 1; // High-end devices\n      } else if (performanceScore > 8) {\n        quality = 0.8; // Mid-range devices\n      } else if (performanceScore > 4) {\n        quality = 0.6; // Low-end devices\n      } else {\n        quality = 0.4; // Very low-end devices\n      }\n      qualityFactorRef.current = quality;\n    }\n  }, [adaptiveQuality, enableBattery]);\n\n  // Smooth transition for hover state\n  useEffect(() => {\n    // Skip animation if reduced motion is preferred\n    if (respectReducedMotion && prefersReducedMotion) return;\n\n    // Target value for hover transition\n    const targetValue = isHovered ? 1 : 0;\n    let currentValue = hoverTransitionRef.current;\n\n    // If already at target value, skip animation\n    if (currentValue === targetValue) return;\n\n    // Animation step for smooth transition\n    const animateHoverTransition = () => {\n      // Move towards target at rate of 0.1 per 16ms (about 0.6 per 100ms)\n      const step = 0.1;\n      if (targetValue > currentValue) {\n        currentValue = Math.min(targetValue, currentValue + step);\n      } else {\n        currentValue = Math.max(targetValue, currentValue - step);\n      }\n      hoverTransitionRef.current = currentValue;\n\n      // Continue animation if not at target yet\n      if (currentValue !== targetValue) {\n        requestAnimationFrame(animateHoverTransition);\n      }\n    };\n\n    // Start animation\n    animateHoverTransition();\n  }, [isHovered, prefersReducedMotion, respectReducedMotion]);\n\n  // Setup device capabilities, reduced motion detection and visibility observer\n  useEffect(() => {\n    // Check for reduced motion preference\n    const reducedMotionQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\n    setPrefersReducedMotion(reducedMotionQuery.matches);\n    const handleReducedMotionChange = e => {\n      setPrefersReducedMotion(e.matches);\n    };\n    reducedMotionQuery.addEventListener('change', handleReducedMotionChange);\n\n    // Detect device capabilities\n    detectCapabilities();\n\n    // Setup visibility change detection\n    const handleVisibilityChange = () => {\n      if (document.hidden) {\n        visibilityChangeTimeRef.current = performance.now();\n      } else {\n        // Adjust timing references after visibility changes\n        const timeDelta = performance.now() - visibilityChangeTimeRef.current;\n        lastTimeRef.current += timeDelta;\n      }\n    };\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n\n    // Setup intersection observer for visibility detection\n    if (containerRef.current) {\n      const observer = new IntersectionObserver(entries => {\n        setIsVisible(entries[0].isIntersecting);\n      }, {\n        threshold: 0.1\n      });\n      observer.observe(containerRef.current);\n      return () => {\n        reducedMotionQuery.removeEventListener('change', handleReducedMotionChange);\n        document.removeEventListener('visibilitychange', handleVisibilityChange);\n        observer.disconnect();\n      };\n    }\n    return () => {\n      reducedMotionQuery.removeEventListener('change', handleReducedMotionChange);\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n    };\n  }, [detectCapabilities]);\n\n  // Memoized function to get points on circle\n  const getPointOnCircle = useCallback((angle, centerX, centerY, radius) => {\n    const directionFactor = reverseDirection ? -1 : 1;\n    return {\n      x: centerX + radius * Math.cos(angle * directionFactor),\n      y: centerY + radius * Math.sin(angle * directionFactor)\n    };\n  }, [reverseDirection]);\n\n  // Update dimensions with resize observer for better performance\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    // Capture ref value to use in cleanup\n    const currentContainer = containerRef.current;\n    const updateDimensions = () => {\n      if (currentContainer) {\n        // Get the container dimensions\n        const rect = currentContainer.getBoundingClientRect();\n\n        // Apply padding adjustments\n        const width = Math.max(1, rect.width + paddingLeft + paddingRight);\n        const height = Math.max(1, rect.height + paddingTop + paddingBottom);\n        setDimensions({\n          width,\n          height\n        });\n\n        // Update pixel ratio for high-DPI displays\n        pixelRatioRef.current = window.devicePixelRatio || 1;\n\n        // Initialize offscreen canvas for better performance\n        setupOffscreenCanvas(width, height);\n      }\n    };\n\n    // Setup offscreen canvas for performance\n    const setupOffscreenCanvas = (width, height) => {\n      try {\n        // Create offscreen canvas if supported\n        if (typeof OffscreenCanvas !== 'undefined') {\n          const pixelRatio = pixelRatioRef.current;\n          const canvas = new OffscreenCanvas(width * pixelRatio, height * pixelRatio);\n          const ctx = canvas.getContext('2d', {\n            alpha: true,\n            willReadFrequently: false,\n            desynchronized: true\n          });\n          if (ctx) {\n            ctx.scale(pixelRatio, pixelRatio);\n            offScreenCanvasRef.current = canvas;\n            offScreenCtxRef.current = ctx;\n          }\n        }\n      } catch (error) {\n        console.warn('Failed to create offscreen canvas:', error);\n      }\n    };\n\n    // Use ResizeObserver instead of window resize event\n    const resizeObserver = new ResizeObserver(updateDimensions);\n    resizeObserver.observe(currentContainer);\n\n    // Initial dimensions calculation\n    updateDimensions();\n    return () => {\n      resizeObserver.unobserve(currentContainer);\n      resizeObserver.disconnect();\n    };\n  }, [paddingTop, paddingRight, paddingBottom, paddingLeft]);\n\n  // Main animation effect\n  useEffect(() => {\n    // Skip animation if reduced motion is preferred or component is not active\n    if (respectReducedMotion && prefersReducedMotion || !active || !isVisible) return;\n\n    // Skip if container or canvas is not available\n    if (!canvasRef.current || !containerRef.current || dimensions.width === 0) return;\n\n    // Capture ref values to use in cleanup\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d', {\n      alpha: true,\n      willReadFrequently: false,\n      desynchronized: true\n    });\n    if (!ctx) return; // Safety check for context\n\n    // Mobile detection for performance optimization\n    const isMobile = deviceCapabilities.isMobile;\n\n    // Set canvas dimensions with device pixel ratio for sharper rendering\n    // Use lower pixel ratio on mobile for performance\n    const pixelRatio = isMobile ? Math.min(pixelRatioRef.current, 1.5) : pixelRatioRef.current;\n    canvas.width = Math.max(dimensions.width, 1) * pixelRatio;\n    canvas.height = Math.max(dimensions.height, 1) * pixelRatio;\n    canvas.style.width = `${dimensions.width}px`;\n    canvas.style.height = `${dimensions.height}px`;\n    ctx.scale(pixelRatio, pixelRatio);\n\n    // Calculate circle properties\n    const centerX = dimensions.width / 2;\n    const centerY = dimensions.height / 2;\n\n    // Determine radius based on positionMode\n    let radius;\n    if (positionMode === 'inside') {\n      radius = Math.min(centerX, centerY) - radiusOffset * 2;\n    } else if (positionMode === 'center') {\n      radius = Math.min(centerX, centerY) - radiusOffset;\n    } else {\n      // 'outside' (default)\n      radius = Math.min(centerX, centerY) - radiusOffset;\n    }\n\n    // Adaptive quality settings based on device capabilities\n    const adaptiveTrailSegments = Math.max(5, Math.floor(trailSegments * qualityFactorRef.current));\n\n    // Pre-calculate segment opacity and width ratios for better performance\n    const segmentOpacityRatios = new Array(adaptiveTrailSegments).fill(0).map((_, i) => 1 - i / adaptiveTrailSegments);\n    const segmentWidthRatios = new Array(adaptiveTrailSegments).fill(0).map((_, i) => 1 - i / adaptiveTrailSegments * 0.7);\n\n    // Animation function\n    const animateComet = timestamp => {\n      // Initialize timestamp\n      if (!lastTimeRef.current) {\n        lastTimeRef.current = timestamp;\n        frameRateThrottleRef.current = timestamp;\n        requestRef.current = requestAnimationFrame(animateComet);\n        return;\n      }\n\n      // Frame rate throttling for consistent animation speed\n      const elapsed = timestamp - frameRateThrottleRef.current;\n      if (elapsed < frameInterval) {\n        requestRef.current = requestAnimationFrame(animateComet);\n        return;\n      }\n\n      // Calculate delta time and update frame rate throttle\n      const deltaTime = timestamp - lastTimeRef.current;\n      lastTimeRef.current = timestamp;\n      frameRateThrottleRef.current = timestamp;\n\n      // Calculate actual speed with hover effect\n      const transitionValue = hoverTransitionRef.current;\n      const actualSpeed = speed * (1 + (hoverSpeedMultiplier - 1) * transitionValue);\n\n      // Update comet position with deltaTime consideration\n      cometPositionRef.current = (cometPositionRef.current + actualSpeed * deltaTime) % (2 * Math.PI);\n\n      // Determine which context to use (offscreen if available, main canvas otherwise)\n      const renderCtx = offScreenCtxRef.current || ctx;\n      const targetCanvas = offScreenCanvasRef.current || canvas;\n\n      // Clear the canvas - use clearRect for better performance\n      renderCtx.clearRect(0, 0, targetCanvas.width / pixelRatio, targetCanvas.height / pixelRatio);\n\n      // Calculate actual parameters based on hover state\n      const hoverFactor = hoverTransitionRef.current;\n      const cometSize = size * (1 + hoverFactor * 0.2);\n      const actualTrailLength = trailLength * (1 + hoverFactor * 0.2);\n      const actualGlowIntensity = glowIntensity * (1 + hoverFactor * 0.5);\n\n      // Apply pulse effect if enabled\n      let pulseEffect = 1;\n      if (enablePulse) {\n        const pulsePhase = timestamp % (pulseFrequency * 1000) / (pulseFrequency * 1000) * Math.PI * 2;\n        pulseEffect = 1 + Math.sin(pulsePhase) * pulseIntensity;\n      }\n\n      // Draw trail segments\n      let prevPoint = getPointOnCircle(cometPositionRef.current, centerX, centerY, radius);\n      for (let i = 0; i < adaptiveTrailSegments; i++) {\n        const segmentAngle = cometPositionRef.current - (i + 1) * (actualTrailLength / 180 * Math.PI / adaptiveTrailSegments);\n        const nextPoint = getPointOnCircle(segmentAngle, centerX, centerY, radius);\n\n        // Calculate opacity and width using pre-calculated ratios\n        const baseOpacity = 0.9 * segmentOpacityRatios[i] * pulseEffect;\n        const segmentWidth = cometSize * segmentWidthRatios[i] * pulseEffect + 0.5;\n\n        // Skip nearly invisible segments for performance\n        if (baseOpacity < 0.05) continue;\n\n        // Draw trail segment with optimized settings\n        renderCtx.beginPath();\n        renderCtx.moveTo(prevPoint.x, prevPoint.y);\n        renderCtx.lineTo(nextPoint.x, nextPoint.y);\n\n        // Apply shadow/glow only when necessary (reduces GPU load)\n        // Only apply to first half of segments\n        if (i < adaptiveTrailSegments / 2 && qualityFactorRef.current > 0.7) {\n          renderCtx.shadowColor = glowColor;\n          renderCtx.shadowBlur = (12 * segmentOpacityRatios[i] + 5) * actualGlowIntensity * pulseEffect;\n        } else {\n          renderCtx.shadowBlur = 0;\n        }\n\n        // Set line style and draw\n        renderCtx.strokeStyle = getColorWithOpacity(trailColor, baseOpacity);\n        renderCtx.lineWidth = segmentWidth;\n        renderCtx.lineCap = 'round';\n        renderCtx.stroke();\n\n        // Update previous point for next segment\n        prevPoint = nextPoint;\n      }\n\n      // Draw comet head\n      const headPoint = getPointOnCircle(cometPositionRef.current, centerX, centerY, radius);\n\n      // Larger outer glow for comet head\n      renderCtx.beginPath();\n      renderCtx.arc(headPoint.x, headPoint.y, cometSize * 1.5 * pulseEffect, 0, Math.PI * 2);\n      renderCtx.fillStyle = getColorWithOpacity(glowColor, 0.4 * actualGlowIntensity * pulseEffect);\n      renderCtx.shadowColor = glowColor;\n      renderCtx.shadowBlur = 15 * actualGlowIntensity * pulseEffect;\n      renderCtx.fill();\n\n      // Draw comet head\n      renderCtx.beginPath();\n      renderCtx.arc(headPoint.x, headPoint.y, cometSize * pulseEffect, 0, Math.PI * 2);\n      renderCtx.fillStyle = getColorWithOpacity(glowColor, 0.6 * actualGlowIntensity * pulseEffect);\n      renderCtx.shadowColor = glowColor;\n      renderCtx.shadowBlur = 12 * actualGlowIntensity * pulseEffect;\n      renderCtx.fill();\n\n      // Brightest center point\n      renderCtx.beginPath();\n      renderCtx.arc(headPoint.x, headPoint.y, cometSize * 0.4 * pulseEffect, 0, Math.PI * 2);\n      renderCtx.fillStyle = getColorWithOpacity(coreColor, 0.8 * actualGlowIntensity * pulseEffect);\n      renderCtx.shadowColor = coreColor;\n      renderCtx.shadowBlur = 8 * actualGlowIntensity * pulseEffect;\n      renderCtx.fill();\n\n      // If using offscreen canvas, copy to main canvas\n      if (offScreenCtxRef.current && offScreenCanvasRef.current) {\n        ctx.clearRect(0, 0, canvas.width / pixelRatio, canvas.height / pixelRatio);\n        ctx.drawImage(offScreenCanvasRef.current, 0, 0, offScreenCanvasRef.current.width, offScreenCanvasRef.current.height, 0, 0, canvas.width / pixelRatio, canvas.height / pixelRatio);\n      }\n\n      // Debug information\n      if (debug) {\n        renderCtx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n        renderCtx.font = '10px monospace';\n        renderCtx.fillText(`FPS: ${Math.round(1000 / deltaTime)}`, 10, 15);\n        renderCtx.fillText(`Hover: ${transitionValue.toFixed(2)}`, 10, 30);\n        renderCtx.fillText(`Quality: ${qualityFactorRef.current.toFixed(2)}`, 10, 45);\n\n        // Draw circle path for debugging\n        renderCtx.beginPath();\n        renderCtx.arc(centerX, centerY, radius, 0, Math.PI * 2);\n        renderCtx.strokeStyle = 'rgba(255, 255, 255, 0.2)';\n        renderCtx.lineWidth = 1;\n        renderCtx.stroke();\n      }\n\n      // Callback when render completes\n      if (onRenderComplete) {\n        onRenderComplete({\n          position: cometPositionRef.current,\n          hovering: transitionValue > 0,\n          deltaTime\n        });\n      }\n\n      // Request next frame\n      requestRef.current = requestAnimationFrame(animateComet);\n    };\n\n    // Helper function to add opacity to a color\n    function getColorWithOpacity(color, opacity) {\n      return color.replace(/[\\d.]+\\)$/, `${opacity})`);\n    }\n\n    // Start animation\n    requestRef.current = requestAnimationFrame(animateComet);\n\n    // Cleanup\n    return () => {\n      if (requestRef.current) {\n        cancelAnimationFrame(requestRef.current);\n      }\n    };\n  }, [dimensions, isHovered, size, trailLength, speed, hoverSpeedMultiplier, trailSegments, glowIntensity, getPointOnCircle, prefersReducedMotion, respectReducedMotion, active, isVisible, deviceCapabilities.isMobile, frameInterval, coreColor, glowColor, trailColor, positionMode, radiusOffset, enablePulse, pulseFrequency, pulseIntensity, debug, onRenderComplete]);\n\n  // Create elegant fade-in effect based on reduced motion preference\n  const opacityStyle = useMemo(() => {\n    if (respectReducedMotion && prefersReducedMotion) {\n      return 0.3;\n    }\n    return 1;\n  }, [prefersReducedMotion, respectReducedMotion]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    style: {\n      position: 'absolute',\n      top: -paddingTop,\n      left: -paddingLeft,\n      right: -paddingRight,\n      bottom: -paddingBottom,\n      // Hardware acceleration hints\n      willChange: prefersReducedMotion ? 'auto' : 'transform',\n      transform: 'translateZ(0)',\n      display: 'block',\n      boxSizing: 'border-box',\n      pointerEvents: 'none'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        display: 'block',\n        opacity: opacityStyle,\n        transition: 'opacity 0.3s ease',\n        // Hardware acceleration hints\n        imageRendering: 'high-quality',\n        backfaceVisibility: 'hidden',\n        transform: 'translateZ(0)',\n        willChange: 'transform'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 629,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 613,\n    columnNumber: 5\n  }, this);\n};\n\n/**\n * GoldenCometBorder Component\n * \n * A preset version of the CometBorderEffect with a golden color scheme.\n * Perfect for creating a premium, luxurious feeling around profile images.\n * \n * @param {Object} props - Same props as CometBorderEffect with presets\n */\n_s(CometBorderEffect, \"/w8dW82asuZBbJap8WVguJlUK48=\");\n_c = CometBorderEffect;\nexport const GoldenCometBorder = props => {\n  const goldenPreset = {\n    coreColor: 'rgba(255, 255, 255, 1)',\n    glowColor: 'rgba(255, 245, 158, 0.9)',\n    trailColor: 'rgba(191, 173, 127, 0.8)',\n    size: 1.8,\n    trailLength: 120,\n    speed: 0.001,\n    hoverSpeedMultiplier: 2.5,\n    trailSegments: 30,\n    glowIntensity: 0.9,\n    enablePulse: true,\n    pulseFrequency: 4,\n    pulseIntensity: 0.15\n  };\n  return /*#__PURE__*/_jsxDEV(CometBorderEffect, {\n    ...goldenPreset,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 675,\n    columnNumber: 10\n  }, this);\n};\n\n/**\n * AzureCometBorder Component\n * \n * A preset version of the CometBorderEffect with a blue color scheme.\n * Perfect for creating a cool, modern feeling around profile images.\n * \n * @param {Object} props - Same props as CometBorderEffect with presets\n */\n_c2 = GoldenCometBorder;\nexport const AzureCometBorder = props => {\n  const azurePreset = {\n    coreColor: 'rgba(255, 255, 255, 1)',\n    glowColor: 'rgba(173, 216, 230, 0.9)',\n    trailColor: 'rgba(0, 191, 255, 0.7)',\n    size: 1.8,\n    trailLength: 120,\n    speed: 0.001,\n    hoverSpeedMultiplier: 2.5,\n    trailSegments: 30,\n    glowIntensity: 0.9,\n    enablePulse: true,\n    pulseFrequency: 5,\n    pulseIntensity: 0.15\n  };\n  return /*#__PURE__*/_jsxDEV(CometBorderEffect, {\n    ...azurePreset,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 702,\n    columnNumber: 10\n  }, this);\n};\n\n/**\n * RubyCometBorder Component\n * \n * A preset version of the CometBorderEffect with a red color scheme.\n * Perfect for creating a vibrant, energetic feeling around profile images.\n * \n * @param {Object} props - Same props as CometBorderEffect with presets\n */\n_c3 = AzureCometBorder;\nexport const RubyCometBorder = props => {\n  const rubyPreset = {\n    coreColor: 'rgba(255, 255, 255, 1)',\n    glowColor: 'rgba(255, 200, 200, 0.9)',\n    trailColor: 'rgba(220, 20, 60, 0.7)',\n    size: 1.8,\n    trailLength: 120,\n    speed: 0.0015,\n    hoverSpeedMultiplier: 2.2,\n    trailSegments: 28,\n    glowIntensity: 0.9,\n    enablePulse: true,\n    pulseFrequency: 3,\n    pulseIntensity: 0.2\n  };\n  return /*#__PURE__*/_jsxDEV(CometBorderEffect, {\n    ...rubyPreset,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 729,\n    columnNumber: 10\n  }, this);\n};\n\n/**\n * EmeraldCometBorder Component\n * \n * A preset version of the CometBorderEffect with a green color scheme.\n * Perfect for creating a natural, organic feeling around profile images.\n * \n * @param {Object} props - Same props as CometBorderEffect with presets\n */\n_c4 = RubyCometBorder;\nexport const EmeraldCometBorder = props => {\n  const emeraldPreset = {\n    coreColor: 'rgba(255, 255, 255, 1)',\n    glowColor: 'rgba(200, 255, 200, 0.9)',\n    trailColor: 'rgba(50, 205, 50, 0.7)',\n    size: 1.8,\n    trailLength: 120,\n    speed: 0.0008,\n    hoverSpeedMultiplier: 2.2,\n    trailSegments: 25,\n    glowIntensity: 0.8,\n    enablePulse: true,\n    pulseFrequency: 6,\n    pulseIntensity: 0.1\n  };\n  return /*#__PURE__*/_jsxDEV(CometBorderEffect, {\n    ...emeraldPreset,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 756,\n    columnNumber: 10\n  }, this);\n};\n_c5 = EmeraldCometBorder;\nexport default CometBorderEffect;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"CometBorderEffect\");\n$RefreshReg$(_c2, \"GoldenCometBorder\");\n$RefreshReg$(_c3, \"AzureCometBorder\");\n$RefreshReg$(_c4, \"RubyCometBorder\");\n$RefreshReg$(_c5, \"EmeraldCometBorder\");","map":{"version":3,"names":["React","useRef","useState","useEffect","useCallback","useMemo","jsxDEV","_jsxDEV","CometBorderEffect","isHovered","size","trailLength","speed","hoverSpeedMultiplier","trailSegments","glowIntensity","targetFPS","coreColor","glowColor","trailColor","radiusOffset","adaptiveQuality","respectReducedMotion","enableBattery","onRenderComplete","debug","active","positionMode","reverseDirection","startingPosition","enablePulse","pulseFrequency","pulseIntensity","paddingTop","paddingRight","paddingBottom","paddingLeft","_s","canvasRef","containerRef","requestRef","lastTimeRef","frameRateThrottleRef","visibilityChangeTimeRef","batteryRef","pixelRatioRef","qualityFactorRef","offScreenCanvasRef","offScreenCtxRef","cometPositionRef","hoverTransitionRef","dimensions","setDimensions","width","height","prefersReducedMotion","setPrefersReducedMotion","isVisible","setIsVisible","deviceCapabilities","setDeviceCapabilities","memory","cores","batteryLevel","isCharging","isMobile","frameInterval","detectCapabilities","navigator","deviceMemory","hardwareConcurrency","test","userAgent","getBattery","then","battery","current","updateBattery","prev","level","charging","Math","min","addEventListener","catch","performanceScore","quality","targetValue","currentValue","animateHoverTransition","step","max","requestAnimationFrame","reducedMotionQuery","window","matchMedia","matches","handleReducedMotionChange","e","handleVisibilityChange","document","hidden","performance","now","timeDelta","observer","IntersectionObserver","entries","isIntersecting","threshold","observe","removeEventListener","disconnect","getPointOnCircle","angle","centerX","centerY","radius","directionFactor","x","cos","y","sin","currentContainer","updateDimensions","rect","getBoundingClientRect","devicePixelRatio","setupOffscreenCanvas","OffscreenCanvas","pixelRatio","canvas","ctx","getContext","alpha","willReadFrequently","desynchronized","scale","error","console","warn","resizeObserver","ResizeObserver","unobserve","style","adaptiveTrailSegments","floor","segmentOpacityRatios","Array","fill","map","_","i","segmentWidthRatios","animateComet","timestamp","elapsed","deltaTime","transitionValue","actualSpeed","PI","renderCtx","targetCanvas","clearRect","hoverFactor","cometSize","actualTrailLength","actualGlowIntensity","pulseEffect","pulsePhase","prevPoint","segmentAngle","nextPoint","baseOpacity","segmentWidth","beginPath","moveTo","lineTo","shadowColor","shadowBlur","strokeStyle","getColorWithOpacity","lineWidth","lineCap","stroke","headPoint","arc","fillStyle","drawImage","font","fillText","round","toFixed","position","hovering","color","opacity","replace","cancelAnimationFrame","opacityStyle","ref","top","left","right","bottom","willChange","transform","display","boxSizing","pointerEvents","children","transition","imageRendering","backfaceVisibility","fileName","_jsxFileName","lineNumber","columnNumber","_c","GoldenCometBorder","props","goldenPreset","_c2","AzureCometBorder","azurePreset","_c3","RubyCometBorder","rubyPreset","_c4","EmeraldCometBorder","emeraldPreset","_c5","$RefreshReg$"],"sources":["/home/valeria/Documents/Crucible/frontend/src/components/core/effects/bordereffects/CometBorderEffect.jsx"],"sourcesContent":["import React, { useRef, useState, useEffect, useCallback, useMemo } from 'react';\n\n/**\n * CometBorderEffect Component - Enterprise Performance Optimized\n * \n * Creates a highly performant comet animation that orbits around a circular container,\n * perfect for profile images, avatars, and circular UI elements. Features a glowing\n * trailing effect with customizable parameters.\n * \n * Features:\n * - Advanced performance optimizations with adaptive rendering\n * - Memory-efficient object pooling and canvas management\n * - Hardware acceleration and high-DPI display support\n * - Accessibility compliance with reduced motion support\n * - Hover state enhancements with smooth transitions\n * - Battery and CPU-efficient rendering pipeline\n * \n * @param {Object} props - Component props\n * @param {boolean} [props.isHovered=false] - Whether the containing element is hovered\n * @param {number} [props.size=2] - Size of the comet\n * @param {number} [props.trailLength=140] - Length of the comet trail in degrees\n * @param {number} [props.speed=0.01] - Base speed of the comet\n * @param {number} [props.hoverSpeedMultiplier=2] - Speed increase when hovered\n * @param {number} [props.trailSegments=25] - Number of segments in the comet trail\n * @param {number} [props.glowIntensity=0.8] - Intensity of the glow effect\n * @param {number} [props.targetFPS=60] - Target frames per second\n * @param {string} [props.coreColor='rgba(255, 255, 255, 1)'] - Core color of the comet\n * @param {string} [props.glowColor='rgba(255, 253, 227, 0.8)'] - Glow color of the comet\n * @param {string} [props.trailColor='rgba(191, 173, 127, 0.8)'] - Trail color of the comet\n * @param {boolean} [props.radiusOffset=20] - Offset from edge of container in pixels\n * @param {boolean} [props.adaptiveQuality=true] - Enable adaptive quality based on device\n * @param {boolean} [props.respectReducedMotion=true] - Respect reduced motion preference\n * @param {boolean} [props.enableBattery=true] - Enable battery-saving optimizations\n * @param {function} [props.onRenderComplete] - Callback when the render completes\n * @param {boolean} [props.debug=false] - Enable debug visualization\n * @param {boolean} [props.active=true] - Whether the animation is active\n * @param {string} [props.positionMode='outside'] - Position mode: 'outside', 'inside', or 'center'\n * @param {boolean} [props.reverseDirection=false] - Reverse the direction of the comet\n * @param {number} [props.startingPosition=0] - Starting position in radians\n * @param {boolean} [props.enablePulse=true] - Enable pulsing effect\n * @param {number} [props.pulseFrequency=5] - Pulse frequency in seconds\n * @param {number} [props.pulseIntensity=0.2] - Intensity of the pulse effect\n * @param {number} [props.paddingTop=0] - Extra padding for container top\n * @param {number} [props.paddingRight=0] - Extra padding for container right\n * @param {number} [props.paddingBottom=0] - Extra padding for container bottom\n * @param {number} [props.paddingLeft=0] - Extra padding for container left\n */\nconst CometBorderEffect = ({\n  isHovered = false,\n  size = 2,\n  trailLength = 140,\n  speed = 0.01,\n  hoverSpeedMultiplier = 2,\n  trailSegments = 25,\n  glowIntensity = 0.8,\n  targetFPS = 60,\n  coreColor = 'rgba(255, 255, 255, 1)',\n  glowColor = 'rgba(255, 253, 227, 0.8)',\n  trailColor = 'rgba(191, 173, 127, 0.8)',\n  radiusOffset = 20,\n  adaptiveQuality = true,\n  respectReducedMotion = true,\n  enableBattery = true,\n  onRenderComplete = null,\n  debug = false,\n  active = true,\n  positionMode = 'outside',\n  reverseDirection = false,\n  startingPosition = 0,\n  enablePulse = true,\n  pulseFrequency = 5,\n  pulseIntensity = 0.2,\n  paddingTop = 0,\n  paddingRight = 0,\n  paddingBottom = 0,\n  paddingLeft = 0,\n}) => {\n  // Refs for DOM elements and animation state\n  const canvasRef = useRef(null);\n  const containerRef = useRef(null);\n  const requestRef = useRef(null);\n  const lastTimeRef = useRef(0);\n  const frameRateThrottleRef = useRef(0);\n  const visibilityChangeTimeRef = useRef(0);\n  const batteryRef = useRef(null);\n  const pixelRatioRef = useRef(1);\n  const qualityFactorRef = useRef(1);\n  const offScreenCanvasRef = useRef(null);\n  const offScreenCtxRef = useRef(null);\n  \n  // Animation parameters\n  const cometPositionRef = useRef(startingPosition);\n  const hoverTransitionRef = useRef(0); // 0-1 for smooth hover transitions\n  \n  // Component state\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });\n  const [prefersReducedMotion, setPrefersReducedMotion] = useState(false);\n  const [isVisible, setIsVisible] = useState(false);\n  const [deviceCapabilities, setDeviceCapabilities] = useState({\n    memory: 4,\n    cores: 4,\n    batteryLevel: 1,\n    isCharging: true,\n    isMobile: false\n  });\n  \n  // Pre-calculate frame interval for throttling\n  const frameInterval = useMemo(() => 1000 / targetFPS, [targetFPS]);\n  \n  // Detects device capabilities and sets up optimization strategies\n  const detectCapabilities = useCallback(() => {\n    // Device memory, hardware concurrency, and mobile detection\n    const memory = navigator.deviceMemory || 4;\n    const cores = navigator.hardwareConcurrency || 4;\n    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n    \n    // Get battery info if available\n    if (navigator.getBattery && enableBattery) {\n      navigator.getBattery().then(battery => {\n        batteryRef.current = battery;\n        \n        const updateBattery = () => {\n          setDeviceCapabilities(prev => ({\n            ...prev,\n            batteryLevel: battery.level,\n            isCharging: battery.charging\n          }));\n          \n          // Reduce quality if on battery and below 30%\n          if (!battery.charging && battery.level < 0.3 && adaptiveQuality) {\n            qualityFactorRef.current = Math.min(qualityFactorRef.current, 0.6);\n          }\n        };\n        \n        // Add battery event listeners\n        battery.addEventListener('levelchange', updateBattery);\n        battery.addEventListener('chargingchange', updateBattery);\n        \n        // Initial update\n        updateBattery();\n      }).catch(() => {\n        // Fallback if battery API is not available\n        setDeviceCapabilities(prev => ({\n          ...prev,\n          batteryLevel: 1,\n          isCharging: true\n        }));\n      });\n    }\n    \n    // Set device capabilities state\n    setDeviceCapabilities({\n      memory,\n      cores,\n      batteryLevel: 1,\n      isCharging: true,\n      isMobile\n    });\n    \n    // Calculate quality factor based on capabilities\n    if (adaptiveQuality) {\n      // Base score from hardware\n      const performanceScore = (memory * cores) / (isMobile ? 2 : 1);\n      \n      // Scale quality based on performance score\n      let quality = 1;\n      \n      if (performanceScore > 16) {\n        quality = 1; // High-end devices\n      } else if (performanceScore > 8) {\n        quality = 0.8; // Mid-range devices\n      } else if (performanceScore > 4) {\n        quality = 0.6; // Low-end devices\n      } else {\n        quality = 0.4; // Very low-end devices\n      }\n      \n      qualityFactorRef.current = quality;\n    }\n  }, [adaptiveQuality, enableBattery]);\n  \n  // Smooth transition for hover state\n  useEffect(() => {\n    // Skip animation if reduced motion is preferred\n    if (respectReducedMotion && prefersReducedMotion) return;\n    \n    // Target value for hover transition\n    const targetValue = isHovered ? 1 : 0;\n    let currentValue = hoverTransitionRef.current;\n    \n    // If already at target value, skip animation\n    if (currentValue === targetValue) return;\n    \n    // Animation step for smooth transition\n    const animateHoverTransition = () => {\n      // Move towards target at rate of 0.1 per 16ms (about 0.6 per 100ms)\n      const step = 0.1;\n      \n      if (targetValue > currentValue) {\n        currentValue = Math.min(targetValue, currentValue + step);\n      } else {\n        currentValue = Math.max(targetValue, currentValue - step);\n      }\n      \n      hoverTransitionRef.current = currentValue;\n      \n      // Continue animation if not at target yet\n      if (currentValue !== targetValue) {\n        requestAnimationFrame(animateHoverTransition);\n      }\n    };\n    \n    // Start animation\n    animateHoverTransition();\n  }, [isHovered, prefersReducedMotion, respectReducedMotion]);\n  \n  // Setup device capabilities, reduced motion detection and visibility observer\n  useEffect(() => {\n    // Check for reduced motion preference\n    const reducedMotionQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\n    setPrefersReducedMotion(reducedMotionQuery.matches);\n    \n    const handleReducedMotionChange = (e) => {\n      setPrefersReducedMotion(e.matches);\n    };\n    \n    reducedMotionQuery.addEventListener('change', handleReducedMotionChange);\n    \n    // Detect device capabilities\n    detectCapabilities();\n    \n    // Setup visibility change detection\n    const handleVisibilityChange = () => {\n      if (document.hidden) {\n        visibilityChangeTimeRef.current = performance.now();\n      } else {\n        // Adjust timing references after visibility changes\n        const timeDelta = performance.now() - visibilityChangeTimeRef.current;\n        lastTimeRef.current += timeDelta;\n      }\n    };\n    \n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    \n    // Setup intersection observer for visibility detection\n    if (containerRef.current) {\n      const observer = new IntersectionObserver(\n        entries => {\n          setIsVisible(entries[0].isIntersecting);\n        },\n        { threshold: 0.1 }\n      );\n      \n      observer.observe(containerRef.current);\n      \n      return () => {\n        reducedMotionQuery.removeEventListener('change', handleReducedMotionChange);\n        document.removeEventListener('visibilitychange', handleVisibilityChange);\n        observer.disconnect();\n      };\n    }\n    \n    return () => {\n      reducedMotionQuery.removeEventListener('change', handleReducedMotionChange);\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n    };\n  }, [detectCapabilities]);\n  \n  // Memoized function to get points on circle\n  const getPointOnCircle = useCallback((angle, centerX, centerY, radius) => {\n    const directionFactor = reverseDirection ? -1 : 1;\n    return {\n      x: centerX + radius * Math.cos(angle * directionFactor),\n      y: centerY + radius * Math.sin(angle * directionFactor)\n    };\n  }, [reverseDirection]);\n  \n  // Update dimensions with resize observer for better performance\n  useEffect(() => {\n    if (!containerRef.current) return;\n    \n    // Capture ref value to use in cleanup\n    const currentContainer = containerRef.current;\n    \n    const updateDimensions = () => {\n      if (currentContainer) {\n        // Get the container dimensions\n        const rect = currentContainer.getBoundingClientRect();\n        \n        // Apply padding adjustments\n        const width = Math.max(1, rect.width + paddingLeft + paddingRight);\n        const height = Math.max(1, rect.height + paddingTop + paddingBottom);\n        \n        setDimensions({ width, height });\n        \n        // Update pixel ratio for high-DPI displays\n        pixelRatioRef.current = window.devicePixelRatio || 1;\n        \n        // Initialize offscreen canvas for better performance\n        setupOffscreenCanvas(width, height);\n      }\n    };\n    \n    // Setup offscreen canvas for performance\n    const setupOffscreenCanvas = (width, height) => {\n      try {\n        // Create offscreen canvas if supported\n        if (typeof OffscreenCanvas !== 'undefined') {\n          const pixelRatio = pixelRatioRef.current;\n          const canvas = new OffscreenCanvas(\n            width * pixelRatio,\n            height * pixelRatio\n          );\n          \n          const ctx = canvas.getContext('2d', {\n            alpha: true,\n            willReadFrequently: false,\n            desynchronized: true\n          });\n          \n          if (ctx) {\n            ctx.scale(pixelRatio, pixelRatio);\n            offScreenCanvasRef.current = canvas;\n            offScreenCtxRef.current = ctx;\n          }\n        }\n      } catch (error) {\n        console.warn('Failed to create offscreen canvas:', error);\n      }\n    };\n    \n    // Use ResizeObserver instead of window resize event\n    const resizeObserver = new ResizeObserver(updateDimensions);\n    resizeObserver.observe(currentContainer);\n    \n    // Initial dimensions calculation\n    updateDimensions();\n    \n    return () => {\n      resizeObserver.unobserve(currentContainer);\n      resizeObserver.disconnect();\n    };\n  }, [paddingTop, paddingRight, paddingBottom, paddingLeft]);\n  \n  // Main animation effect\n  useEffect(() => {\n    // Skip animation if reduced motion is preferred or component is not active\n    if ((respectReducedMotion && prefersReducedMotion) || !active || !isVisible) return;\n    \n    // Skip if container or canvas is not available\n    if (!canvasRef.current || !containerRef.current || dimensions.width === 0) return;\n    \n    // Capture ref values to use in cleanup\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d', { \n      alpha: true, \n      willReadFrequently: false,\n      desynchronized: true\n    });\n    \n    if (!ctx) return; // Safety check for context\n    \n    // Mobile detection for performance optimization\n    const isMobile = deviceCapabilities.isMobile;\n    \n    // Set canvas dimensions with device pixel ratio for sharper rendering\n    // Use lower pixel ratio on mobile for performance\n    const pixelRatio = isMobile ? \n      Math.min(pixelRatioRef.current, 1.5) : \n      pixelRatioRef.current;\n    \n    canvas.width = Math.max(dimensions.width, 1) * pixelRatio;\n    canvas.height = Math.max(dimensions.height, 1) * pixelRatio;\n    canvas.style.width = `${dimensions.width}px`;\n    canvas.style.height = `${dimensions.height}px`;\n    ctx.scale(pixelRatio, pixelRatio);\n    \n    // Calculate circle properties\n    const centerX = dimensions.width / 2;\n    const centerY = dimensions.height / 2;\n    \n    // Determine radius based on positionMode\n    let radius;\n    if (positionMode === 'inside') {\n      radius = Math.min(centerX, centerY) - radiusOffset * 2;\n    } else if (positionMode === 'center') {\n      radius = Math.min(centerX, centerY) - radiusOffset;\n    } else { // 'outside' (default)\n      radius = Math.min(centerX, centerY) - radiusOffset;\n    }\n    \n    // Adaptive quality settings based on device capabilities\n    const adaptiveTrailSegments = Math.max(\n      5,\n      Math.floor(trailSegments * qualityFactorRef.current)\n    );\n    \n    // Pre-calculate segment opacity and width ratios for better performance\n    const segmentOpacityRatios = new Array(adaptiveTrailSegments).fill(0).map((_, i) => \n      1 - (i / adaptiveTrailSegments)\n    );\n    \n    const segmentWidthRatios = new Array(adaptiveTrailSegments).fill(0).map((_, i) => \n      1 - (i / adaptiveTrailSegments * 0.7)\n    );\n    \n    // Animation function\n    const animateComet = (timestamp) => {\n      // Initialize timestamp\n      if (!lastTimeRef.current) {\n        lastTimeRef.current = timestamp;\n        frameRateThrottleRef.current = timestamp;\n        requestRef.current = requestAnimationFrame(animateComet);\n        return;\n      }\n      \n      // Frame rate throttling for consistent animation speed\n      const elapsed = timestamp - frameRateThrottleRef.current;\n      if (elapsed < frameInterval) {\n        requestRef.current = requestAnimationFrame(animateComet);\n        return;\n      }\n      \n      // Calculate delta time and update frame rate throttle\n      const deltaTime = timestamp - lastTimeRef.current;\n      lastTimeRef.current = timestamp;\n      frameRateThrottleRef.current = timestamp;\n      \n      // Calculate actual speed with hover effect\n      const transitionValue = hoverTransitionRef.current;\n      const actualSpeed = speed * (1 + (hoverSpeedMultiplier - 1) * transitionValue);\n      \n      // Update comet position with deltaTime consideration\n      cometPositionRef.current = (cometPositionRef.current + actualSpeed * deltaTime) % (2 * Math.PI);\n      \n      // Determine which context to use (offscreen if available, main canvas otherwise)\n      const renderCtx = offScreenCtxRef.current || ctx;\n      const targetCanvas = offScreenCanvasRef.current || canvas;\n      \n      // Clear the canvas - use clearRect for better performance\n      renderCtx.clearRect(0, 0, targetCanvas.width / pixelRatio, targetCanvas.height / pixelRatio);\n      \n      // Calculate actual parameters based on hover state\n      const hoverFactor = hoverTransitionRef.current;\n      const cometSize = size * (1 + hoverFactor * 0.2);\n      const actualTrailLength = trailLength * (1 + hoverFactor * 0.2);\n      const actualGlowIntensity = glowIntensity * (1 + hoverFactor * 0.5);\n      \n      // Apply pulse effect if enabled\n      let pulseEffect = 1;\n      if (enablePulse) {\n        const pulsePhase = (timestamp % (pulseFrequency * 1000)) / (pulseFrequency * 1000) * Math.PI * 2;\n        pulseEffect = 1 + Math.sin(pulsePhase) * pulseIntensity;\n      }\n      \n      // Draw trail segments\n      let prevPoint = getPointOnCircle(cometPositionRef.current, centerX, centerY, radius);\n      \n      for (let i = 0; i < adaptiveTrailSegments; i++) {\n        const segmentAngle = cometPositionRef.current - ((i + 1) * (actualTrailLength / 180 * Math.PI / adaptiveTrailSegments));\n        const nextPoint = getPointOnCircle(segmentAngle, centerX, centerY, radius);\n        \n        // Calculate opacity and width using pre-calculated ratios\n        const baseOpacity = 0.9 * segmentOpacityRatios[i] * pulseEffect;\n        const segmentWidth = cometSize * segmentWidthRatios[i] * pulseEffect + 0.5;\n        \n        // Skip nearly invisible segments for performance\n        if (baseOpacity < 0.05) continue;\n        \n        // Draw trail segment with optimized settings\n        renderCtx.beginPath();\n        renderCtx.moveTo(prevPoint.x, prevPoint.y);\n        renderCtx.lineTo(nextPoint.x, nextPoint.y);\n        \n        // Apply shadow/glow only when necessary (reduces GPU load)\n        // Only apply to first half of segments\n        if (i < adaptiveTrailSegments / 2 && qualityFactorRef.current > 0.7) {\n          renderCtx.shadowColor = glowColor;\n          renderCtx.shadowBlur = (12 * segmentOpacityRatios[i] + 5) * actualGlowIntensity * pulseEffect;\n        } else {\n          renderCtx.shadowBlur = 0;\n        }\n        \n        // Set line style and draw\n        renderCtx.strokeStyle = getColorWithOpacity(trailColor, baseOpacity);\n        renderCtx.lineWidth = segmentWidth;\n        renderCtx.lineCap = 'round';\n        renderCtx.stroke();\n        \n        // Update previous point for next segment\n        prevPoint = nextPoint;\n      }\n      \n      // Draw comet head\n      const headPoint = getPointOnCircle(cometPositionRef.current, centerX, centerY, radius);\n      \n      // Larger outer glow for comet head\n      renderCtx.beginPath();\n      renderCtx.arc(headPoint.x, headPoint.y, cometSize * 1.5 * pulseEffect, 0, Math.PI * 2);\n      renderCtx.fillStyle = getColorWithOpacity(glowColor, 0.4 * actualGlowIntensity * pulseEffect);\n      renderCtx.shadowColor = glowColor;\n      renderCtx.shadowBlur = 15 * actualGlowIntensity * pulseEffect;\n      renderCtx.fill();\n      \n      // Draw comet head\n      renderCtx.beginPath();\n      renderCtx.arc(headPoint.x, headPoint.y, cometSize * pulseEffect, 0, Math.PI * 2);\n      renderCtx.fillStyle = getColorWithOpacity(glowColor, 0.6 * actualGlowIntensity * pulseEffect);\n      renderCtx.shadowColor = glowColor;\n      renderCtx.shadowBlur = 12 * actualGlowIntensity * pulseEffect;\n      renderCtx.fill();\n      \n      // Brightest center point\n      renderCtx.beginPath();\n      renderCtx.arc(headPoint.x, headPoint.y, cometSize * 0.4 * pulseEffect, 0, Math.PI * 2);\n      renderCtx.fillStyle = getColorWithOpacity(coreColor, 0.8 * actualGlowIntensity * pulseEffect);\n      renderCtx.shadowColor = coreColor;\n      renderCtx.shadowBlur = 8 * actualGlowIntensity * pulseEffect;\n      renderCtx.fill();\n      \n      // If using offscreen canvas, copy to main canvas\n      if (offScreenCtxRef.current && offScreenCanvasRef.current) {\n        ctx.clearRect(0, 0, canvas.width / pixelRatio, canvas.height / pixelRatio);\n        ctx.drawImage(\n          offScreenCanvasRef.current, \n          0, 0, \n          offScreenCanvasRef.current.width, offScreenCanvasRef.current.height,\n          0, 0,\n          canvas.width / pixelRatio, canvas.height / pixelRatio\n        );\n      }\n      \n      // Debug information\n      if (debug) {\n        renderCtx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n        renderCtx.font = '10px monospace';\n        renderCtx.fillText(`FPS: ${Math.round(1000 / deltaTime)}`, 10, 15);\n        renderCtx.fillText(`Hover: ${transitionValue.toFixed(2)}`, 10, 30);\n        renderCtx.fillText(`Quality: ${qualityFactorRef.current.toFixed(2)}`, 10, 45);\n        \n        // Draw circle path for debugging\n        renderCtx.beginPath();\n        renderCtx.arc(centerX, centerY, radius, 0, Math.PI * 2);\n        renderCtx.strokeStyle = 'rgba(255, 255, 255, 0.2)';\n        renderCtx.lineWidth = 1;\n        renderCtx.stroke();\n      }\n      \n      // Callback when render completes\n      if (onRenderComplete) {\n        onRenderComplete({\n          position: cometPositionRef.current,\n          hovering: transitionValue > 0,\n          deltaTime\n        });\n      }\n      \n      // Request next frame\n      requestRef.current = requestAnimationFrame(animateComet);\n    };\n    \n    // Helper function to add opacity to a color\n    function getColorWithOpacity(color, opacity) {\n      return color.replace(/[\\d.]+\\)$/, `${opacity})`);\n    }\n    \n    // Start animation\n    requestRef.current = requestAnimationFrame(animateComet);\n    \n    // Cleanup\n    return () => {\n      if (requestRef.current) {\n        cancelAnimationFrame(requestRef.current);\n      }\n    };\n  }, [\n    dimensions, \n    isHovered, \n    size, \n    trailLength, \n    speed, \n    hoverSpeedMultiplier, \n    trailSegments, \n    glowIntensity, \n    getPointOnCircle, \n    prefersReducedMotion, \n    respectReducedMotion,\n    active,\n    isVisible,\n    deviceCapabilities.isMobile,\n    frameInterval,\n    coreColor,\n    glowColor,\n    trailColor,\n    positionMode,\n    radiusOffset,\n    enablePulse,\n    pulseFrequency,\n    pulseIntensity,\n    debug,\n    onRenderComplete\n  ]);\n  \n  // Create elegant fade-in effect based on reduced motion preference\n  const opacityStyle = useMemo(() => {\n    if (respectReducedMotion && prefersReducedMotion) {\n      return 0.3;\n    }\n    return 1;\n  }, [prefersReducedMotion, respectReducedMotion]);\n  \n  return (\n    <div \n      ref={containerRef} \n      style={{ \n        position: 'absolute', \n        top: -paddingTop, \n        left: -paddingLeft, \n        right: -paddingRight, \n        bottom: -paddingBottom,\n        // Hardware acceleration hints\n        willChange: prefersReducedMotion ? 'auto' : 'transform',\n        transform: 'translateZ(0)',\n        display: 'block',\n        boxSizing: 'border-box',\n        pointerEvents: 'none',\n      }}\n    >\n      <canvas \n        ref={canvasRef} \n        style={{ \n          position: 'absolute', \n          top: 0, \n          left: 0,\n          width: '100%',\n          height: '100%',\n          display: 'block', \n          opacity: opacityStyle,\n          transition: 'opacity 0.3s ease',\n          // Hardware acceleration hints\n          imageRendering: 'high-quality',\n          backfaceVisibility: 'hidden',\n          transform: 'translateZ(0)',\n          willChange: 'transform'\n        }} \n      />\n    </div>\n  );\n};\n\n/**\n * GoldenCometBorder Component\n * \n * A preset version of the CometBorderEffect with a golden color scheme.\n * Perfect for creating a premium, luxurious feeling around profile images.\n * \n * @param {Object} props - Same props as CometBorderEffect with presets\n */\nexport const GoldenCometBorder = (props) => {\n  const goldenPreset = {\n    coreColor: 'rgba(255, 255, 255, 1)',\n    glowColor: 'rgba(255, 245, 158, 0.9)',\n    trailColor: 'rgba(191, 173, 127, 0.8)',\n    size: 1.8,\n    trailLength: 120,\n    speed: 0.001,\n    hoverSpeedMultiplier: 2.5,\n    trailSegments: 30,\n    glowIntensity: 0.9,\n    enablePulse: true,\n    pulseFrequency: 4,\n    pulseIntensity: 0.15\n  };\n  \n  return <CometBorderEffect {...goldenPreset} {...props} />;\n};\n\n/**\n * AzureCometBorder Component\n * \n * A preset version of the CometBorderEffect with a blue color scheme.\n * Perfect for creating a cool, modern feeling around profile images.\n * \n * @param {Object} props - Same props as CometBorderEffect with presets\n */\nexport const AzureCometBorder = (props) => {\n  const azurePreset = {\n    coreColor: 'rgba(255, 255, 255, 1)',\n    glowColor: 'rgba(173, 216, 230, 0.9)',\n    trailColor: 'rgba(0, 191, 255, 0.7)',\n    size: 1.8,\n    trailLength: 120,\n    speed: 0.001,\n    hoverSpeedMultiplier: 2.5,\n    trailSegments: 30,\n    glowIntensity: 0.9,\n    enablePulse: true,\n    pulseFrequency: 5,\n    pulseIntensity: 0.15\n  };\n  \n  return <CometBorderEffect {...azurePreset} {...props} />;\n};\n\n/**\n * RubyCometBorder Component\n * \n * A preset version of the CometBorderEffect with a red color scheme.\n * Perfect for creating a vibrant, energetic feeling around profile images.\n * \n * @param {Object} props - Same props as CometBorderEffect with presets\n */\nexport const RubyCometBorder = (props) => {\n  const rubyPreset = {\n    coreColor: 'rgba(255, 255, 255, 1)',\n    glowColor: 'rgba(255, 200, 200, 0.9)',\n    trailColor: 'rgba(220, 20, 60, 0.7)',\n    size: 1.8,\n    trailLength: 120,\n    speed: 0.0015,\n    hoverSpeedMultiplier: 2.2,\n    trailSegments: 28,\n    glowIntensity: 0.9,\n    enablePulse: true,\n    pulseFrequency: 3,\n    pulseIntensity: 0.2\n  };\n  \n  return <CometBorderEffect {...rubyPreset} {...props} />;\n};\n\n/**\n * EmeraldCometBorder Component\n * \n * A preset version of the CometBorderEffect with a green color scheme.\n * Perfect for creating a natural, organic feeling around profile images.\n * \n * @param {Object} props - Same props as CometBorderEffect with presets\n */\nexport const EmeraldCometBorder = (props) => {\n  const emeraldPreset = {\n    coreColor: 'rgba(255, 255, 255, 1)',\n    glowColor: 'rgba(200, 255, 200, 0.9)',\n    trailColor: 'rgba(50, 205, 50, 0.7)',\n    size: 1.8,\n    trailLength: 120,\n    speed: 0.0008,\n    hoverSpeedMultiplier: 2.2,\n    trailSegments: 25,\n    glowIntensity: 0.8,\n    enablePulse: true,\n    pulseFrequency: 6,\n    pulseIntensity: 0.1\n  };\n  \n  return <CometBorderEffect {...emeraldPreset} {...props} />;\n};\n\nexport default CometBorderEffect;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}