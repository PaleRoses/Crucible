{"ast":null,"code":"var _jsxFileName = \"/home/valeria/Documents/Crucible/frontend/src/components/core/Background.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useMemo, useCallback } from 'react';\nimport { createUseStyles } from 'react-jss';\n\n// CSS-in-JS styles with improved performance properties\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = createUseStyles({\n  backgroundWrapper: {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n    zIndex: 1,\n    pointerEvents: 'none',\n    overflow: 'hidden'\n  },\n  backgroundCanvas: {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n    zIndex: 1,\n    pointerEvents: 'none',\n    willChange: 'transform',\n    // Hardware acceleration hint\n    backfaceVisibility: 'hidden',\n    transform: 'translateZ(0)'\n  }\n});\n\n// Enhanced constellation definitions with more subtle, elegant patterns\nconst CONSTELLATIONS = [{\n  name: 'Ursa Major',\n  vertices: [{\n    x: 0.2,\n    y: 0.3\n  }, {\n    x: 0.25,\n    y: 0.28\n  }, {\n    x: 0.3,\n    y: 0.25\n  }, {\n    x: 0.35,\n    y: 0.23\n  }, {\n    x: 0.37,\n    y: 0.18\n  }, {\n    x: 0.33,\n    y: 0.15\n  }, {\n    x: 0.28,\n    y: 0.15\n  }],\n  edges: [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6]],\n  drift: {\n    x: 0.0002,\n    y: -0.00015\n  } // Subtle drift direction and speed\n}, {\n  name: 'Cassiopeia',\n  vertices: [{\n    x: 0.7,\n    y: 0.15\n  }, {\n    x: 0.75,\n    y: 0.2\n  }, {\n    x: 0.8,\n    y: 0.15\n  }, {\n    x: 0.85,\n    y: 0.2\n  }, {\n    x: 0.9,\n    y: 0.15\n  }],\n  edges: [[0, 1], [1, 2], [2, 3], [3, 4]],\n  drift: {\n    x: -0.00015,\n    y: 0.0001\n  }\n}, {\n  name: 'Lyra',\n  vertices: [{\n    x: 0.5,\n    y: 0.3\n  }, {\n    x: 0.53,\n    y: 0.35\n  }, {\n    x: 0.48,\n    y: 0.38\n  }, {\n    x: 0.45,\n    y: 0.35\n  }, {\n    x: 0.5,\n    y: 0.3\n  }, {\n    x: 0.5,\n    y: 0.25\n  }],\n  edges: [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]],\n  drift: {\n    x: 0.00008,\n    y: 0.00012\n  }\n}, {\n  name: 'Cygnus',\n  vertices: [{\n    x: 0.15,\n    y: 0.6\n  }, {\n    x: 0.2,\n    y: 0.65\n  }, {\n    x: 0.25,\n    y: 0.7\n  }, {\n    x: 0.3,\n    y: 0.75\n  }, {\n    x: 0.35,\n    y: 0.8\n  }, {\n    x: 0.25,\n    y: 0.7\n  }, {\n    x: 0.2,\n    y: 0.71\n  }, {\n    x: 0.25,\n    y: 0.7\n  }, {\n    x: 0.3,\n    y: 0.69\n  }],\n  edges: [[0, 1], [1, 2], [2, 3], [3, 4], [5, 6], [7, 8]],\n  drift: {\n    x: 0.0001,\n    y: -0.00008\n  }\n}];\n\n/**\n * Enhanced Background Component\n * \n * Creates a sophisticated, subtle starry background with elegantly drifting\n * constellations and occasional luminous effects that evoke the serene vastness of space.\n * \n * @param {Object} cursorPosition - Current cursor coordinates\n * @param {Function} setCursorPosition - Function to update cursor position\n */\nconst Background = ({\n  cursorPosition,\n  setCursorPosition\n}) => {\n  _s();\n  const classes = useStyles();\n  const canvasRef = useRef(null);\n  const starsRef = useRef([]);\n  const constellationsRef = useRef([]);\n  const requestRef = useRef(null);\n  const timeRef = useRef(0);\n  const lastFrameTimeRef = useRef(0);\n  const burstParticlesRef = useRef([]);\n  const lastBurstTimeRef = useRef(0);\n\n  // Configuration constants for fine-tuning\n  const CONFIG = useMemo(() => ({\n    starCount: 80,\n    starBaseColor: '191, 173, 127',\n    starBrightColor: '207, 185, 130',\n    starMinSize: 0.5,\n    starMaxSize: 1.8,\n    starMinOpacity: 0.05,\n    starMaxOpacity: 0.28,\n    starMaxSpeed: 0.012,\n    constellationColor: 'rgba(191, 173, 127, 0.08)',\n    constellationVertexColor: '207, 185, 130',\n    driftFactor: 1,\n    pulseFrequency: 0.0002,\n    // How often stars pulse\n    burstProbability: 0.00004,\n    // Chance of a burst effect per star per frame\n    burstParticleCount: {\n      min: 4,\n      max: 8\n    },\n    burstLifespan: 3000,\n    // Milliseconds\n    minBurstInterval: 5000,\n    // Minimum time between bursts\n    cursorInfluenceRadius: 100,\n    cursorGlowOpacity: 0.03\n  }), []);\n\n  // Create star objects with improved properties\n  const createStars = useCallback((width, height) => {\n    const {\n      starCount,\n      starMinSize,\n      starMaxSize,\n      starMinOpacity,\n      starMaxOpacity,\n      starMaxSpeed\n    } = CONFIG;\n    return Array(starCount).fill().map(() => {\n      const size = Math.random() * (starMaxSize - starMinSize) + starMinSize;\n      const opacity = Math.random() * (starMaxOpacity - starMinOpacity) + starMinOpacity;\n      return {\n        x: Math.random() * width,\n        y: Math.random() * height,\n        size,\n        baseSize: size,\n        speedX: (Math.random() - 0.5) * starMaxSpeed,\n        speedY: (Math.random() - 0.5) * starMaxSpeed,\n        opacity,\n        baseOpacity: opacity,\n        pulseAmplitude: Math.random() * 0.2 + 0.1,\n        pulseSpeed: Math.random() * 0.0015 + 0.0005,\n        pulsePhase: Math.random() * Math.PI * 2,\n        isPulsing: false,\n        lastPulseTime: 0,\n        burstCandidate: Math.random() < 0.15 // Only 15% of stars can potentially burst\n      };\n    });\n  }, [CONFIG]);\n\n  // Initialize constellations with enhanced animation properties\n  const initializeConstellations = useCallback((width, height) => {\n    return CONSTELLATIONS.map(constellation => {\n      // Convert relative coordinates to screen coordinates\n      const vertices = constellation.vertices.map(vertex => ({\n        x: vertex.x * width,\n        y: vertex.y * height,\n        originalX: vertex.x,\n        // Store original relative position\n        originalY: vertex.y,\n        size: Math.random() * 0.5 + 1.7,\n        // Varied sizes for more natural appearance\n        baseSize: Math.random() * 0.5 + 1.7,\n        opacity: Math.random() * 0.15 + 0.15,\n        baseOpacity: Math.random() * 0.15 + 0.15,\n        isPulsing: false,\n        pulseProgress: 0,\n        pulseSpeed: Math.random() * 0.003 + 0.001,\n        pulseAmplitude: Math.random() * 0.4 + 0.2,\n        lastPulseTime: 0,\n        pulseInterval: Math.random() * 15000 + 10000,\n        // Random interval between pulses\n        pulsePhase: Math.random() * Math.PI * 2,\n        // Small individual drift for each vertex to add organic movement\n        individualDrift: {\n          x: (Math.random() - 0.5) * 0.00005,\n          y: (Math.random() - 0.5) * 0.00005\n        }\n      }));\n      return {\n        name: constellation.name,\n        vertices,\n        edges: constellation.edges,\n        drift: constellation.drift || {\n          x: 0,\n          y: 0\n        },\n        // Movement pattern parameters\n        phase: Math.random() * Math.PI * 2,\n        frequency: Math.random() * 0.00005 + 0.00001\n      };\n    });\n  }, []);\n\n  // Create a burst effect\n  const createBurst = useCallback((x, y, color, timestamp) => {\n    const {\n      burstParticleCount,\n      burstLifespan\n    } = CONFIG;\n    const particleCount = Math.floor(Math.random() * (burstParticleCount.max - burstParticleCount.min) + burstParticleCount.min);\n    for (let i = 0; i < particleCount; i++) {\n      // Calculate angle and distance\n      const angle = Math.random() * Math.PI * 2;\n      const speed = Math.random() * 0.4 + 0.2;\n      burstParticlesRef.current.push({\n        x,\n        y,\n        vx: Math.cos(angle) * speed,\n        vy: Math.sin(angle) * speed,\n        size: Math.random() * 1.2 + 0.8,\n        opacity: Math.random() * 0.6 + 0.4,\n        color,\n        createdAt: timestamp,\n        lifespan: Math.random() * 500 + burstLifespan\n      });\n    }\n\n    // Set the last burst time to prevent too frequent bursts\n    lastBurstTimeRef.current = timestamp;\n  }, [CONFIG]);\n\n  // Update burst particles\n  const updateBurstParticles = useCallback((timestamp, deltaTime) => {\n    // Remove expired particles\n    burstParticlesRef.current = burstParticlesRef.current.filter(particle => {\n      const age = timestamp - particle.createdAt;\n      return age < particle.lifespan;\n    });\n\n    // Update remaining particles\n    burstParticlesRef.current.forEach(particle => {\n      const age = timestamp - particle.createdAt;\n      const lifeProgress = age / particle.lifespan;\n\n      // Update position with easing\n      particle.x += particle.vx * deltaTime * (1 - lifeProgress * 0.8);\n      particle.y += particle.vy * deltaTime * (1 - lifeProgress * 0.8);\n\n      // Fade out\n      particle.opacity = Math.max(0, particle.opacity * (1 - lifeProgress * 0.01));\n\n      // Slow down over time\n      particle.vx *= 0.99;\n      particle.vy *= 0.99;\n    });\n  }, []);\n\n  // Render burst particles\n  const renderBurstParticles = useCallback((ctx, timestamp) => {\n    burstParticlesRef.current.forEach(particle => {\n      const age = timestamp - particle.createdAt;\n      const lifeProgress = age / particle.lifespan;\n\n      // Create a subtle glow effect\n      const gradient = ctx.createRadialGradient(particle.x, particle.y, 0, particle.x, particle.y, particle.size * 3);\n      gradient.addColorStop(0, `rgba(${particle.color}, ${particle.opacity * (1 - lifeProgress)})`);\n      gradient.addColorStop(1, `rgba(${particle.color}, 0)`);\n      ctx.beginPath();\n      ctx.arc(particle.x, particle.y, particle.size * 3, 0, Math.PI * 2);\n      ctx.fillStyle = gradient;\n      ctx.fill();\n\n      // Draw center\n      ctx.beginPath();\n      ctx.arc(particle.x, particle.y, particle.size * (1 - lifeProgress * 0.5), 0, Math.PI * 2);\n      ctx.fillStyle = `rgba(${particle.color}, ${particle.opacity * (1 - lifeProgress * 0.5)})`;\n      ctx.fill();\n    });\n  }, []);\n\n  // Initialize canvas and animation elements\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d', {\n      alpha: true,\n      desynchronized: true,\n      // For lower latency if supported\n      willReadFrequently: false\n    });\n\n    // Set canvas dimensions accounting for device pixel ratio\n    const pixelRatio = window.devicePixelRatio || 1;\n    canvas.width = window.innerWidth * pixelRatio;\n    canvas.height = window.innerHeight * pixelRatio;\n\n    // Scale context to account for pixel ratio\n    ctx.scale(pixelRatio, pixelRatio);\n\n    // Initialize stars and constellations\n    starsRef.current = createStars(window.innerWidth, window.innerHeight);\n    constellationsRef.current = initializeConstellations(window.innerWidth, window.innerHeight);\n\n    // Animation loop\n    const animate = timestamp => {\n      // Calculate delta time for smooth animation regardless of frame rate\n      const deltaTime = lastFrameTimeRef.current ? Math.min(timestamp - lastFrameTimeRef.current, 32) : 16.67;\n      lastFrameTimeRef.current = timestamp;\n      timeRef.current = timestamp;\n\n      // Clear canvas with pure black\n      ctx.fillStyle = '#000000';\n      ctx.fillRect(0, 0, canvas.width / pixelRatio, canvas.height / pixelRatio);\n\n      // Update and draw stars\n      starsRef.current.forEach(star => {\n        // Apply smooth drift movement\n        star.x += star.speedX * deltaTime * CONFIG.driftFactor;\n        star.y += star.speedY * deltaTime * CONFIG.driftFactor;\n\n        // Wrap around edges\n        if (star.x < -10) star.x = window.innerWidth + 10;\n        if (star.x > window.innerWidth + 10) star.x = -10;\n        if (star.y < -10) star.y = window.innerHeight + 10;\n        if (star.y > window.innerHeight + 10) star.y = -10;\n\n        // Determine if the star should pulse\n        if (!star.isPulsing && Math.random() < CONFIG.pulseFrequency * deltaTime) {\n          star.isPulsing = true;\n          star.pulseStart = timestamp;\n        }\n\n        // Apply pulsing effect\n        if (star.isPulsing) {\n          const pulseAge = timestamp - star.pulseStart;\n          const pulseDuration = 3000 + Math.random() * 2000; // Variable duration\n          const pulseProgress = pulseAge / pulseDuration;\n\n          // Smooth pulse using sine wave\n          const pulseStrength = Math.sin(pulseProgress * Math.PI) * star.pulseAmplitude;\n          star.size = star.baseSize * (1 + pulseStrength);\n          star.opacity = star.baseOpacity * (1 + pulseStrength);\n\n          // Reset after pulse completes\n          if (pulseProgress >= 1) {\n            star.isPulsing = false;\n            star.size = star.baseSize;\n            star.opacity = star.baseOpacity;\n          }\n        }\n\n        // Trigger occasional bursts, but not too frequently\n        if (star.burstCandidate && Math.random() < CONFIG.burstProbability * deltaTime && timestamp - lastBurstTimeRef.current > CONFIG.minBurstInterval) {\n          createBurst(star.x, star.y, CONFIG.starBaseColor, timestamp);\n        }\n\n        // Draw star with a subtle glow\n        if (star.size > 1.2) {\n          // Larger stars get a subtle glow\n          const gradient = ctx.createRadialGradient(star.x, star.y, 0, star.x, star.y, star.size * 2);\n          gradient.addColorStop(0, `rgba(${CONFIG.starBrightColor}, ${star.opacity * 0.8})`);\n          gradient.addColorStop(1, `rgba(${CONFIG.starBrightColor}, 0)`);\n          ctx.beginPath();\n          ctx.arc(star.x, star.y, star.size * 2, 0, Math.PI * 2);\n          ctx.fillStyle = gradient;\n          ctx.fill();\n        }\n\n        // Draw star core\n        ctx.beginPath();\n        ctx.arc(star.x, star.y, star.size, 0, Math.PI * 2);\n        ctx.fillStyle = `rgba(${CONFIG.starBaseColor}, ${star.opacity})`;\n        ctx.fill();\n      });\n\n      // Update and draw constellations\n      constellationsRef.current.forEach(constellation => {\n        // Apply collective drift to the constellation\n        if (constellation.drift) {\n          // Oscillating movement for more organic feel\n          const driftX = constellation.drift.x * Math.sin(timestamp * constellation.frequency + constellation.phase) * deltaTime * CONFIG.driftFactor;\n          const driftY = constellation.drift.y * Math.cos(timestamp * constellation.frequency + constellation.phase * 1.3) * deltaTime * CONFIG.driftFactor;\n          constellation.vertices.forEach(vertex => {\n            // Apply collective drift plus individual vertex variation\n            vertex.x += driftX + vertex.individualDrift.x * deltaTime * CONFIG.driftFactor;\n            vertex.y += driftY + vertex.individualDrift.y * deltaTime * CONFIG.driftFactor;\n\n            // Keep vertices within bounds with a margin\n            const margin = 50;\n            if (vertex.x < -margin) vertex.x = window.innerWidth + margin;\n            if (vertex.x > window.innerWidth + margin) vertex.x = -margin;\n            if (vertex.y < -margin) vertex.y = window.innerHeight + margin;\n            if (vertex.y > window.innerHeight + margin) vertex.y = -margin;\n\n            // Update original relative position\n            vertex.originalX = vertex.x / window.innerWidth;\n            vertex.originalY = vertex.y / window.innerHeight;\n\n            // Determine if vertex should pulse\n            if (!vertex.isPulsing && timestamp - vertex.lastPulseTime > vertex.pulseInterval) {\n              vertex.isPulsing = true;\n              vertex.pulseStart = timestamp;\n              vertex.lastPulseTime = timestamp;\n            }\n\n            // Apply pulsing effect\n            if (vertex.isPulsing) {\n              const pulseAge = timestamp - vertex.pulseStart;\n              const pulseDuration = 3000 + Math.random() * 1000;\n              const pulseProgress = pulseAge / pulseDuration;\n\n              // Smooth pulse using sine wave\n              const pulseStrength = Math.sin(pulseProgress * Math.PI) * vertex.pulseAmplitude;\n              vertex.size = vertex.baseSize * (1 + pulseStrength * 0.3);\n              vertex.opacity = vertex.baseOpacity * (1 + pulseStrength);\n\n              // Reset after pulse completes\n              if (pulseProgress >= 1) {\n                vertex.isPulsing = false;\n                vertex.size = vertex.baseSize;\n                vertex.opacity = vertex.baseOpacity;\n              }\n            }\n          });\n        }\n\n        // Draw edges (lines) first so they appear behind vertices\n        ctx.beginPath();\n        ctx.strokeStyle = CONFIG.constellationColor;\n        ctx.lineWidth = 0.5;\n        constellation.edges.forEach(edge => {\n          const startVertex = constellation.vertices[edge[0]];\n          const endVertex = constellation.vertices[edge[1]];\n          if (!startVertex || !endVertex) return;\n          ctx.moveTo(startVertex.x, startVertex.y);\n          ctx.lineTo(endVertex.x, endVertex.y);\n        });\n        ctx.stroke();\n\n        // Draw vertices with subtle glow\n        constellation.vertices.forEach(vertex => {\n          // Create glow effect for vertices\n          const gradient = ctx.createRadialGradient(vertex.x, vertex.y, 0, vertex.x, vertex.y, vertex.size * 2);\n          gradient.addColorStop(0, `rgba(${CONFIG.constellationVertexColor}, ${vertex.opacity * 0.8})`);\n          gradient.addColorStop(1, `rgba(${CONFIG.constellationVertexColor}, 0)`);\n          ctx.beginPath();\n          ctx.arc(vertex.x, vertex.y, vertex.size * 2, 0, Math.PI * 2);\n          ctx.fillStyle = gradient;\n          ctx.fill();\n\n          // Draw vertex core\n          ctx.beginPath();\n          ctx.arc(vertex.x, vertex.y, vertex.size, 0, Math.PI * 2);\n          ctx.fillStyle = `rgba(${CONFIG.constellationVertexColor}, ${vertex.opacity})`;\n          ctx.fill();\n        });\n      });\n\n      // Update and render burst particles\n      updateBurstParticles(timestamp, deltaTime);\n      renderBurstParticles(ctx, timestamp);\n\n      // Draw cursor influence if available\n      if (cursorPosition.x && cursorPosition.y) {\n        const gradient = ctx.createRadialGradient(cursorPosition.x, cursorPosition.y, 0, cursorPosition.x, cursorPosition.y, CONFIG.cursorInfluenceRadius);\n        gradient.addColorStop(0, `rgba(160, 142, 97, ${CONFIG.cursorGlowOpacity})`);\n        gradient.addColorStop(1, 'rgba(160, 142, 97, 0)');\n        ctx.beginPath();\n        ctx.arc(cursorPosition.x, cursorPosition.y, CONFIG.cursorInfluenceRadius, 0, Math.PI * 2);\n        ctx.fillStyle = gradient;\n        ctx.fill();\n      }\n      requestRef.current = requestAnimationFrame(animate);\n    };\n\n    // Start animation\n    animate(0);\n\n    // Handle window resize\n    const handleResize = () => {\n      // Update canvas size\n      canvas.width = window.innerWidth * pixelRatio;\n      canvas.height = window.innerHeight * pixelRatio;\n      ctx.scale(pixelRatio, pixelRatio);\n\n      // Adjust star positions to maintain density\n      const currentStarCount = starsRef.current.length;\n      const newStars = createStars(window.innerWidth, window.innerHeight);\n\n      // Keep existing stars but ensure they're on screen\n      starsRef.current.forEach(star => {\n        if (star.x > window.innerWidth) star.x = Math.random() * window.innerWidth;\n        if (star.y > window.innerHeight) star.y = Math.random() * window.innerHeight;\n      });\n\n      // Add or remove stars based on new dimensions\n      if (newStars.length > currentStarCount) {\n        starsRef.current = [...starsRef.current, ...newStars.slice(0, newStars.length - currentStarCount)];\n      } else if (newStars.length < currentStarCount) {\n        starsRef.current = starsRef.current.slice(0, newStars.length);\n      }\n\n      // Reposition constellation vertices\n      constellationsRef.current.forEach(constellation => {\n        constellation.vertices.forEach((vertex, index) => {\n          var _CONSTELLATIONS$find;\n          const originalVertex = (_CONSTELLATIONS$find = CONSTELLATIONS.find(c => c.name === constellation.name)) === null || _CONSTELLATIONS$find === void 0 ? void 0 : _CONSTELLATIONS$find.vertices[index];\n          if (originalVertex) {\n            vertex.x = originalVertex.x * window.innerWidth;\n            vertex.y = originalVertex.y * window.innerHeight;\n            vertex.originalX = originalVertex.x;\n            vertex.originalY = originalVertex.y;\n          }\n        });\n      });\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Handle mouse/touch movement for cursor effects\n    const handleMouseMove = e => {\n      setCursorPosition({\n        x: e.clientX,\n        y: e.clientY\n      });\n    };\n    const handleTouchMove = e => {\n      if (e.touches && e.touches[0]) {\n        setCursorPosition({\n          x: e.touches[0].clientX,\n          y: e.touches[0].clientY\n        });\n        e.preventDefault();\n      }\n    };\n    window.addEventListener('mousemove', handleMouseMove);\n    window.addEventListener('touchmove', handleTouchMove, {\n      passive: false\n    });\n\n    // Cleanup\n    return () => {\n      if (requestRef.current) {\n        cancelAnimationFrame(requestRef.current);\n      }\n      window.removeEventListener('resize', handleResize);\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('touchmove', handleTouchMove);\n    };\n  }, [createStars, initializeConstellations, updateBurstParticles, renderBurstParticles, createBurst, CONFIG, cursorPosition, setCursorPosition]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.backgroundWrapper,\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      className: classes.backgroundCanvas\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 560,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 559,\n    columnNumber: 5\n  }, this);\n};\n_s(Background, \"sDE8vvY0B785iyYUCgLx07d2EYA=\", false, function () {\n  return [useStyles];\n});\n_c = Background;\nexport default Background;\nvar _c;\n$RefreshReg$(_c, \"Background\");","map":{"version":3,"names":["React","useEffect","useRef","useMemo","useCallback","createUseStyles","jsxDEV","_jsxDEV","useStyles","backgroundWrapper","position","top","left","width","height","zIndex","pointerEvents","overflow","backgroundCanvas","willChange","backfaceVisibility","transform","CONSTELLATIONS","name","vertices","x","y","edges","drift","Background","cursorPosition","setCursorPosition","_s","classes","canvasRef","starsRef","constellationsRef","requestRef","timeRef","lastFrameTimeRef","burstParticlesRef","lastBurstTimeRef","CONFIG","starCount","starBaseColor","starBrightColor","starMinSize","starMaxSize","starMinOpacity","starMaxOpacity","starMaxSpeed","constellationColor","constellationVertexColor","driftFactor","pulseFrequency","burstProbability","burstParticleCount","min","max","burstLifespan","minBurstInterval","cursorInfluenceRadius","cursorGlowOpacity","createStars","Array","fill","map","size","Math","random","opacity","baseSize","speedX","speedY","baseOpacity","pulseAmplitude","pulseSpeed","pulsePhase","PI","isPulsing","lastPulseTime","burstCandidate","initializeConstellations","constellation","vertex","originalX","originalY","pulseProgress","pulseInterval","individualDrift","phase","frequency","createBurst","color","timestamp","particleCount","floor","i","angle","speed","current","push","vx","cos","vy","sin","createdAt","lifespan","updateBurstParticles","deltaTime","filter","particle","age","forEach","lifeProgress","renderBurstParticles","ctx","gradient","createRadialGradient","addColorStop","beginPath","arc","fillStyle","canvas","getContext","alpha","desynchronized","willReadFrequently","pixelRatio","window","devicePixelRatio","innerWidth","innerHeight","scale","animate","fillRect","star","pulseStart","pulseAge","pulseDuration","pulseStrength","driftX","driftY","margin","strokeStyle","lineWidth","edge","startVertex","endVertex","moveTo","lineTo","stroke","requestAnimationFrame","handleResize","currentStarCount","length","newStars","slice","index","_CONSTELLATIONS$find","originalVertex","find","c","addEventListener","handleMouseMove","e","clientX","clientY","handleTouchMove","touches","preventDefault","passive","cancelAnimationFrame","removeEventListener","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/valeria/Documents/Crucible/frontend/src/components/core/Background.jsx"],"sourcesContent":["import React, { useEffect, useRef, useMemo, useCallback } from 'react';\nimport { createUseStyles } from 'react-jss';\n\n// CSS-in-JS styles with improved performance properties\nconst useStyles = createUseStyles({\n  backgroundWrapper: {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n    zIndex: 1,\n    pointerEvents: 'none',\n    overflow: 'hidden',\n  },\n  backgroundCanvas: {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n    zIndex: 1,\n    pointerEvents: 'none',\n    willChange: 'transform', // Hardware acceleration hint\n    backfaceVisibility: 'hidden',\n    transform: 'translateZ(0)',\n  }\n});\n\n// Enhanced constellation definitions with more subtle, elegant patterns\nconst CONSTELLATIONS = [\n  {\n    name: 'Ursa Major',\n    vertices: [\n      { x: 0.2, y: 0.3 }, { x: 0.25, y: 0.28 }, { x: 0.3, y: 0.25 },\n      { x: 0.35, y: 0.23 }, { x: 0.37, y: 0.18 }, { x: 0.33, y: 0.15 },\n      { x: 0.28, y: 0.15 }\n    ],\n    edges: [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6]],\n    drift: { x: 0.0002, y: -0.00015 } // Subtle drift direction and speed\n  },\n  {\n    name: 'Cassiopeia',\n    vertices: [\n      { x: 0.7, y: 0.15 }, { x: 0.75, y: 0.2 }, { x: 0.8, y: 0.15 },\n      { x: 0.85, y: 0.2 }, { x: 0.9, y: 0.15 }\n    ],\n    edges: [[0, 1], [1, 2], [2, 3], [3, 4]],\n    drift: { x: -0.00015, y: 0.0001 }\n  },\n  {\n    name: 'Lyra',\n    vertices: [\n      { x: 0.5, y: 0.3 }, { x: 0.53, y: 0.35 }, { x: 0.48, y: 0.38 },\n      { x: 0.45, y: 0.35 }, { x: 0.5, y: 0.3 }, { x: 0.5, y: 0.25 }\n    ],\n    edges: [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]],\n    drift: { x: 0.00008, y: 0.00012 }\n  },\n  {\n    name: 'Cygnus',\n    vertices: [\n      { x: 0.15, y: 0.6 }, { x: 0.2, y: 0.65 }, { x: 0.25, y: 0.7 },\n      { x: 0.3, y: 0.75 }, { x: 0.35, y: 0.8 }, { x: 0.25, y: 0.7 },\n      { x: 0.2, y: 0.71 }, { x: 0.25, y: 0.7 }, { x: 0.3, y: 0.69 }\n    ],\n    edges: [[0, 1], [1, 2], [2, 3], [3, 4], [5, 6], [7, 8]],\n    drift: { x: 0.0001, y: -0.00008 }\n  }\n];\n\n/**\n * Enhanced Background Component\n * \n * Creates a sophisticated, subtle starry background with elegantly drifting\n * constellations and occasional luminous effects that evoke the serene vastness of space.\n * \n * @param {Object} cursorPosition - Current cursor coordinates\n * @param {Function} setCursorPosition - Function to update cursor position\n */\nconst Background = ({ cursorPosition, setCursorPosition }) => {\n  const classes = useStyles();\n  const canvasRef = useRef(null);\n  const starsRef = useRef([]);\n  const constellationsRef = useRef([]);\n  const requestRef = useRef(null);\n  const timeRef = useRef(0);\n  const lastFrameTimeRef = useRef(0);\n  const burstParticlesRef = useRef([]);\n  const lastBurstTimeRef = useRef(0);\n  \n  // Configuration constants for fine-tuning\n  const CONFIG = useMemo(() => ({\n    starCount: 80,\n    starBaseColor: '191, 173, 127',\n    starBrightColor: '207, 185, 130',\n    starMinSize: 0.5,\n    starMaxSize: 1.8,\n    starMinOpacity: 0.05,\n    starMaxOpacity: 0.28,\n    starMaxSpeed: 0.012,\n    constellationColor: 'rgba(191, 173, 127, 0.08)',\n    constellationVertexColor: '207, 185, 130',\n    driftFactor: 1,\n    pulseFrequency: 0.0002, // How often stars pulse\n    burstProbability: 0.00004, // Chance of a burst effect per star per frame\n    burstParticleCount: { min: 4, max: 8 },\n    burstLifespan: 3000, // Milliseconds\n    minBurstInterval: 5000, // Minimum time between bursts\n    cursorInfluenceRadius: 100,\n    cursorGlowOpacity: 0.03\n  }), []);\n  \n  // Create star objects with improved properties\n  const createStars = useCallback((width, height) => {\n    const { starCount, starMinSize, starMaxSize, starMinOpacity, starMaxOpacity, starMaxSpeed } = CONFIG;\n    \n    return Array(starCount).fill().map(() => {\n      const size = Math.random() * (starMaxSize - starMinSize) + starMinSize;\n      const opacity = Math.random() * (starMaxOpacity - starMinOpacity) + starMinOpacity;\n      \n      return {\n        x: Math.random() * width,\n        y: Math.random() * height,\n        size,\n        baseSize: size,\n        speedX: (Math.random() - 0.5) * starMaxSpeed,\n        speedY: (Math.random() - 0.5) * starMaxSpeed,\n        opacity,\n        baseOpacity: opacity,\n        pulseAmplitude: Math.random() * 0.2 + 0.1,\n        pulseSpeed: Math.random() * 0.0015 + 0.0005,\n        pulsePhase: Math.random() * Math.PI * 2,\n        isPulsing: false,\n        lastPulseTime: 0,\n        burstCandidate: Math.random() < 0.15 // Only 15% of stars can potentially burst\n      };\n    });\n  }, [CONFIG]);\n  \n  // Initialize constellations with enhanced animation properties\n  const initializeConstellations = useCallback((width, height) => {\n    return CONSTELLATIONS.map(constellation => {\n      // Convert relative coordinates to screen coordinates\n      const vertices = constellation.vertices.map(vertex => ({\n        x: vertex.x * width,\n        y: vertex.y * height,\n        originalX: vertex.x, // Store original relative position\n        originalY: vertex.y,\n        size: Math.random() * 0.5 + 1.7, // Varied sizes for more natural appearance\n        baseSize: Math.random() * 0.5 + 1.7,\n        opacity: Math.random() * 0.15 + 0.15,\n        baseOpacity: Math.random() * 0.15 + 0.15,\n        isPulsing: false,\n        pulseProgress: 0,\n        pulseSpeed: Math.random() * 0.003 + 0.001,\n        pulseAmplitude: Math.random() * 0.4 + 0.2,\n        lastPulseTime: 0,\n        pulseInterval: Math.random() * 15000 + 10000, // Random interval between pulses\n        pulsePhase: Math.random() * Math.PI * 2,\n        // Small individual drift for each vertex to add organic movement\n        individualDrift: {\n          x: (Math.random() - 0.5) * 0.00005,\n          y: (Math.random() - 0.5) * 0.00005\n        }\n      }));\n      \n      return {\n        name: constellation.name,\n        vertices,\n        edges: constellation.edges,\n        drift: constellation.drift || { x: 0, y: 0 },\n        // Movement pattern parameters\n        phase: Math.random() * Math.PI * 2,\n        frequency: Math.random() * 0.00005 + 0.00001\n      };\n    });\n  }, []);\n  \n  // Create a burst effect\n  const createBurst = useCallback((x, y, color, timestamp) => {\n    const { burstParticleCount, burstLifespan } = CONFIG;\n    \n    const particleCount = Math.floor(\n      Math.random() * (burstParticleCount.max - burstParticleCount.min) + burstParticleCount.min\n    );\n    \n    for (let i = 0; i < particleCount; i++) {\n      // Calculate angle and distance\n      const angle = Math.random() * Math.PI * 2;\n      const speed = Math.random() * 0.4 + 0.2;\n      \n      burstParticlesRef.current.push({\n        x,\n        y,\n        vx: Math.cos(angle) * speed,\n        vy: Math.sin(angle) * speed,\n        size: Math.random() * 1.2 + 0.8,\n        opacity: Math.random() * 0.6 + 0.4,\n        color,\n        createdAt: timestamp,\n        lifespan: Math.random() * 500 + burstLifespan\n      });\n    }\n    \n    // Set the last burst time to prevent too frequent bursts\n    lastBurstTimeRef.current = timestamp;\n  }, [CONFIG]);\n  \n  // Update burst particles\n  const updateBurstParticles = useCallback((timestamp, deltaTime) => {\n    // Remove expired particles\n    burstParticlesRef.current = burstParticlesRef.current.filter(particle => {\n      const age = timestamp - particle.createdAt;\n      return age < particle.lifespan;\n    });\n    \n    // Update remaining particles\n    burstParticlesRef.current.forEach(particle => {\n      const age = timestamp - particle.createdAt;\n      const lifeProgress = age / particle.lifespan;\n      \n      // Update position with easing\n      particle.x += particle.vx * deltaTime * (1 - lifeProgress * 0.8);\n      particle.y += particle.vy * deltaTime * (1 - lifeProgress * 0.8);\n      \n      // Fade out\n      particle.opacity = Math.max(0, particle.opacity * (1 - lifeProgress * 0.01));\n      \n      // Slow down over time\n      particle.vx *= 0.99;\n      particle.vy *= 0.99;\n    });\n  }, []);\n  \n  // Render burst particles\n  const renderBurstParticles = useCallback((ctx, timestamp) => {\n    burstParticlesRef.current.forEach(particle => {\n      const age = timestamp - particle.createdAt;\n      const lifeProgress = age / particle.lifespan;\n      \n      // Create a subtle glow effect\n      const gradient = ctx.createRadialGradient(\n        particle.x, particle.y, 0,\n        particle.x, particle.y, particle.size * 3\n      );\n      \n      gradient.addColorStop(0, `rgba(${particle.color}, ${particle.opacity * (1 - lifeProgress)})`);\n      gradient.addColorStop(1, `rgba(${particle.color}, 0)`);\n      \n      ctx.beginPath();\n      ctx.arc(particle.x, particle.y, particle.size * 3, 0, Math.PI * 2);\n      ctx.fillStyle = gradient;\n      ctx.fill();\n      \n      // Draw center\n      ctx.beginPath();\n      ctx.arc(particle.x, particle.y, particle.size * (1 - lifeProgress * 0.5), 0, Math.PI * 2);\n      ctx.fillStyle = `rgba(${particle.color}, ${particle.opacity * (1 - lifeProgress * 0.5)})`;\n      ctx.fill();\n    });\n  }, []);\n  \n  // Initialize canvas and animation elements\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    \n    const ctx = canvas.getContext('2d', {\n      alpha: true,\n      desynchronized: true, // For lower latency if supported\n      willReadFrequently: false\n    });\n    \n    // Set canvas dimensions accounting for device pixel ratio\n    const pixelRatio = window.devicePixelRatio || 1;\n    canvas.width = window.innerWidth * pixelRatio;\n    canvas.height = window.innerHeight * pixelRatio;\n    \n    // Scale context to account for pixel ratio\n    ctx.scale(pixelRatio, pixelRatio);\n    \n    // Initialize stars and constellations\n    starsRef.current = createStars(window.innerWidth, window.innerHeight);\n    constellationsRef.current = initializeConstellations(window.innerWidth, window.innerHeight);\n    \n    // Animation loop\n    const animate = (timestamp) => {\n      // Calculate delta time for smooth animation regardless of frame rate\n      const deltaTime = lastFrameTimeRef.current ? Math.min(timestamp - lastFrameTimeRef.current, 32) : 16.67;\n      lastFrameTimeRef.current = timestamp;\n      timeRef.current = timestamp;\n      \n      // Clear canvas with pure black\n      ctx.fillStyle = '#000000';\n      ctx.fillRect(0, 0, canvas.width / pixelRatio, canvas.height / pixelRatio);\n      \n      // Update and draw stars\n      starsRef.current.forEach(star => {\n        // Apply smooth drift movement\n        star.x += star.speedX * deltaTime * CONFIG.driftFactor;\n        star.y += star.speedY * deltaTime * CONFIG.driftFactor;\n        \n        // Wrap around edges\n        if (star.x < -10) star.x = window.innerWidth + 10;\n        if (star.x > window.innerWidth + 10) star.x = -10;\n        if (star.y < -10) star.y = window.innerHeight + 10;\n        if (star.y > window.innerHeight + 10) star.y = -10;\n        \n        // Determine if the star should pulse\n        if (!star.isPulsing && Math.random() < CONFIG.pulseFrequency * deltaTime) {\n          star.isPulsing = true;\n          star.pulseStart = timestamp;\n        }\n        \n        // Apply pulsing effect\n        if (star.isPulsing) {\n          const pulseAge = timestamp - star.pulseStart;\n          const pulseDuration = 3000 + Math.random() * 2000; // Variable duration\n          const pulseProgress = pulseAge / pulseDuration;\n          \n          // Smooth pulse using sine wave\n          const pulseStrength = Math.sin(pulseProgress * Math.PI) * star.pulseAmplitude;\n          \n          star.size = star.baseSize * (1 + pulseStrength);\n          star.opacity = star.baseOpacity * (1 + pulseStrength);\n          \n          // Reset after pulse completes\n          if (pulseProgress >= 1) {\n            star.isPulsing = false;\n            star.size = star.baseSize;\n            star.opacity = star.baseOpacity;\n          }\n        }\n        \n        // Trigger occasional bursts, but not too frequently\n        if (star.burstCandidate && \n            Math.random() < CONFIG.burstProbability * deltaTime && \n            timestamp - lastBurstTimeRef.current > CONFIG.minBurstInterval) {\n          createBurst(star.x, star.y, CONFIG.starBaseColor, timestamp);\n        }\n        \n        // Draw star with a subtle glow\n        if (star.size > 1.2) {\n          // Larger stars get a subtle glow\n          const gradient = ctx.createRadialGradient(\n            star.x, star.y, 0,\n            star.x, star.y, star.size * 2\n          );\n          gradient.addColorStop(0, `rgba(${CONFIG.starBrightColor}, ${star.opacity * 0.8})`);\n          gradient.addColorStop(1, `rgba(${CONFIG.starBrightColor}, 0)`);\n          \n          ctx.beginPath();\n          ctx.arc(star.x, star.y, star.size * 2, 0, Math.PI * 2);\n          ctx.fillStyle = gradient;\n          ctx.fill();\n        }\n        \n        // Draw star core\n        ctx.beginPath();\n        ctx.arc(star.x, star.y, star.size, 0, Math.PI * 2);\n        ctx.fillStyle = `rgba(${CONFIG.starBaseColor}, ${star.opacity})`;\n        ctx.fill();\n      });\n      \n      // Update and draw constellations\n      constellationsRef.current.forEach(constellation => {\n        // Apply collective drift to the constellation\n        if (constellation.drift) {\n          // Oscillating movement for more organic feel\n          const driftX = constellation.drift.x * Math.sin(timestamp * constellation.frequency + constellation.phase) * deltaTime * CONFIG.driftFactor;\n          const driftY = constellation.drift.y * Math.cos(timestamp * constellation.frequency + constellation.phase * 1.3) * deltaTime * CONFIG.driftFactor;\n          \n          constellation.vertices.forEach(vertex => {\n            // Apply collective drift plus individual vertex variation\n            vertex.x += driftX + vertex.individualDrift.x * deltaTime * CONFIG.driftFactor;\n            vertex.y += driftY + vertex.individualDrift.y * deltaTime * CONFIG.driftFactor;\n            \n            // Keep vertices within bounds with a margin\n            const margin = 50;\n            if (vertex.x < -margin) vertex.x = window.innerWidth + margin;\n            if (vertex.x > window.innerWidth + margin) vertex.x = -margin;\n            if (vertex.y < -margin) vertex.y = window.innerHeight + margin;\n            if (vertex.y > window.innerHeight + margin) vertex.y = -margin;\n            \n            // Update original relative position\n            vertex.originalX = vertex.x / window.innerWidth;\n            vertex.originalY = vertex.y / window.innerHeight;\n            \n            // Determine if vertex should pulse\n            if (!vertex.isPulsing && timestamp - vertex.lastPulseTime > vertex.pulseInterval) {\n              vertex.isPulsing = true;\n              vertex.pulseStart = timestamp;\n              vertex.lastPulseTime = timestamp;\n            }\n            \n            // Apply pulsing effect\n            if (vertex.isPulsing) {\n              const pulseAge = timestamp - vertex.pulseStart;\n              const pulseDuration = 3000 + Math.random() * 1000;\n              const pulseProgress = pulseAge / pulseDuration;\n              \n              // Smooth pulse using sine wave\n              const pulseStrength = Math.sin(pulseProgress * Math.PI) * vertex.pulseAmplitude;\n              \n              vertex.size = vertex.baseSize * (1 + pulseStrength * 0.3);\n              vertex.opacity = vertex.baseOpacity * (1 + pulseStrength);\n              \n              // Reset after pulse completes\n              if (pulseProgress >= 1) {\n                vertex.isPulsing = false;\n                vertex.size = vertex.baseSize;\n                vertex.opacity = vertex.baseOpacity;\n              }\n            }\n          });\n        }\n        \n        // Draw edges (lines) first so they appear behind vertices\n        ctx.beginPath();\n        ctx.strokeStyle = CONFIG.constellationColor;\n        ctx.lineWidth = 0.5;\n        \n        constellation.edges.forEach(edge => {\n          const startVertex = constellation.vertices[edge[0]];\n          const endVertex = constellation.vertices[edge[1]];\n          \n          if (!startVertex || !endVertex) return;\n          \n          ctx.moveTo(startVertex.x, startVertex.y);\n          ctx.lineTo(endVertex.x, endVertex.y);\n        });\n        ctx.stroke();\n        \n        // Draw vertices with subtle glow\n        constellation.vertices.forEach(vertex => {\n          // Create glow effect for vertices\n          const gradient = ctx.createRadialGradient(\n            vertex.x, vertex.y, 0,\n            vertex.x, vertex.y, vertex.size * 2\n          );\n          gradient.addColorStop(0, `rgba(${CONFIG.constellationVertexColor}, ${vertex.opacity * 0.8})`);\n          gradient.addColorStop(1, `rgba(${CONFIG.constellationVertexColor}, 0)`);\n          \n          ctx.beginPath();\n          ctx.arc(vertex.x, vertex.y, vertex.size * 2, 0, Math.PI * 2);\n          ctx.fillStyle = gradient;\n          ctx.fill();\n          \n          // Draw vertex core\n          ctx.beginPath();\n          ctx.arc(vertex.x, vertex.y, vertex.size, 0, Math.PI * 2);\n          ctx.fillStyle = `rgba(${CONFIG.constellationVertexColor}, ${vertex.opacity})`;\n          ctx.fill();\n        });\n      });\n      \n      // Update and render burst particles\n      updateBurstParticles(timestamp, deltaTime);\n      renderBurstParticles(ctx, timestamp);\n      \n      // Draw cursor influence if available\n      if (cursorPosition.x && cursorPosition.y) {\n        const gradient = ctx.createRadialGradient(\n          cursorPosition.x, cursorPosition.y, 0,\n          cursorPosition.x, cursorPosition.y, CONFIG.cursorInfluenceRadius\n        );\n        gradient.addColorStop(0, `rgba(160, 142, 97, ${CONFIG.cursorGlowOpacity})`);\n        gradient.addColorStop(1, 'rgba(160, 142, 97, 0)');\n        \n        ctx.beginPath();\n        ctx.arc(cursorPosition.x, cursorPosition.y, CONFIG.cursorInfluenceRadius, 0, Math.PI * 2);\n        ctx.fillStyle = gradient;\n        ctx.fill();\n      }\n      \n      requestRef.current = requestAnimationFrame(animate);\n    };\n    \n    // Start animation\n    animate(0);\n    \n    // Handle window resize\n    const handleResize = () => {\n      // Update canvas size\n      canvas.width = window.innerWidth * pixelRatio;\n      canvas.height = window.innerHeight * pixelRatio;\n      ctx.scale(pixelRatio, pixelRatio);\n      \n      // Adjust star positions to maintain density\n      const currentStarCount = starsRef.current.length;\n      const newStars = createStars(window.innerWidth, window.innerHeight);\n      \n      // Keep existing stars but ensure they're on screen\n      starsRef.current.forEach(star => {\n        if (star.x > window.innerWidth) star.x = Math.random() * window.innerWidth;\n        if (star.y > window.innerHeight) star.y = Math.random() * window.innerHeight;\n      });\n      \n      // Add or remove stars based on new dimensions\n      if (newStars.length > currentStarCount) {\n        starsRef.current = [...starsRef.current, ...newStars.slice(0, newStars.length - currentStarCount)];\n      } else if (newStars.length < currentStarCount) {\n        starsRef.current = starsRef.current.slice(0, newStars.length);\n      }\n      \n      // Reposition constellation vertices\n      constellationsRef.current.forEach(constellation => {\n        constellation.vertices.forEach((vertex, index) => {\n          const originalVertex = CONSTELLATIONS.find(c => c.name === constellation.name)?.vertices[index];\n          if (originalVertex) {\n            vertex.x = originalVertex.x * window.innerWidth;\n            vertex.y = originalVertex.y * window.innerHeight;\n            vertex.originalX = originalVertex.x;\n            vertex.originalY = originalVertex.y;\n          }\n        });\n      });\n    };\n    \n    window.addEventListener('resize', handleResize);\n    \n    // Handle mouse/touch movement for cursor effects\n    const handleMouseMove = (e) => {\n      setCursorPosition({ x: e.clientX, y: e.clientY });\n    };\n    \n    const handleTouchMove = (e) => {\n      if (e.touches && e.touches[0]) {\n        setCursorPosition({ x: e.touches[0].clientX, y: e.touches[0].clientY });\n        e.preventDefault();\n      }\n    };\n    \n    window.addEventListener('mousemove', handleMouseMove);\n    window.addEventListener('touchmove', handleTouchMove, { passive: false });\n    \n    // Cleanup\n    return () => {\n      if (requestRef.current) {\n        cancelAnimationFrame(requestRef.current);\n      }\n      window.removeEventListener('resize', handleResize);\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('touchmove', handleTouchMove);\n    };\n  }, [\n    createStars,\n    initializeConstellations,\n    updateBurstParticles,\n    renderBurstParticles,\n    createBurst,\n    CONFIG,\n    cursorPosition,\n    setCursorPosition\n  ]);\n  \n  return (\n    <div className={classes.backgroundWrapper}>\n      <canvas ref={canvasRef} className={classes.backgroundCanvas} />\n    </div>\n  );\n};\n\nexport default Background;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}